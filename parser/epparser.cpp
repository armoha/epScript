/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include <stdio.h>
#include <assert.h>
#include <string>
#include <sstream>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <regex>

#include "epparser.h"
#include "generator/pygen.h"
#include "generator/closure.h"
#include "parser.h"
#include "tokenAdapter.h"
#include "parserUtilities.h"

struct ParserStruct {
   PyGenerator gen;
    ClosureManager closure;
};

int currentTokenizingLine;
std::string currentFunction;
std::string currentModule;
bool functionCalledInMultipleActions;
bool PARSER_DEBUG = false;
bool MAP_DEBUG = false;

/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 145
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token*
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy289;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL  ParserStruct* ps ;
#define ParseARG_PDECL , ParserStruct* ps 
#define ParseARG_FETCH  ParserStruct* ps  = yypParser->ps 
#define ParseARG_STORE yypParser->ps  = ps 
#define YYNSTATE 354
#define YYNRULE 182
#define YYERRORSYMBOL 75
#define YYERRSYMDT yy289
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (8334)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
 /*    10 */   464,   68,   67,   69,   71,   70,   76,   75,   73,   74,
 /*    20 */    72,  233,  464,   18,   81,  339,  464,  464,  229,  138,
 /*    30 */   464,   29,  464,  303,  464,  464,  236,  464,  464,  208,
 /*    40 */   464,  419,  278,  317,  464,  464,  464,  464,  464,  464,
 /*    50 */   464,  464,  365,  365,  349,  368,  365,  228,  348,  299,
 /*    60 */     8,    4,  464,  464,  464,  464,  464,  464,  464,  464,
 /*    70 */   464,  465,  465,  465,  465,  465,  465,  465,  465,  465,
 /*    80 */   465,  465,   68,   67,   69,   71,   70,   76,   75,   73,
 /*    90 */    74,   72,  227,  465,   18,   81,  339,  465,  465,  248,
 /*   100 */   138,  465,   30,  465,  303,  465,  465,  247,  465,  465,
 /*   110 */   208,  465,  415,  278,  318,  465,  465,  465,  465,  465,
 /*   120 */   465,  465,  465,  366,  366,  367,  374,  366,  347,  473,
 /*   130 */   374,  374,  433,  465,  465,  465,  465,  465,  465,  465,
 /*   140 */   465,  465,  466,  466,  466,  466,  466,  466,  466,  466,
 /*   150 */   466,  466,  466,   68,   67,   69,   71,   70,   76,   75,
 /*   160 */    73,   74,   72,  433,  466,   18,   81,  339,  466,  466,
 /*   170 */   411,  138,  466,   25,  466,  303,  466,  466,  345,  466,
 /*   180 */   466,  208,  466,   33,  278,  319,  466,  466,  466,  466,
 /*   190 */   466,  466,  466,  466,   27,   86,   28,  409,  375,   53,
 /*   200 */   473,  411,  375,  375,  466,  466,  466,  466,  466,  466,
 /*   210 */   466,  466,  466,  467,  467,  467,  467,  467,  467,  467,
 /*   220 */   467,  467,  467,  467,   68,   67,   69,   71,   70,   76,
 /*   230 */    75,   73,   74,   72,  340,  467,   18,   81,  339,  467,
 /*   240 */   467,  486,  138,  467,  138,  467,  344,  467,  467,   82,
 /*   250 */   467,  467,  208,  467,  141,  278,  321,  467,  467,  467,
 /*   260 */   467,  467,  467,  467,  467,  376,  486,  342,  337,  376,
 /*   270 */   376,  273,  486,  315,  474,  467,  467,  467,  467,  467,
 /*   280 */   467,  467,  467,  467,  468,  468,  468,  468,  468,  468,
 /*   290 */   468,  468,  468,  468,  468,   68,   67,   69,   71,   70,
 /*   300 */    76,   75,   73,   74,   72,  336,  468,   18,   81,  339,
 /*   310 */   468,  468,  488,  138,  468,  303,  468,   82,  468,  468,
 /*   320 */   512,  468,  468,  208,  468,  341,  278,  287,  468,  468,
 /*   330 */   468,  468,  468,  468,  468,  468,  378,  488,  274,  410,
 /*   340 */   378,  378,  476,  488,   26,  512,  468,  468,  468,  468,
 /*   350 */   468,  468,  468,  468,  468,  469,  469,  469,  469,  469,
 /*   360 */   469,  469,  469,  469,  469,  469,   68,   67,   69,   71,
 /*   370 */    70,   76,   75,   73,   74,   72,  410,  469,   18,   81,
 /*   380 */   339,  469,  469,   82,  138,  469,  482,  469,  482,  469,
 /*   390 */   469,  513,  469,  469,  208,  469,   24,  277,  303,  469,
 /*   400 */   469,  469,  469,  469,  469,  469,  469,  379,  484,  340,
 /*   410 */    34,  379,  379,  273,  484,  316,  513,  469,  469,  469,
 /*   420 */   469,  469,  469,  469,  469,  469,  440,  440,  440,  440,
 /*   430 */   440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
 /*   440 */   440,  440,  440,  440,  440,  440,  440,  443,  440,  440,
 /*   450 */   343,  440,  440,  440,  137,   23,  440,  136,  440,  514,
 /*   460 */   440,  440,  515,  440,  440,  254,  440,  281,   96,  138,
 /*   470 */   440,  440,  440,  440,  440,  440,  440,  440,  283,  218,
 /*   480 */   537,   11,   90,  280,  514,  268,  437,  515,  440,  440,
 /*   490 */   440,  440,  440,  440,  440,  440,  440,  422,  422,  422,
 /*   500 */   422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
 /*   510 */   422,  422,  422,  422,  422,  422,  422,  422,  435,  422,
 /*   520 */   422,  422,  422,  422,  422,   85,   13,  422,  516,  422,
 /*   530 */    82,  422,  422,  303,  422,  422,    3,  422,  238,  175,
 /*   540 */   138,  422,  422,  422,  422,  422,  422,  422,  422,  435,
 /*   550 */   214,  517,  332,  516,   58,  426,  413,  333,  240,  422,
 /*   560 */   422,  422,  422,  422,  422,  422,  422,  422,  430,  430,
 /*   570 */   430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
 /*   580 */   430,  430,  430,  430,  430,  430,  430,  430,  430,  519,
 /*   590 */   430,  430,  430,  430,  430,  430,   15,  520,  430,   82,
 /*   600 */   430,   82,  430,  430,  117,  430,  430,  330,  430,  329,
 /*   610 */   327,  138,  430,  430,  430,  430,  430,  430,  430,  430,
 /*   620 */   519,  207,  116,  326,  475,  115,  477,  522,  520,  324,
 /*   630 */   430,  430,  430,  430,  430,  430,  430,  430,  430,  427,
 /*   640 */   427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
 /*   650 */   427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
 /*   660 */    82,  427,  427,  427,  427,  427,  427,  303,  138,  427,
 /*   670 */   138,  427,  323,  427,  427,  114,  427,  427,  217,  427,
 /*   680 */   216,   17,  138,  427,  427,  427,  427,  427,  427,  427,
 /*   690 */   427,  183,  131,  109,  108,  107,  106,  105,  420,  414,
 /*   700 */   416,  427,  427,  427,  427,  427,  427,  427,  427,  427,
 /*   710 */   428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
 /*   720 */   428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
 /*   730 */   428,  174,  428,   20,  428,  428,  428,  428,  172,  138,
 /*   740 */   428,  138,  428,   95,  428,  428,  499,  428,  428,  130,
 /*   750 */   428,  129,  138,  138,  428,  428,  428,  428,  428,  428,
 /*   760 */   428,  428,  128,  127,   94,  164,  163,  162,  161,  154,
 /*   770 */   153,   38,  428,  428,  428,  428,  428,  428,  428,  428,
 /*   780 */   428,  429,  429,  429,  429,  429,  429,  429,  429,  429,
 /*   790 */   429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
 /*   800 */   429,  429,  143,  429,   19,  429,  429,  429,  429,  235,
 /*   810 */   138,  429,  138,  429,  221,  429,  429,  502,  429,  429,
 /*   820 */   126,  429,  125,  138,  138,  429,  429,  429,  429,  429,
 /*   830 */   429,  429,  429,  124,  123,   37,  508,   36,  219,  184,
 /*   840 */   292,   16,  530,  429,  429,  429,  429,  429,  429,  429,
 /*   850 */   429,  429,  441,  441,  441,  441,  441,  441,  441,  441,
 /*   860 */   441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
 /*   870 */   441,  441,  441,  531,  441,  441,  441,  441,  441,  441,
 /*   880 */   527,  138,  441,  138,  441,  532,  441,  441,  286,  441,
 /*   890 */   441,  122,  441,  121,  138,  138,  441,  441,  441,  441,
 /*   900 */   441,  441,  441,  441,  103,  102,  147,  242,  284,  282,
 /*   910 */    84,  182,  223,  249,  441,  441,  441,  441,  441,  441,
 /*   920 */   441,  441,  441,   78,  450,   59,   60,  450,   66,   64,
 /*   930 */    63,   62,   61,   65,   68,   67,   69,   71,   70,   76,
 /*   940 */    75,   73,   74,   72,  250,  450,   18,   81,  339,  450,
 /*   950 */   450,  275,  138,  450,  138,  450,  169,  450,  450,  276,
 /*   960 */   450,  450,  101,  450,  100,  138,  138,  450,  450,  450,
 /*   970 */   450,  450,  450,  450,  450,   99,   98,  170,  236,  320,
 /*   980 */   244,  271,  167,  258,  255,  450,  450,  450,  450,  450,
 /*   990 */   450,  450,  450,  450,  451,  451,  451,  451,  451,  451,
 /*  1000 */   451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
 /*  1010 */   451,  451,   73,   74,   72,  247,  451,   18,   81,  339,
 /*  1020 */   451,  451,  237,  138,  451,  138,  451,  252,  451,  451,
 /*  1030 */   189,  451,  451,  120,  451,  119,  138,  138,  451,  451,
 /*  1040 */   451,  451,  451,  451,  451,  451,  215,  113,  538,  538,
 /*  1050 */   538,  538,  538,  538,  538,  538,  451,  451,  451,  451,
 /*  1060 */   451,  451,  451,  451,  451,  452,  452,  452,  452,  452,
 /*  1070 */   452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
 /*  1080 */   452,  452,  452,   73,   74,   72,  538,  452,   18,   81,
 /*  1090 */   339,  452,  452,  538,  138,  452,  138,  452,  538,  452,
 /*  1100 */   452,  538,  452,  452,  112,  452,  111,  138,  138,  452,
 /*  1110 */   452,  452,  452,  452,  452,  452,  452,  110,  206,  538,
 /*  1120 */   538,  538,  538,  538,  538,  538,  538,  452,  452,  452,
 /*  1130 */   452,  452,  452,  452,  452,  452,  453,  453,  453,  453,
 /*  1140 */   453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
 /*  1150 */   453,  453,  453,  453,  453,  453,  453,  538,  453,   18,
 /*  1160 */    81,  339,  453,  453,  538,  138,  453,  138,  453,  538,
 /*  1170 */   453,  453,  538,  453,  453,  213,  453,  202,  138,  138,
 /*  1180 */   453,  453,  453,  453,  453,  453,  453,  453,  201,  200,
 /*  1190 */   538,  538,  538,  538,  538,  538,  538,  538,  453,  453,
 /*  1200 */   453,  453,  453,  453,  453,  453,  453,  454,  454,  454,
 /*  1210 */   454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
 /*  1220 */   454,  454,  454,  454,  454,  454,  454,  454,  538,  454,
 /*  1230 */    18,   81,  339,  454,  454,  538,  138,  454,  138,  454,
 /*  1240 */   538,  454,  454,  538,  454,  454,  199,  454,  198,  138,
 /*  1250 */   138,  454,  454,  454,  454,  454,  454,  454,  454,  197,
 /*  1260 */   196,  538,  538,  538,  538,  538,  538,  538,  538,  454,
 /*  1270 */   454,  454,  454,  454,  454,  454,  454,  454,  455,  455,
 /*  1280 */   455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
 /*  1290 */   455,  455,  455,  455,  455,  455,  455,  455,  455,  538,
 /*  1300 */   455,   18,   81,  339,  455,  455,  538,  138,  455,  138,
 /*  1310 */   455,  538,  455,  455,  538,  455,  455,  195,  455,  194,
 /*  1320 */   138,  138,  455,  455,  455,  455,  455,  455,  455,  455,
 /*  1330 */   193,  192,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  1340 */   455,  455,  455,  455,  455,  455,  455,  455,  455,  456,
 /*  1350 */   456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
 /*  1360 */   456,  456,  456,  456,  456,   76,   75,   73,   74,   72,
 /*  1370 */   538,  456,   18,   81,  339,  456,  456,  538,  138,  456,
 /*  1380 */   138,  456,  538,  456,  456,  538,  456,  456,  191,  456,
 /*  1390 */   190,  138,  138,  456,  456,  456,  456,  456,  456,  456,
 /*  1400 */   456,  212,  211,  538,  538,  538,  538,  538,  538,  538,
 /*  1410 */   538,  456,  456,  456,  456,  456,  456,  456,  456,  456,
 /*  1420 */   457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
 /*  1430 */   457,  457,  457,  457,  457,  457,   76,   75,   73,   74,
 /*  1440 */    72,  538,  457,   18,   81,  339,  457,  457,  538,  138,
 /*  1450 */   457,  138,  457,  538,  457,  457,  538,  457,  457,  210,
 /*  1460 */   457,  209,  538,  538,  457,  457,  457,  457,  457,  457,
 /*  1470 */   457,  457,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  1480 */   538,  538,  457,  457,  457,  457,  457,  457,  457,  457,
 /*  1490 */   457,  458,  458,  458,  458,  458,  458,  458,  458,  458,
 /*  1500 */   458,  458,  458,  458,  458,   71,   70,   76,   75,   73,
 /*  1510 */    74,   72,  538,  458,   18,   81,  339,  458,  458,  538,
 /*  1520 */   538,  458,  538,  458,  538,  458,  458,  538,  458,  458,
 /*  1530 */   538,  458,  538,  538,  538,  458,  458,  458,  458,  458,
 /*  1540 */   458,  458,  458,  538,  538,  538,  538,  538,  538,  538,
 /*  1550 */   538,  538,  538,  458,  458,  458,  458,  458,  458,  458,
 /*  1560 */   458,  458,  459,  459,  459,  459,  459,  459,  459,  459,
 /*  1570 */   459,  459,  459,  459,   67,   69,   71,   70,   76,   75,
 /*  1580 */    73,   74,   72,  538,  459,   18,   81,  339,  459,  459,
 /*  1590 */   538,  538,  459,  538,  459,  538,  459,  459,  538,  459,
 /*  1600 */   459,  538,  459,  538,  538,  538,  459,  459,  459,  459,
 /*  1610 */   459,  459,  459,  459,  538,  538,  538,  538,  538,  538,
 /*  1620 */   538,  538,  538,  538,  459,  459,  459,  459,  459,  459,
 /*  1630 */   459,  459,  459,  460,  460,  460,  460,  460,  460,  460,
 /*  1640 */   460,  460,  460,  460,  460,  460,   69,   71,   70,   76,
 /*  1650 */    75,   73,   74,   72,  538,  460,   18,   81,  339,  460,
 /*  1660 */   460,  538,  538,  460,  538,  460,  538,  460,  460,  538,
 /*  1670 */   460,  460,  538,  460,  538,  538,  538,  460,  460,  460,
 /*  1680 */   460,  460,  460,  460,  460,  538,  538,  538,  538,  538,
 /*  1690 */   538,  538,  538,  538,  538,  460,  460,  460,  460,  460,
 /*  1700 */   460,  460,  460,  460,  470,  470,  470,  470,  470,   66,
 /*  1710 */    64,   63,   62,   61,   65,   68,   67,   69,   71,   70,
 /*  1720 */    76,   75,   73,   74,   72,  538,  470,   18,   81,  339,
 /*  1730 */   470,  470,  538,  538,  470,  538,  470,  538,  470,  470,
 /*  1740 */   538,  470,  470,  538,  470,  538,  538,  538,  470,  470,
 /*  1750 */   470,  470,  470,  470,  470,  470,  538,  538,  538,  538,
 /*  1760 */   538,  538,  538,  538,  538,  538,  470,  470,  470,  470,
 /*  1770 */   470,  470,  470,  470,  470,  471,  471,  471,   60,  471,
 /*  1780 */    66,   64,   63,   62,   61,   65,   68,   67,   69,   71,
 /*  1790 */    70,   76,   75,   73,   74,   72,  538,  471,   18,   81,
 /*  1800 */   339,  471,  471,  538,  538,  471,  538,  471,  538,  471,
 /*  1810 */   471,  538,  471,  471,  538,  471,  538,  538,  538,  471,
 /*  1820 */   471,  471,  471,  471,  471,  471,  471,  538,  538,  538,
 /*  1830 */   538,  538,  538,  538,  538,  538,  538,  471,  471,  471,
 /*  1840 */   471,  471,  471,  471,  471,  471,  445,  445,  445,  445,
 /*  1850 */   445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
 /*  1860 */   445,  445,  445,  445,  445,  445,  445,  538,  445,  445,
 /*  1870 */   445,  445,  445,  445,  538,  538,  445,  538,  445,  538,
 /*  1880 */   445,  445,  538,  445,  445,  538,  445,  538,  538,  538,
 /*  1890 */   445,  445,  445,  445,  445,  445,  445,  445,  538,  538,
 /*  1900 */   538,  538,  538,  538,  538,  538,  538,  538,  445,  445,
 /*  1910 */   445,  445,  445,  445,  445,  445,  445,  446,  446,  446,
 /*  1920 */   446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
 /*  1930 */   446,  446,  446,  446,  446,  446,  446,  446,  538,  446,
 /*  1940 */   446,  446,  446,  446,  446,  538,  538,  446,  538,  446,
 /*  1950 */   538,  446,  446,  538,  446,  446,  538,  446,  538,  538,
 /*  1960 */   538,  446,  446,  446,  446,  446,  446,  446,  446,  538,
 /*  1970 */   538,  538,  538,  538,  538,  538,  538,  538,  538,  446,
 /*  1980 */   446,  446,  446,  446,  446,  446,  446,  446,  447,  447,
 /*  1990 */   447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
 /*  2000 */   447,  447,  447,  447,  447,  447,  447,  447,  447,  538,
 /*  2010 */   447,  447,  447,  447,  447,  447,  538,  538,  447,  538,
 /*  2020 */   447,  538,  447,  447,  538,  447,  447,  538,  447,  538,
 /*  2030 */   538,  538,  447,  447,  447,  447,  447,  447,  447,  447,
 /*  2040 */   538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  2050 */   447,  447,  447,  447,  447,  447,  447,  447,  447,  448,
 /*  2060 */   448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
 /*  2070 */   448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
 /*  2080 */   538,  448,  448,  448,  448,  448,  448,  538,  538,  448,
 /*  2090 */   538,  448,  538,  448,  448,  538,  448,  448,  538,  448,
 /*  2100 */   538,  538,  538,  448,  448,  448,  448,  448,  448,  448,
 /*  2110 */   448,  538,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  2120 */   538,  448,  448,  448,  448,  448,  448,  448,  448,  448,
 /*  2130 */   449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
 /*  2140 */   449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
 /*  2150 */   449,  538,  449,  449,  449,  449,  449,  449,  538,  538,
 /*  2160 */   449,  538,  449,  538,  449,  449,  538,  449,  449,  538,
 /*  2170 */   449,  538,  538,  538,  449,  449,  449,  449,  449,  449,
 /*  2180 */   449,  449,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  2190 */   538,  538,  449,  449,  449,  449,  449,  449,  449,  449,
 /*  2200 */   449,  461,  461,  461,  461,  461,  461,  461,  461,  461,
 /*  2210 */   461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
 /*  2220 */   461,  461,  538,  461,   18,   81,  339,  461,  461,  538,
 /*  2230 */   538,  461,  538,  461,  538,  461,  461,  538,  461,  461,
 /*  2240 */   538,  461,  538,  538,  538,  461,  461,  461,  461,  461,
 /*  2250 */   461,  461,  461,  538,  538,  538,  538,  538,  538,  538,
 /*  2260 */   538,  538,  538,  461,  461,  461,  461,  461,  461,  461,
 /*  2270 */   461,  461,  462,  462,  462,  462,  462,  462,  462,  462,
 /*  2280 */   462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
 /*  2290 */   462,  462,  462,  538,  462,   18,   81,  339,  462,  462,
 /*  2300 */   538,  538,  462,  538,  462,  538,  462,  462,  538,  462,
 /*  2310 */   462,  538,  462,  538,  538,  538,  462,  462,  462,  462,
 /*  2320 */   462,  462,  462,  462,  538,  538,  538,  538,  538,  538,
 /*  2330 */   538,  538,  538,  538,  462,  462,  462,  462,  462,  462,
 /*  2340 */   462,  462,  462,  463,  463,  463,  463,  463,  463,  463,
 /*  2350 */   463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
 /*  2360 */   463,  463,  463,  463,  538,  463,   18,   81,  339,  463,
 /*  2370 */   463,  538,  538,  463,  538,  463,  538,  463,  463,  538,
 /*  2380 */   463,  463,  538,  463,  538,  538,  538,  463,  463,  463,
 /*  2390 */   463,  463,  463,  463,  463,  538,  538,  538,  538,  538,
 /*  2400 */   538,  538,  538,  538,  538,  463,  463,  463,  463,  463,
 /*  2410 */   463,  463,  463,  463,  472,  472,  472,  472,  472,   66,
 /*  2420 */    64,   63,   62,   61,   65,   68,   67,   69,   71,   70,
 /*  2430 */    76,   75,   73,   74,   72,  538,  472,   18,   81,  339,
 /*  2440 */   472,  472,  538,  538,  472,  538,  472,  538,  472,  472,
 /*  2450 */   538,  472,  472,  538,  472,  538,  538,  538,  472,  472,
 /*  2460 */   472,  472,  472,  472,  472,  472,  538,  538,  538,  538,
 /*  2470 */   538,  538,  538,  538,  538,  538,  472,  472,  472,  472,
 /*  2480 */   472,  472,  472,  472,  472,  533,  533,  533,  533,  533,
 /*  2490 */   533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
 /*  2500 */   533,  533,  533,  533,  533,  533,  538,  533,  533,  533,
 /*  2510 */   533,  533,  533,  538,  538,  533,  538,  533,  538,  533,
 /*  2520 */   533,  538,  533,  533,  538,  533,  538,  538,  538,  533,
 /*  2530 */   533,  533,  533,  533,  533,  533,  533,  538,  538,  538,
 /*  2540 */   538,  538,  538,  538,  538,  538,  538,  533,  533,  533,
 /*  2550 */   533,  533,  533,  533,  533,  533,  444,  444,  444,  444,
 /*  2560 */   444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
 /*  2570 */   444,  444,  444,  444,  444,  444,  444,  538,  444,  444,
 /*  2580 */   444,  444,  444,  444,  538,  538,  444,  538,  444,  538,
 /*  2590 */   444,  444,  538,  444,  444,  538,  444,  538,  538,  538,
 /*  2600 */   444,  444,  444,  444,  444,  444,  444,  444,  538,  538,
 /*  2610 */   538,  538,  538,  538,  538,  538,  538,  538,  444,  444,
 /*  2620 */   444,  444,  444,  444,  444,  444,  444,  439,  439,  439,
 /*  2630 */   439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
 /*  2640 */   439,  439,  439,  439,  439,  439,  439,  439,  538,  439,
 /*  2650 */   439,  439,  439,  439,  439,  538,  538,  439,  538,  439,
 /*  2660 */   538,  439,  439,  538,  439,  439,  538,  439,  538,  538,
 /*  2670 */   538,  439,  439,  439,  439,  439,  439,  439,  439,  538,
 /*  2680 */   538,  538,  538,  538,  538,  538,  538,  538,  538,  439,
 /*  2690 */   439,  439,  439,  439,  439,  439,  439,  439,  438,  438,
 /*  2700 */   438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
 /*  2710 */   438,  438,  438,  438,  438,  438,  438,  438,  438,  538,
 /*  2720 */   438,  438,  438,  438,  438,  438,  538,  538,  438,  538,
 /*  2730 */   438,  538,  438,  438,  538,  438,  438,  538,  438,  538,
 /*  2740 */   538,  538,  438,  438,  438,  438,  438,  438,  438,  438,
 /*  2750 */   538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  2760 */   438,  438,  438,  438,  438,  438,  438,  438,  438,  534,
 /*  2770 */   534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
 /*  2780 */   534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
 /*  2790 */   538,  534,  534,  534,  534,  534,  534,  538,  538,  534,
 /*  2800 */   538,  534,  538,  534,  534,  538,  534,  534,  538,  534,
 /*  2810 */   538,  538,  538,  534,  534,  534,  534,  534,  534,  534,
 /*  2820 */   534,  538,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  2830 */   538,  534,  534,  534,  534,  534,  534,  534,  534,  534,
 /*  2840 */   431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
 /*  2850 */   431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
 /*  2860 */   431,  538,  431,  431,  431,  431,  431,  431,  538,  538,
 /*  2870 */   431,  538,  431,  538,  431,  431,  538,  431,  431,  538,
 /*  2880 */   431,  538,  538,  538,  431,  431,  431,  431,  431,  431,
 /*  2890 */   431,  431,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  2900 */   538,  538,  431,  431,  431,  431,  431,  431,  431,  431,
 /*  2910 */   431,   78,  424,   59,   60,  424,   66,   64,   63,   62,
 /*  2920 */    61,   65,   68,   67,   69,   71,   70,   76,   75,   73,
 /*  2930 */    74,   72,  538,  424,   18,   81,  339,  424,  424,  417,
 /*  2940 */   538,  417,  538,  424,  538,  424,  424,  538,  424,  424,
 /*  2950 */   538,  424,  538,  538,  538,  424,  424,  424,  424,  424,
 /*  2960 */   424,  424,  424,  538,  538,  538,  417,  538,  538,  538,
 /*  2970 */   417,  538,  417,  424,  424,  424,  424,  424,  424,  424,
 /*  2980 */   424,  424,  440,  440,  440,  440,  440,  440,  440,  440,
 /*  2990 */   440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
 /*  3000 */   440,  440,  440,  538,  440,  440,  338,  440,  440,  440,
 /*  3010 */   418,  538,  418,  538,  440,  538,  440,  440,  538,  440,
 /*  3020 */   440,  538,  440,  538,  538,  538,  440,  440,  440,  440,
 /*  3030 */   440,  440,  440,  440,  538,  538,  538,  418,  538,  538,
 /*  3040 */   538,  418,  538,  418,  440,  440,  440,  440,  440,  440,
 /*  3050 */   440,  440,  440,   78,  423,   59,   60,  423,   66,   64,
 /*  3060 */    63,   62,   61,   65,   68,   67,   69,   71,   70,   76,
 /*  3070 */    75,   73,   74,   72,  538,  423,   18,   81,  339,  423,
 /*  3080 */   423,  538,  538,  538,  538,  423,  538,  423,  423,  538,
 /*  3090 */   423,  423,  538,  423,  538,  538,  538,  423,  423,  423,
 /*  3100 */   423,  423,  423,  423,  423,  538,  538,  538,  538,  538,
 /*  3110 */   538,  538,  538,  538,  538,  423,  423,  423,  423,  423,
 /*  3120 */   423,  423,  423,  423,  478,  429,  478,  429,  429,  538,
 /*  3130 */   429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
 /*  3140 */   429,  429,  429,  429,  429,  429,  538,  538,   19,  429,
 /*  3150 */   429,  234,  353,  232,  231,  230,  352,  351,  350,  226,
 /*  3160 */   538,  538,   51,   10,  481,  538,  241,   83,  538,  538,
 /*  3170 */   538,  538,  538,  538,    2,  429,  429,  478,  478,  478,
 /*  3180 */   478,  478,  478,  478,  478,  478,  478,  480,  430,  480,
 /*  3190 */   430,  430,  538,  430,  430,  430,  430,  430,  430,  430,
 /*  3200 */   430,  430,  430,  430,  430,  430,  430,  430,  430,  181,
 /*  3210 */   538,  430,  430,  430,  538,   50,   49,   48,   47,   46,
 /*  3220 */    45,   44,   43,   42,   41,  538,  538,  140,  538,  538,
 /*  3230 */   538,  538,  538,  538,  538,  538,  538,  139,  430,  430,
 /*  3240 */   480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
 /*  3250 */   479,  431,  479,  431,  431,  256,  431,  431,  431,  431,
 /*  3260 */   431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
 /*  3270 */   431,  431,   87,  140,  431,  431,  431,  538,  538,  538,
 /*  3280 */   538,  538,  538,  139,  538,  289,  538,  538,  538,  538,
 /*  3290 */   140,  538,  538,  538,  538,  538,  267,  538,  272,  538,
 /*  3300 */   139,  431,  431,  479,  479,  479,  479,  479,  479,  479,
 /*  3310 */   479,  479,  479,  381,  270,  381,  140,  266,  265,  264,
 /*  3320 */   138,  381,  538,  538,  538,  538,  139,  538,  243,  538,
 /*  3330 */   205,  257,  140,  381,  381,  538,  222,  269,  538,  381,
 /*  3340 */   381,  381,  139,  381,  381,  381,  140,  262,  381,  140,
 /*  3350 */   381,  381,  381,  381,  381,  538,  139,  381,  538,  139,
 /*  3360 */   253,  381,  381,  381,  381,  381,  381,  381,  381,  382,
 /*  3370 */   538,  382,  538,  538,  251,  538,  538,  382,  140,  381,
 /*  3380 */   381,  381,  381,  381,  381,  381,  381,  381,  139,  382,
 /*  3390 */   382,  538,  140,  538,  538,  382,  382,  382,  538,  382,
 /*  3400 */   382,  382,  139,  538,  382,  538,  382,  382,  382,  382,
 /*  3410 */   382,  538,  538,  382,  538,  538,  538,  382,  382,  382,
 /*  3420 */   382,  382,  382,  382,  382,  383,  538,  383,  538,  538,
 /*  3430 */   538,  538,  538,  383,  538,  382,  382,  382,  382,  382,
 /*  3440 */   382,  382,  382,  382,  538,  383,  383,  538,  538,  538,
 /*  3450 */   538,  383,  383,  383,  538,  383,  383,  383,  538,  538,
 /*  3460 */   383,  538,  383,  383,  383,  383,  383,  538,  538,  383,
 /*  3470 */   538,  538,  538,  383,  383,  383,  383,  383,  383,  383,
 /*  3480 */   383,  386,  538,  386,  538,  538,  538,  538,  538,  386,
 /*  3490 */   538,  383,  383,  383,  383,  383,  383,  383,  383,  383,
 /*  3500 */   538,  386,  386,  538,  538,  538,  538,  386,  386,  386,
 /*  3510 */   538,  386,  386,  386,  538,  538,  386,  538,  386,  386,
 /*  3520 */   386,  386,  386,  538,  538,  386,  538,  538,  538,  386,
 /*  3530 */   386,  386,  386,  386,  386,  386,  386,  385,  538,  385,
 /*  3540 */   538,  538,  538,  538,  538,  385,  538,  386,  386,  386,
 /*  3550 */   386,  386,  386,  386,  386,  386,  538,  385,  385,  538,
 /*  3560 */   538,  538,  538,  385,  385,  385,  538,  385,  385,  385,
 /*  3570 */   538,  538,  385,  538,  385,  385,  385,  385,  385,  538,
 /*  3580 */   538,  385,  538,  538,  538,  385,  385,  385,  385,  385,
 /*  3590 */   385,  385,  385,  387,  538,  387,  538,  538,  538,  538,
 /*  3600 */   538,  387,  538,  385,  385,  385,  385,  385,  385,  385,
 /*  3610 */   385,  385,  538,  387,  387,  538,  538,  538,  538,  387,
 /*  3620 */   387,  387,  538,  387,  387,  387,  538,  538,  387,  538,
 /*  3630 */   387,  387,  387,  387,  387,  538,  538,  387,  538,  538,
 /*  3640 */   538,  387,  387,  387,  387,  387,  387,  387,  387,  388,
 /*  3650 */   538,  388,  538,  538,  538,  538,  538,  388,  538,  387,
 /*  3660 */   387,  387,  387,  387,  387,  387,  387,  387,  538,  388,
 /*  3670 */   388,  538,  538,  538,  538,  388,  388,  388,  538,  388,
 /*  3680 */   388,  388,  538,  538,  388,  538,  388,  388,  388,  388,
 /*  3690 */   388,  538,  538,  388,  538,  538,  538,  388,  388,  388,
 /*  3700 */   388,  388,  388,  388,  388,  389,  538,  389,  538,  538,
 /*  3710 */   538,  538,  538,  389,  538,  388,  388,  388,  388,  388,
 /*  3720 */   388,  388,  388,  388,  538,  389,  389,  538,  538,  538,
 /*  3730 */   538,  389,  389,  389,  538,  389,  389,  389,  538,  538,
 /*  3740 */   389,  538,  389,  389,  389,  389,  389,  538,  538,  389,
 /*  3750 */   538,  538,  538,  389,  389,  389,  389,  389,  389,  389,
 /*  3760 */   389,  391,  538,  391,  538,  538,  538,  538,  538,  391,
 /*  3770 */   538,  389,  389,  389,  389,  389,  389,  389,  389,  389,
 /*  3780 */   538,  391,  391,  538,  538,  538,  538,  391,  391,  391,
 /*  3790 */   538,  391,  391,  391,  538,  538,  391,  538,  391,  391,
 /*  3800 */   391,  391,  391,  538,  538,  391,  538,  538,  538,  391,
 /*  3810 */   391,  391,  391,  391,  391,  391,  391,  392,  538,  392,
 /*  3820 */   538,  538,  538,  538,  538,  392,  538,  391,  391,  391,
 /*  3830 */   391,  391,  391,  391,  391,  391,  538,  392,  392,  538,
 /*  3840 */   538,  538,  538,  392,  392,  392,  538,  392,  392,  392,
 /*  3850 */   538,  538,  392,  538,  392,  392,  392,  392,  392,  538,
 /*  3860 */   538,  392,  538,  538,  538,  392,  392,  392,  392,  392,
 /*  3870 */   392,  392,  392,  393,  538,  393,  538,  538,  538,  538,
 /*  3880 */   538,  393,  538,  392,  392,  392,  392,  392,  392,  392,
 /*  3890 */   392,  392,  538,  393,  393,  538,  538,  538,  538,  393,
 /*  3900 */   393,  393,  538,  393,  393,  393,  538,  538,  393,  538,
 /*  3910 */   393,  393,  393,  393,  393,  538,  538,  393,  538,  538,
 /*  3920 */   538,  393,  393,  393,  393,  393,  393,  393,  393,  394,
 /*  3930 */   538,  394,  538,  538,  538,  538,  538,  394,  538,  393,
 /*  3940 */   393,  393,  393,  393,  393,  393,  393,  393,  538,  394,
 /*  3950 */   394,  538,  538,  538,  538,  394,  394,  394,  538,  394,
 /*  3960 */   394,  394,  538,  538,  394,  538,  394,  394,  394,  394,
 /*  3970 */   394,  538,  538,  394,  538,  538,  538,  394,  394,  394,
 /*  3980 */   394,  394,  394,  394,  394,  395,  538,  395,  538,  538,
 /*  3990 */   538,  538,  538,  395,  538,  394,  394,  394,  394,  394,
 /*  4000 */   394,  394,  394,  394,  538,  395,  395,  538,  538,  538,
 /*  4010 */   538,  395,  395,  395,  538,  395,  395,  395,  538,  538,
 /*  4020 */   395,  538,  395,  395,  395,  395,  395,  538,  538,  395,
 /*  4030 */   538,  538,  538,  395,  395,  395,  395,  395,  395,  395,
 /*  4040 */   395,  396,  538,  396,  538,  538,  538,  538,  538,  396,
 /*  4050 */   538,  395,  395,  395,  395,  395,  395,  395,  395,  395,
 /*  4060 */   538,  396,  396,  538,  538,  538,  538,  396,  396,  396,
 /*  4070 */   538,  396,  396,  396,  538,  538,  396,  538,  396,  396,
 /*  4080 */   396,  396,  396,  538,  538,  396,  538,  538,  538,  396,
 /*  4090 */   396,  396,  396,  396,  396,  396,  396,  397,  538,  397,
 /*  4100 */   538,  538,  538,  538,  538,  397,  538,  396,  396,  396,
 /*  4110 */   396,  396,  396,  396,  396,  396,  538,  397,  397,  538,
 /*  4120 */   538,  538,  538,  397,  397,  397,  538,  397,  397,  397,
 /*  4130 */   538,  538,  397,  538,  397,  397,  397,  397,  397,  538,
 /*  4140 */   538,  397,  538,  538,  538,  397,  397,  397,  397,  397,
 /*  4150 */   397,  397,  397,  398,  538,  398,  538,  538,  538,  538,
 /*  4160 */   538,  398,  538,  397,  397,  397,  397,  397,  397,  397,
 /*  4170 */   397,  397,  538,  398,  398,  538,  538,  538,  538,  398,
 /*  4180 */   398,  398,  538,  398,  398,  398,  538,  538,  398,  538,
 /*  4190 */   398,  398,  398,  398,  398,  538,  538,  398,  538,  538,
 /*  4200 */   538,  398,  398,  398,  398,  398,  398,  398,  398,  399,
 /*  4210 */   538,  399,  538,  538,  538,  538,  538,  399,  538,  398,
 /*  4220 */   398,  398,  398,  398,  398,  398,  398,  398,  538,  399,
 /*  4230 */   399,  538,  538,  538,  538,  399,  399,  399,  538,  399,
 /*  4240 */   399,  399,  538,  538,  399,  538,  399,  399,  399,  399,
 /*  4250 */   399,  538,  538,  399,  538,  538,  538,  399,  399,  399,
 /*  4260 */   399,  399,  399,  399,  399,  400,  538,  400,  538,  538,
 /*  4270 */   538,  538,  538,  400,  538,  399,  399,  399,  399,  399,
 /*  4280 */   399,  399,  399,  399,  538,  400,  400,  538,  538,  538,
 /*  4290 */   538,  400,  400,  400,  538,  400,  400,  400,  538,  538,
 /*  4300 */   400,  538,  400,  400,  400,  400,  400,  538,  538,  400,
 /*  4310 */   538,  538,  538,  400,  400,  400,  400,  400,  400,  400,
 /*  4320 */   400,  401,  538,  401,  538,  538,  538,  538,  538,  401,
 /*  4330 */   538,  400,  400,  400,  400,  400,  400,  400,  400,  400,
 /*  4340 */   538,  401,  401,  538,  538,  538,  538,  401,  401,  401,
 /*  4350 */   538,  401,  401,  401,  538,  538,  401,  538,  401,  401,
 /*  4360 */   401,  401,  401,  538,  538,  401,  538,  538,  538,  401,
 /*  4370 */   401,  401,  401,  401,  401,  401,  401,  402,  538,  402,
 /*  4380 */   538,  538,  538,  538,  538,  402,  538,  401,  401,  401,
 /*  4390 */   401,  401,  401,  401,  401,  401,  538,  402,  402,  538,
 /*  4400 */   538,  538,  538,  402,  402,  402,  538,  402,  402,  402,
 /*  4410 */   538,  538,  402,  538,  402,  402,  402,  402,  402,  538,
 /*  4420 */   538,  402,  538,  538,  538,  402,  402,  402,  402,  402,
 /*  4430 */   402,  402,  402,  403,  538,  403,  538,  538,  538,  538,
 /*  4440 */   538,  403,  538,  402,  402,  402,  402,  402,  402,  402,
 /*  4450 */   402,  402,  538,  403,  403,  538,  538,  538,  538,  403,
 /*  4460 */   403,  403,  538,  403,  403,  403,  538,  538,  403,  538,
 /*  4470 */   403,  403,  403,  403,  403,  538,  538,  403,  538,  538,
 /*  4480 */   538,  403,  403,  403,  403,  403,  403,  403,  403,  404,
 /*  4490 */   538,  404,  538,  538,  538,  538,  538,  404,  538,  403,
 /*  4500 */   403,  403,  403,  403,  403,  403,  403,  403,  538,  404,
 /*  4510 */   404,  538,  538,  538,  538,  404,  404,  404,  538,  404,
 /*  4520 */   404,  404,  538,  538,  404,  538,  404,  404,  404,  404,
 /*  4530 */   404,  538,  538,  404,  538,  538,  538,  404,  404,  404,
 /*  4540 */   404,  404,  404,  404,  404,  501,  538,  501,  538,  538,
 /*  4550 */   538,  538,  538,  501,  538,  404,  404,  404,  404,  404,
 /*  4560 */   404,  404,  404,  404,  538,  501,  501,  538,  538,  538,
 /*  4570 */   538,  501,  501,  501,  538,  501,  501,  501,  538,  538,
 /*  4580 */   501,  538,  501,  501,  501,  501,  501,  538,  538,  501,
 /*  4590 */   538,  538,  538,  501,  501,  501,  501,  501,  501,  501,
 /*  4600 */   501,  504,  538,  504,  538,  538,  538,  538,  538,  504,
 /*  4610 */   538,  501,  501,  501,  501,  501,  501,  501,  501,  501,
 /*  4620 */   538,  504,  504,  538,  538,  538,  538,  504,  504,  504,
 /*  4630 */   538,  504,  504,  504,  538,  538,  504,  538,  504,  504,
 /*  4640 */   504,  504,  504,  538,  538,  504,  538,  538,  538,  504,
 /*  4650 */   504,  504,  504,  504,  504,  504,  504,  510,  538,  510,
 /*  4660 */   538,  538,  538,  538,  538,  510,  538,  504,  504,  504,
 /*  4670 */   504,  504,  504,  504,  504,  504,  538,  510,  510,  538,
 /*  4680 */   538,  538,  538,  510,  510,  510,  538,  510,  510,  510,
 /*  4690 */   538,  538,  510,  538,  510,  510,  510,  510,  510,  538,
 /*  4700 */   538,  510,  538,  538,  538,  510,  510,  510,  510,  510,
 /*  4710 */   510,  510,  510,  526,  538,  526,  538,  538,  538,  538,
 /*  4720 */   538,  526,  538,  510,  510,  510,  510,  510,  510,  510,
 /*  4730 */   510,  510,  538,  526,  526,  538,  538,  538,  538,  526,
 /*  4740 */   526,  526,  538,  526,  526,  526,  538,  538,  526,  538,
 /*  4750 */   526,  526,  526,  526,  526,  538,  538,  526,  538,  538,
 /*  4760 */   538,  526,  526,  526,  526,  526,  526,  526,  526,  529,
 /*  4770 */   538,  529,  538,  538,  538,  538,  538,  529,  538,  526,
 /*  4780 */   526,  526,  526,  526,  526,  526,  526,  526,  538,  529,
 /*  4790 */   529,  538,  538,  538,  538,  529,  529,  529,  538,  529,
 /*  4800 */   529,  529,  538,  538,  529,  538,  529,  529,  529,  529,
 /*  4810 */   529,  538,  538,  529,  538,  538,  538,  529,  529,  529,
 /*  4820 */   529,  529,  529,  529,  529,  535,  538,  535,  538,  538,
 /*  4830 */   538,  538,  538,  535,  538,  529,  529,  529,  529,  529,
 /*  4840 */   529,  529,  529,  529,  538,  535,  535,  538,  538,  538,
 /*  4850 */   538,  535,  535,  535,  538,  535,  535,  535,  538,  538,
 /*  4860 */   535,  538,  535,  535,  535,  535,  535,  538,  538,  535,
 /*  4870 */   538,  538,  538,  535,  535,  535,  535,  535,  535,  535,
 /*  4880 */   535,  507,  538,  507,  538,  538,  538,  538,  538,  507,
 /*  4890 */   538,  535,  535,  535,  535,  535,  535,  535,  535,  535,
 /*  4900 */   538,  507,  507,  538,  538,  538,  538,  507,  507,  507,
 /*  4910 */   538,  507,  507,  507,  538,  538,  507,  538,  507,  507,
 /*  4920 */   507,  507,  507,  538,  538,  507,  538,  538,  538,  507,
 /*  4930 */   507,  507,  507,  507,  507,  507,  507,  390,  538,  390,
 /*  4940 */   538,  538,  538,  538,  538,  390,  538,  507,  507,  507,
 /*  4950 */   507,  507,  507,  507,  507,  507,  538,  390,  390,  538,
 /*  4960 */   538,  538,  538,  390,  390,  390,  538,  390,  390,  390,
 /*  4970 */   538,  538,  390,  538,  390,  390,  390,  390,  390,  538,
 /*  4980 */   538,  390,  538,  538,  538,  390,  390,  390,  390,  390,
 /*  4990 */   390,  390,  390,  506,  538,  187,  538,  538,  538,  538,
 /*  5000 */   538,  506,  538,  390,  390,  390,  390,  390,  390,  390,
 /*  5010 */   390,  390,  538,  506,  506,  538,  538,  538,  538,  506,
 /*  5020 */   506,  506,  538,  506,  506,  506,  538,  538,  506,  538,
 /*  5030 */   506,  506,  506,  506,  506,  538,  538,  506,  538,  538,
 /*  5040 */   538,  506,  506,  506,  506,  506,  506,  506,  506,  538,
 /*  5050 */   538,  538,  538,  421,  538,  538,  421,  538,  538,  506,
 /*  5060 */   506,  506,  506,  506,  506,  506,  506,  506,  421,  421,
 /*  5070 */   538,  538,  538,  538,  421,  421,  421,  538,  421,  421,
 /*  5080 */   538,  538,  538,  538,  421,  538,  421,  421,  538,  421,
 /*  5090 */   421,  356,  421,  538,  538,  538,  421,  421,  421,  421,
 /*  5100 */   421,  421,  421,  421,  538,  538,  538,  538,  538,  538,
 /*  5110 */   538,  538,  538,  538,  421,  421,  421,  421,  421,  421,
 /*  5120 */   421,  421,  421,  356,  314,  538,  356,  538,  356,  356,
 /*  5130 */   356,  538,  538,  310,  538,  538,  166,  538,  538,  538,
 /*  5140 */   538,  538,  224,  538,  356,  538,  538,  538,  538,  173,
 /*  5150 */   313,    2,  538,  538,  309,  308,  307,  203,  159,  158,
 /*  5160 */   157,  156,  155,  306,  305,  538,  538,  205,  261,  138,
 /*  5170 */   538,  538,  538,  222,  269,  301,    9,   22,  538,  205,
 /*  5180 */   538,  297,    7,   12,  538,  222,  269,  538,   35,   14,
 /*  5190 */     6,   91,    5,  314,  538,  538,  538,  538,  260,  294,
 /*  5200 */   538,  538,  310,  538,  538,  166,  538,  538,  538,  538,
 /*  5210 */   538,  152,  538,  538,  538,  538,  538,  538,  173,  313,
 /*  5220 */     2,  538,  538,  309,  308,  307,  203,  159,  158,  157,
 /*  5230 */   156,  155,  306,  305,  538,  538,  205,  261,  138,  538,
 /*  5240 */   538,  538,  222,  269,  301,    9,   22,  538,  205,  538,
 /*  5250 */   297,    7,   12,  314,  222,  269,  538,   35,   14,    6,
 /*  5260 */    91,    5,  310,  538,  538,  166,  538,  259,  538,  538,
 /*  5270 */   538,  151,  538,  538,  538,  538,  538,  538,  173,  313,
 /*  5280 */     2,  538,  538,  309,  308,  307,  203,  159,  158,  157,
 /*  5290 */   156,  155,  306,  305,  538,  538,  205,  538,  538,  538,
 /*  5300 */   538,  538,  222,  269,  301,    9,   22,  538,  538,  538,
 /*  5310 */   297,    7,   12,  538,  538,  538,  538,   35,   14,    6,
 /*  5320 */    91,    5,  314,  538,  538,  538,  538,  538,  538,  538,
 /*  5330 */   538,  310,  538,  538,  166,  538,  538,  538,  538,  538,
 /*  5340 */   150,  538,  538,  538,  538,  538,  538,  173,  313,    2,
 /*  5350 */   538,  538,  309,  308,  307,  203,  159,  158,  157,  156,
 /*  5360 */   155,  306,  305,  538,  538,  205,  538,  538,  538,  538,
 /*  5370 */   538,  222,  269,  301,    9,   22,  538,  538,  538,  297,
 /*  5380 */     7,   12,  314,  538,  538,  538,   35,   14,    6,   91,
 /*  5390 */     5,  310,  538,  538,  166,  538,  538,  538,  538,  538,
 /*  5400 */   149,  538,  538,  538,  538,  538,  538,  173,  313,    2,
 /*  5410 */   538,  538,  309,  308,  307,  203,  159,  158,  157,  156,
 /*  5420 */   155,  306,  305,  538,  538,  205,  538,  538,  538,  538,
 /*  5430 */   538,  222,  269,  301,    9,   22,  538,  538,  538,  297,
 /*  5440 */     7,   12,  538,  538,  538,  538,   35,   14,    6,   91,
 /*  5450 */     5,  314,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  5460 */   310,  538,  538,  166,  538,  538,  538,  538,  538,  148,
 /*  5470 */   538,  538,  538,  538,  538,  538,  173,  313,    2,  538,
 /*  5480 */   538,  309,  308,  307,  203,  159,  158,  157,  156,  155,
 /*  5490 */   306,  305,  538,  538,  205,  538,  538,  538,  538,  538,
 /*  5500 */   222,  269,  301,    9,   22,  538,  538,  538,  297,    7,
 /*  5510 */    12,  314,  538,  538,  538,   35,   14,    6,   91,    5,
 /*  5520 */   310,  538,  538,  166,  538,  538,  538,  538,  538,  146,
 /*  5530 */   538,  538,  538,  538,  538,  538,  173,  313,    2,  538,
 /*  5540 */   538,  309,  308,  307,  203,  159,  158,  157,  156,  155,
 /*  5550 */   306,  305,  538,  538,  205,  538,  538,  538,  538,  538,
 /*  5560 */   222,  269,  301,    9,   22,  538,  538,  538,  297,    7,
 /*  5570 */    12,  538,  538,  538,  538,   35,   14,    6,   91,    5,
 /*  5580 */   314,  538,  538,  538,  538,  538,  538,  538,  538,  310,
 /*  5590 */   538,  538,  166,  538,  538,  538,  538,  538,  239,  538,
 /*  5600 */   538,  538,  538,  538,  538,  173,  313,    2,  538,  538,
 /*  5610 */   309,  308,  307,  203,  159,  158,  157,  156,  155,  306,
 /*  5620 */   305,  538,  538,  205,  538,  538,  538,  538,  538,  222,
 /*  5630 */   269,  301,    9,   22,  538,  538,  538,  297,    7,   12,
 /*  5640 */   177,  538,  538,  538,   35,   14,    6,   91,    5,  310,
 /*  5650 */   538,  538,  166,  538,  538,  538,  538,  538,  538,  538,
 /*  5660 */   538,  538,  538,  538,  538,  176,  312,    2,  538,    1,
 /*  5670 */   309,  308,  307,  203,  159,  158,  157,  156,  155,  306,
 /*  5680 */   305,  538,  538,  205,  538,  538,  538,  538,  538,  222,
 /*  5690 */   269,  301,    9,   22,  538,  538,  538,  297,    7,   12,
 /*  5700 */   538,  538,  538,  538,   35,   14,    6,   91,    5,  178,
 /*  5710 */   538,  538,  538,  538,  538,  538,  538,  538,  310,  538,
 /*  5720 */   538,  166,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  5730 */   538,  538,  538,  538,  179,  311,    2,  168,  538,  309,
 /*  5740 */   308,  307,  203,  159,  158,  157,  156,  155,  306,  305,
 /*  5750 */   538,  538,  205,  357,  538,  538,  538,  538,  222,  269,
 /*  5760 */   301,    9,   22,  538,  538,  538,  297,    7,   12,  538,
 /*  5770 */   538,  538,  538,   35,   14,    6,   91,    5,  538,   82,
 /*  5780 */   538,  538,  370,  538,  538,  357,  538,  538,  357,  538,
 /*  5790 */   357,  357,  357,  538,  370,  370,  538,  538,  538,  538,
 /*  5800 */   370,  370,  370,  538,  370,  370,  357,  538,  538,  538,
 /*  5810 */   538,  538,  370,  370,  538,  370,  538,  538,  370,  538,
 /*  5820 */   538,  538,  370,  370,  370,  370,  370,  370,  370,  370,
 /*  5830 */   538,  538,  538,  538,  538,  538,  538,  384,  538,  538,
 /*  5840 */   370,  370,  370,  370,  370,  370,  370,  370,  370,  384,
 /*  5850 */   384,  538,  538,  538,  538,  384,  384,  384,  538,  384,
 /*  5860 */   384,  538,  538,  538,  538,  538,  538,  384,  384,  384,
 /*  5870 */   384,  538,  538,  384,  538,  538,  538,  384,  384,  384,
 /*  5880 */   384,  384,  384,  384,  384,  538,  538,  538,  538,  538,
 /*  5890 */   538,  538,  407,  538,  538,  384,  384,  384,  384,  384,
 /*  5900 */   384,  384,  384,  384,  407,  407,  538,  538,  538,  538,
 /*  5910 */   407,  407,  407,  538,  407,  407,  538,  538,  538,  538,
 /*  5920 */   538,  538,  407,  407,  407,  407,  538,  538,  407,  538,
 /*  5930 */   538,  538,  407,  407,  407,  407,  407,  407,  407,  407,
 /*  5940 */   538,  538,  538,  538,  538,  538,  538,  408,  538,  538,
 /*  5950 */   407,  407,  407,  407,  407,  407,  407,  407,  407,  408,
 /*  5960 */   408,  538,  538,  538,  538,  408,  408,  408,  538,  408,
 /*  5970 */   408,  538,  538,  538,  538,  538,  538,  408,  408,  408,
 /*  5980 */   408,  538,  538,  408,  538,  538,  538,  408,  408,  408,
 /*  5990 */   408,  408,  408,  408,  408,  538,  538,  538,  538,  538,
 /*  6000 */   538,  538,  405,  538,  538,  408,  408,  408,  408,  408,
 /*  6010 */   408,  408,  408,  408,  405,  405,  538,  538,  538,  538,
 /*  6020 */   405,  405,  405,  538,  405,  405,  538,  538,  538,  538,
 /*  6030 */   538,  538,  405,  405,  145,  405,  538,  538,  405,  538,
 /*  6040 */   538,  538,  405,  405,  405,  405,  405,  405,  405,  405,
 /*  6050 */   538,  538,  538,  538,  538,  538,  538,  406,  538,  538,
 /*  6060 */   405,  405,  405,  405,  405,  405,  405,  405,  405,  406,
 /*  6070 */   406,  538,  538,  538,  538,  406,  406,  406,  538,  406,
 /*  6080 */   406,  538,  538,  538,  538,  538,  538,  406,  406,  406,
 /*  6090 */   406,  538,  538,  406,  538,  538,  538,  406,  406,  406,
 /*  6100 */   406,  406,  406,  406,  406,  538,  538,  538,  538,  538,
 /*  6110 */   538,  538,  369,  538,  538,  406,  406,  406,  406,  406,
 /*  6120 */   406,  406,  406,  406,  369,  369,  538,  538,  538,  538,
 /*  6130 */   369,  369,  369,  538,  225,  369,  538,  538,   32,  538,
 /*  6140 */   538,  538,  369,  369,  538,  369,  538,  538,  369,  538,
 /*  6150 */   538,  538,  369,  369,  369,  369,  369,  369,  369,  369,
 /*  6160 */   538,  538,  538,  538,  538,  538,  538,   54,  538,  538,
 /*  6170 */   369,  369,  369,  369,  369,  369,  369,  369,  369,   57,
 /*  6180 */    56,  538,  538,  538,  538,   55,   79,   31,  538,  165,
 /*  6190 */   144,  538,  538,  538,  538,  538,  538,  180,   93,  171,
 /*  6200 */   135,  538,  538,  134,  538,  538,  538,  335,  334,  331,
 /*  6210 */   328,  325,   92,   40,   39,  538,  538,  538,  538,  538,
 /*  6220 */   538,  538,   54,  538,  538,  302,  298,  296,  293,  291,
 /*  6230 */   290,   21,  322,  288,   57,   56,  538,  538,  538,  538,
 /*  6240 */    55,   79,   31,  538,  165,  144,  538,  538,  538,  538,
 /*  6250 */   538,  538,  180,   93,  170,  135,  538,  538,  134,  538,
 /*  6260 */   538,  538,  335,  334,  331,  328,  325,   92,   40,   39,
 /*  6270 */   538,  538,  538,  538,  538,  538,  538,  371,  538,  538,
 /*  6280 */   302,  298,  296,  293,  291,  290,   21,  322,  288,  371,
 /*  6290 */   371,  538,  538,  538,  538,  371,  371,  371,  538,  371,
 /*  6300 */   371,  538,  538,  538,  538,  538,  538,  371,  371,  538,
 /*  6310 */   371,  538,  538,  371,  538,  538,  538,  371,  371,  371,
 /*  6320 */   371,  371,  371,  371,  371,  538,  538,  538,  538,  538,
 /*  6330 */   538,  538,  500,  538,  538,  371,  371,  371,  371,  371,
 /*  6340 */   371,  371,  371,  371,  500,  500,  538,  538,  538,  538,
 /*  6350 */   500,  500,  500,  538,  500,  500,  538,  538,  538,  538,
 /*  6360 */   538,  538,  500,  500,  538,  500,  538,  538,  500,  538,
 /*  6370 */   538,  538,  500,  500,  500,  500,  500,  500,  500,  500,
 /*  6380 */   538,  538,  538,  538,  538,  538,  538,  505,  538,  538,
 /*  6390 */   500,  500,  500,  500,  500,  500,  500,  500,  500,  505,
 /*  6400 */   505,  538,  538,  538,  538,  505,  505,  505,  538,  505,
 /*  6410 */   505,  538,  538,  538,  538,  538,  538,  505,  505,  538,
 /*  6420 */   505,  538,  538,  505,  538,  538,  538,  505,  505,  505,
 /*  6430 */   505,  505,  505,  505,  505,  538,  538,  538,  538,  538,
 /*  6440 */   538,  538,  503,  538,  538,  300,  505,  505,  505,  505,
 /*  6450 */   505,  505,  505,  505,  503,  503,  538,  538,  538,  538,
 /*  6460 */   503,  503,  503,  538,  503,  503,  538,  538,  538,  538,
 /*  6470 */   538,  538,  503,  503,  538,  503,  538,  538,  503,  538,
 /*  6480 */   538,  538,  503,  503,  503,  503,  503,  503,  503,  503,
 /*  6490 */   538,  538,  538,  538,  538,  538,  538,  509,  538,  538,
 /*  6500 */   503,  503,  503,  503,  503,  503,  503,  503,  503,  509,
 /*  6510 */   509,  538,  538,  538,  538,  509,  509,  509,  538,  509,
 /*  6520 */   509,  538,  538,  538,  538,  538,  538,  509,  509,  538,
 /*  6530 */   509,  538,  538,  509,  538,  538,  538,  509,  509,  509,
 /*  6540 */   509,  509,  509,  509,  509,  538,  538,  538,  538,  538,
 /*  6550 */   538,  538,  525,  538,  538,  509,  509,  509,  509,  509,
 /*  6560 */   509,  509,  509,  509,  525,  525,  538,  538,  538,  538,
 /*  6570 */   525,  525,  525,  538,  525,  525,  538,  538,  538,  538,
 /*  6580 */   538,  538,  525,  525,  538,  525,  538,  538,  525,  538,
 /*  6590 */   538,  538,  525,  525,  525,  525,  525,  525,  525,  525,
 /*  6600 */   538,  538,  538,  538,  538,  538,  538,  528,  538,  538,
 /*  6610 */   525,  525,  525,  525,  525,  525,  525,  525,  525,  528,
 /*  6620 */   528,  538,  538,  538,  538,  528,  528,  528,  538,  528,
 /*  6630 */   528,  538,  538,  538,  538,  538,  538,  528,  528,  538,
 /*  6640 */   528,  538,  538,  528,  538,  538,  538,  528,  528,  528,
 /*  6650 */   528,  528,  528,  528,  528,  538,  538,  538,  538,  538,
 /*  6660 */   538,  538,  377,  538,  538,  528,  528,  528,  528,  528,
 /*  6670 */   528,  528,  528,  528,  377,  377,  538,  538,  538,  538,
 /*  6680 */   377,  377,  377,  538,  377,  377,  538,  538,  538,  538,
 /*  6690 */   538,  538,  377,  377,  538,  377,  538,  538,  377,  538,
 /*  6700 */   538,  538,  377,  377,  377,  377,  377,  377,  377,  377,
 /*  6710 */   538,  538,  538,  538,  538,  538,  538,   54,  538,  538,
 /*  6720 */   377,  377,  377,  377,  377,  377,  377,  377,  377,   57,
 /*  6730 */    56,  538,  538,  538,  538,   55,   79,   31,  538,  165,
 /*  6740 */   144,  538,  538,  538,  538,  538,  538,  180,   93,  538,
 /*  6750 */   135,  538,  538,  134,  538,  538,  538,  335,  334,  331,
 /*  6760 */   328,  325,   92,   40,   39,  538,  538,  538,  538,  538,
 /*  6770 */   538,  538,  538,  538,  538,  302,  298,  296,  293,  291,
 /*  6780 */   290,   21,  322,  288,   80,  429,  429,  429,  429,  538,
 /*  6790 */   429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
 /*  6800 */   429,  429,  429,  429,  429,  429,  538,  538,   19,  429,
 /*  6810 */   429,  538,  538,  440,  538,  440,  440,  429,  440,  440,
 /*  6820 */   440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
 /*  6830 */   440,  440,  440,  440,  538,  538,  440,  343,  440,  160,
 /*  6840 */   538,  538,   78,  483,   59,   60,  538,   66,   64,   63,
 /*  6850 */    62,   61,   65,   68,   67,   69,   71,   70,   76,   75,
 /*  6860 */    73,   74,   72,  440,  440,   18,   81,  339,  483,  538,
 /*  6870 */    78,  489,   59,   60,  483,   66,   64,   63,   62,   61,
 /*  6880 */    65,   68,   67,   69,   71,   70,   76,   75,   73,   74,
 /*  6890 */    72,  538,  538,   18,   81,  339,  489,  538,   78,  490,
 /*  6900 */    59,   60,  489,   66,   64,   63,   62,   61,   65,   68,
 /*  6910 */    67,   69,   71,   70,   76,   75,   73,   74,   72,  538,
 /*  6920 */   538,   18,   81,  339,  490,  538,   78,  491,   59,   60,
 /*  6930 */   490,   66,   64,   63,   62,   61,   65,   68,   67,   69,
 /*  6940 */    71,   70,   76,   75,   73,   74,   72,  538,  538,   18,
 /*  6950 */    81,  339,  491,  538,   78,  492,   59,   60,  491,   66,
 /*  6960 */    64,   63,   62,   61,   65,   68,   67,   69,   71,   70,
 /*  6970 */    76,   75,   73,   74,   72,  538,  538,   18,   81,  339,
 /*  6980 */   492,  538,   78,  493,   59,   60,  492,   66,   64,   63,
 /*  6990 */    62,   61,   65,   68,   67,   69,   71,   70,   76,   75,
 /*  7000 */    73,   74,   72,  538,  538,   18,   81,  339,  493,  538,
 /*  7010 */    78,  494,   59,   60,  493,   66,   64,   63,   62,   61,
 /*  7020 */    65,   68,   67,   69,   71,   70,   76,   75,   73,   74,
 /*  7030 */    72,  538,  538,   18,   81,  339,  494,  538,   78,  495,
 /*  7040 */    59,   60,  494,   66,   64,   63,   62,   61,   65,   68,
 /*  7050 */    67,   69,   71,   70,   76,   75,   73,   74,   72,  538,
 /*  7060 */   538,   18,   81,  339,  495,  538,   78,  496,   59,   60,
 /*  7070 */   495,   66,   64,   63,   62,   61,   65,   68,   67,   69,
 /*  7080 */    71,   70,   76,   75,   73,   74,   72,  538,  538,   18,
 /*  7090 */    81,  339,  496,  538,   78,  497,   59,   60,  496,   66,
 /*  7100 */    64,   63,   62,   61,   65,   68,   67,   69,   71,   70,
 /*  7110 */    76,   75,   73,   74,   72,  538,  538,   18,   81,  339,
 /*  7120 */   497,  538,   78,  498,   59,   60,  497,   66,   64,   63,
 /*  7130 */    62,   61,   65,   68,   67,   69,   71,   70,   76,   75,
 /*  7140 */    73,   74,   72,  538,  538,   18,   81,  339,  498,  538,
 /*  7150 */    78,  485,   59,   60,  498,   66,   64,   63,   62,   61,
 /*  7160 */    65,   68,   67,   69,   71,   70,   76,   75,   73,   74,
 /*  7170 */    72,  538,  538,   18,   81,  339,  485,  538,   78,  487,
 /*  7180 */    59,   60,  485,   66,   64,   63,   62,   61,   65,   68,
 /*  7190 */    67,   69,   71,   70,   76,   75,   73,   74,   72,  538,
 /*  7200 */   538,   18,   81,  339,  487,  538,   78,  432,   59,   60,
 /*  7210 */   487,   66,   64,   63,   62,   61,   65,   68,   67,   69,
 /*  7220 */    71,   70,   76,   75,   73,   74,   72,  538,  538,   18,
 /*  7230 */    81,  339,  538,  538,   78,  434,   59,   60,  432,   66,
 /*  7240 */    64,   63,   62,   61,   65,   68,   67,   69,   71,   70,
 /*  7250 */    76,   75,   73,   74,   72,  538,  538,   18,   81,  339,
 /*  7260 */   538,  538,   78,  412,   59,   60,  434,   66,   64,   63,
 /*  7270 */    62,   61,   65,   68,   67,   69,   71,   70,   76,   75,
 /*  7280 */    73,   74,   72,  538,  538,   18,   81,  339,  538,  538,
 /*  7290 */    78,  538,   59,   60,  412,   66,   64,   63,   62,   61,
 /*  7300 */    65,   68,   67,   69,   71,   70,   76,   75,   73,   74,
 /*  7310 */    72,  538,  538,   18,   52,  304,  538,  538,  538,   78,
 /*  7320 */   538,   59,   60,  538,   66,   64,   63,   62,   61,   65,
 /*  7330 */    68,   67,   69,   71,   70,   76,   75,   73,   74,   72,
 /*  7340 */   246,  245,   18,   81,  339,  538,  538,   78,  538,   59,
 /*  7350 */    60,  132,   66,   64,   63,   62,   61,   65,   68,   67,
 /*  7360 */    69,   71,   70,   76,   75,   73,   74,   72,  538,  538,
 /*  7370 */    18,   81,  339,  538,  538,  538,   78,   77,   59,   60,
 /*  7380 */   538,   66,   64,   63,   62,   61,   65,   68,   67,   69,
 /*  7390 */    71,   70,   76,   75,   73,   74,   72,  538,  538,   18,
 /*  7400 */    81,  339,  538,  538,   78,  538,   59,   60,  118,   66,
 /*  7410 */    64,   63,   62,   61,   65,   68,   67,   69,   71,   70,
 /*  7420 */    76,   75,   73,   74,   72,  538,  538,   18,   81,  339,
 /*  7430 */   538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  7440 */   538,  538,  104,  538,  538,  538,  538,   78,  538,   59,
 /*  7450 */    60,  538,   66,   64,   63,   62,   61,   65,   68,   67,
 /*  7460 */    69,   71,   70,   76,   75,   73,   74,   72,  538,  538,
 /*  7470 */    18,   81,  339,  538,  538,  538,  538,  538,  538,  538,
 /*  7480 */   538,  538,  538,  538,  538,  142,  538,  538,  538,  538,
 /*  7490 */    78,  538,   59,   60,  538,   66,   64,   63,   62,   61,
 /*  7500 */    65,   68,   67,   69,   71,   70,   76,   75,   73,   74,
 /*  7510 */    72,  538,  538,   18,   81,  339,  538,  538,   78,  538,
 /*  7520 */    59,   60,  188,   66,   64,   63,   62,   61,   65,   68,
 /*  7530 */    67,   69,   71,   70,   76,   75,   73,   74,   72,  538,
 /*  7540 */   538,   18,   81,  339,  538,  538,   78,  538,   59,   60,
 /*  7550 */   186,   66,   64,   63,   62,   61,   65,   68,   67,   69,
 /*  7560 */    71,   70,   76,   75,   73,   74,   72,  538,  538,   18,
 /*  7570 */    81,  339,  538,  538,   78,  538,   59,   60,  185,   66,
 /*  7580 */    64,   63,   62,   61,   65,   68,   67,   69,   71,   70,
 /*  7590 */    76,   75,   73,   74,   72,  538,  538,   18,   81,  339,
 /*  7600 */   220,  538,   78,  538,   59,   60,  538,   66,   64,   63,
 /*  7610 */    62,   61,   65,   68,   67,   69,   71,   70,   76,   75,
 /*  7620 */    73,   74,   72,  511,  538,   18,   52,  304,  538,  538,
 /*  7630 */   538,  538,  538,  538,  538,  511,  511,  538,  538,  538,
 /*  7640 */   538,  511,  511,  511,  358,  511,  511,  538,  538,  538,
 /*  7650 */   538,  538,  538,  538,  511,  538,  511,  538,  538,  511,
 /*  7660 */   538,  538,  538,  511,  511,  511,  511,  511,  511,  511,
 /*  7670 */   511,  538,   54,  538,  538,  538,  358,  538,  538,  358,
 /*  7680 */   538,  358,  358,  358,   57,   56,  538,  538,  511,  538,
 /*  7690 */    55,   79,   31,  359,  518,  144,  538,  358,  538,  538,
 /*  7700 */   538,  538,  538,   93,  538,  135,  538,  538,  134,  538,
 /*  7710 */   538,  538,  335,  334,  331,  328,  325,   92,   40,   39,
 /*  7720 */   538,   54,  538,  538,  538,  359,  538,  538,  359,  538,
 /*  7730 */   359,  359,  359,   57,   56,  538,  538,  322,  538,   55,
 /*  7740 */    79,   31,  360,  538,  144,  538,  359,  538,  538,  538,
 /*  7750 */   538,  538,   93,  538,  135,  538,  538,  134,  538,  538,
 /*  7760 */   538,  335,  334,  331,  328,  325,   92,   40,   39,  538,
 /*  7770 */   524,  538,  538,  538,  360,  538,  538,  360,  538,  360,
 /*  7780 */   360,  360,  524,  524,  538,  538,  322,  538,  524,  524,
 /*  7790 */   524,  361,  538,  524,  538,  360,  538,  538,  524,  538,
 /*  7800 */   538,  538,  538,  524,  538,  538,  524,  538,  538,  538,
 /*  7810 */   524,  524,  524,  524,  524,  538,  524,  524,  538,   54,
 /*  7820 */   538,  538,  538,  361,  538,  538,  361,  538,  361,  361,
 /*  7830 */   361,   57,   56,  538,  538,  524,  538,   55,   79,   31,
 /*  7840 */   362,  538,  144,  538,  361,  538,  538,  521,  538,  538,
 /*  7850 */   538,  538,  135,  538,  538,  134,  538,  538,  538,  335,
 /*  7860 */   334,  331,  328,  325,  538,   40,   39,  538,   54,  538,
 /*  7870 */   538,  538,  362,  538,  538,  362,  538,  362,  362,  362,
 /*  7880 */    57,   56,  538,  538,  322,  538,   55,   79,   31,  538,
 /*  7890 */   538,  204,  538,  362,  538,  538,  436,  538,  538,  538,
 /*  7900 */   538,  135,  538,  538,  134,   54,  279,  538,  335,  334,
 /*  7910 */   331,  328,  325,  538,  538,  538,  538,   57,   56,  538,
 /*  7920 */   538,  538,  538,   55,   79,   31,  538,  538,  144,  538,
 /*  7930 */   538,  538,  538,  322,  538,  538,  538,  538,  135,  538,
 /*  7940 */   538,  134,   54,  538,  538,  335,  334,  331,  328,  325,
 /*  7950 */   538,   40,   39,  538,   57,   56,  538,  538,  538,  538,
 /*  7960 */    55,   79,   31,  538,  538,  133,  538,  538,  538,  538,
 /*  7970 */   322,  538,  538,  538,  538,  135,  442,  538,  134,   54,
 /*  7980 */   538,  538,  335,  334,  331,  328,  325,  538,  538,  538,
 /*  7990 */   538,   57,   56,  538,  538,  538,  538,   55,   79,   31,
 /*  8000 */   538,  538,  204,  538,  538,  538,  538,  322,  538,  538,
 /*  8010 */   538,  538,  135,  538,  538,  134,   54,  279,  538,  335,
 /*  8020 */   334,  331,  328,  325,  538,  538,  538,  538,   57,   56,
 /*  8030 */   538,  538,  538,  538,   55,   79,   31,  538,  425,  133,
 /*  8040 */   538,  538,  538,  538,  322,  538,  538,  538,  538,  135,
 /*  8050 */   538,  538,  134,  523,  538,  538,  335,  334,  331,  328,
 /*  8060 */   325,  538,  538,  538,  538,  523,  523,  538,  538,  538,
 /*  8070 */   538,  523,  523,  523,  538,  538,  523,  538,  538,  538,
 /*  8080 */   538,  322,  538,  538,  538,  538,  523,  538,  538,  523,
 /*  8090 */    54,  538,  538,  523,  523,  523,  523,  523,  538,  538,
 /*  8100 */   538,  538,   57,   56,  538,  538,  538,  538,   55,   79,
 /*  8110 */    31,  538,  538,  133,  538,  538,  538,  538,  523,  538,
 /*  8120 */   538,  538,  538,  135,  538,  538,  134,   54,  538,  538,
 /*  8130 */   335,  334,  331,  328,  325,  538,  538,  538,  538,   57,
 /*  8140 */    56,  538,  538,  538,  538,   55,   79,   31,  538,  538,
 /*  8150 */   144,  538,  538,  538,  538,  322,  267,  538,  538,  538,
 /*  8160 */   135,  538,  538,  134,  538,  538,  538,  335,  334,  331,
 /*  8170 */   328,  325,  538,  538,  538,  538,  538,  266,  265,  264,
 /*  8180 */   138,  363,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  8190 */   205,  364,  322,  538,  538,  538,  222,  269,  538,  538,
 /*  8200 */   538,  538,  538,  538,  538,  538,  538,  263,  295,  538,
 /*  8210 */   538,  538,  538,  363,  373,  538,  363,  538,  363,  363,
 /*  8220 */   363,  538,  538,  364,  372,  538,  364,  538,  364,  364,
 /*  8230 */   364,  538,  538,  538,  363,  538,  538,  538,  538,  538,
 /*  8240 */   538,  538,  538,  538,  364,  538,  373,  380,  538,  373,
 /*  8250 */   538,  373,  373,  373,  538,  538,  372,  354,  538,  372,
 /*  8260 */   538,  372,  372,  372,  538,  538,  538,  373,  538,  538,
 /*  8270 */   538,  538,  538,  538,  538,  538,  538,  372,  538,  380,
 /*  8280 */   355,  538,  380,  538,  380,  380,  380,  538,  538,   97,
 /*  8290 */   538,  538,  346,  538,  285,  180,   89,  538,  538,  538,
 /*  8300 */   380,  538,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  8310 */    88,  538,  355,  538,  538,  355,  538,  355,  355,  355,
 /*  8320 */   538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
 /*  8330 */   538,  538,  538,  355,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*    10 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*    20 */    24,   30,   26,   27,   28,   29,   30,   31,   30,  108,
 /*    30 */    34,    3,   36,    5,   38,   39,   31,   41,   42,  118,
 /*    40 */    44,   36,  121,  122,   48,   49,   50,   51,   52,   53,
 /*    50 */    54,   55,   29,   30,   29,   30,   33,   30,   33,  129,
 /*    60 */   130,  131,   66,   67,   68,   69,   70,   71,   72,   73,
 /*    70 */    74,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*    80 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*    90 */    23,   24,   30,   26,   27,   28,   29,   30,   31,   31,
 /*   100 */   108,   34,    3,   36,    5,   38,   39,   31,   41,   42,
 /*   110 */   118,   44,   36,  121,  122,   48,   49,   50,   51,   52,
 /*   120 */    53,   54,   55,   29,   30,   30,   35,   33,   31,   30,
 /*   130 */    39,   40,    5,   66,   67,   68,   69,   70,   71,   72,
 /*   140 */    73,   74,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   150 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*   160 */    22,   23,   24,   36,   26,   27,   28,   29,   30,   31,
 /*   170 */     5,  108,   34,    3,   36,    5,   38,   39,   31,   41,
 /*   180 */    42,  118,   44,   27,  121,  122,   48,   49,   50,   51,
 /*   190 */    52,   53,   54,   55,    3,   36,    5,    5,   35,   34,
 /*   200 */    30,   36,   39,   40,   66,   67,   68,   69,   70,   71,
 /*   210 */    72,   73,   74,    4,    5,    6,    7,    8,    9,   10,
 /*   220 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*   230 */    21,   22,   23,   24,   42,   26,   27,   28,   29,   30,
 /*   240 */    31,    5,  108,   34,  108,   36,   92,   38,   39,    5,
 /*   250 */    41,   42,  118,   44,  118,  121,  122,   48,   49,   50,
 /*   260 */    51,   52,   53,   54,   55,   35,   30,   28,    5,   39,
 /*   270 */    40,  117,   36,  119,   30,   66,   67,   68,   69,   70,
 /*   280 */    71,   72,   73,   74,    4,    5,    6,    7,    8,    9,
 /*   290 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   300 */    20,   21,   22,   23,   24,   42,   26,   27,   28,   29,
 /*   310 */    30,   31,    5,  108,   34,    5,   36,    5,   38,   39,
 /*   320 */     5,   41,   42,  118,   44,   41,  121,  122,   48,   49,
 /*   330 */    50,   51,   52,   53,   54,   55,   35,   30,   41,    5,
 /*   340 */    39,   40,   30,   36,   34,   30,   66,   67,   68,   69,
 /*   350 */    70,   71,   72,   73,   74,    4,    5,    6,    7,    8,
 /*   360 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   370 */    19,   20,   21,   22,   23,   24,   42,   26,   27,   28,
 /*   380 */    29,   30,   31,    5,  108,   34,    3,   36,    5,   38,
 /*   390 */    39,    5,   41,   42,  118,   44,    3,  121,    5,   48,
 /*   400 */    49,   50,   51,   52,   53,   54,   55,   35,   30,   42,
 /*   410 */     5,   39,   40,  117,   36,  119,   30,   66,   67,   68,
 /*   420 */    69,   70,   71,   72,   73,   74,    4,    5,    6,    7,
 /*   430 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   440 */    18,   19,   20,   21,   22,   23,   24,   42,   26,   27,
 /*   450 */    28,   29,   30,   31,   42,    5,   34,   31,   36,    5,
 /*   460 */    38,   39,    5,   41,   42,   96,   44,   98,   28,  108,
 /*   470 */    48,   49,   50,   51,   52,   53,   54,   55,   35,  118,
 /*   480 */    77,   78,   39,   40,   30,  124,   36,   30,   66,   67,
 /*   490 */    68,   69,   70,   71,   72,   73,   74,    4,    5,    6,
 /*   500 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   510 */    17,   18,   19,   20,   21,   22,   23,   24,    5,   26,
 /*   520 */    27,   28,   29,   30,   31,    5,    5,   34,    5,   36,
 /*   530 */     5,   38,   39,    5,   41,   42,   97,   44,   99,   42,
 /*   540 */   108,   48,   49,   50,   51,   52,   53,   54,   55,   36,
 /*   550 */   118,   30,   46,   30,   27,   30,   36,   27,   30,   66,
 /*   560 */    67,   68,   69,   70,   71,   72,   73,   74,    4,    5,
 /*   570 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   580 */    16,   17,   18,   19,   20,   21,   22,   23,   24,    5,
 /*   590 */    26,   27,   28,   29,   30,   31,    5,    5,   34,    5,
 /*   600 */    36,    5,   38,   39,   36,   41,   42,   27,   44,   46,
 /*   610 */    27,  108,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   620 */    36,  118,   36,   46,   30,   36,   30,   36,   36,   27,
 /*   630 */    66,   67,   68,   69,   70,   71,   72,   73,   74,    4,
 /*   640 */     5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   650 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*   660 */     5,   26,   27,   28,   29,   30,   31,    5,  108,   34,
 /*   670 */   108,   36,   46,   38,   39,   36,   41,   42,  118,   44,
 /*   680 */   118,   27,  108,   48,   49,   50,   51,   52,   53,   54,
 /*   690 */    55,   36,  118,   36,   42,   36,   36,   36,   36,   36,
 /*   700 */    36,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*   710 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   720 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   730 */    24,   30,   26,   27,   28,   29,   30,   31,   30,  108,
 /*   740 */    34,  108,   36,   30,   38,   39,   27,   41,   42,  118,
 /*   750 */    44,  118,  108,  108,   48,   49,   50,   51,   52,   53,
 /*   760 */    54,   55,  118,  118,   30,   30,   30,   30,   30,   30,
 /*   770 */    30,   27,   66,   67,   68,   69,   70,   71,   72,   73,
 /*   780 */    74,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*   790 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*   800 */    23,   24,   31,   26,   27,   28,   29,   30,   31,   31,
 /*   810 */   108,   34,  108,   36,   30,   38,   39,   27,   41,   42,
 /*   820 */   118,   44,  118,  108,  108,   48,   49,   50,   51,   52,
 /*   830 */    53,   54,   55,  118,  118,   27,   27,   27,   27,   36,
 /*   840 */    27,   27,   30,   66,   67,   68,   69,   70,   71,   72,
 /*   850 */    73,   74,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   860 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*   870 */    22,   23,   24,   30,   26,   27,   28,   29,   30,   31,
 /*   880 */    31,  108,   34,  108,   36,   30,   38,   39,   36,   41,
 /*   890 */    42,  118,   44,  118,  108,  108,   48,   49,   50,   51,
 /*   900 */    52,   53,   54,   55,  118,  118,   30,   38,   31,   31,
 /*   910 */    27,   36,   30,   88,   66,   67,   68,   69,   70,   71,
 /*   920 */    72,   73,   74,    4,    5,    6,    7,    8,    9,   10,
 /*   930 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*   940 */    21,   22,   23,   24,   31,   26,   27,   28,   29,   30,
 /*   950 */    31,  116,  108,   34,  108,   36,  103,   38,   39,   41,
 /*   960 */    41,   42,  118,   44,  118,  108,  108,   48,   49,   50,
 /*   970 */    51,   52,   53,   54,   55,  118,  118,   40,   31,  123,
 /*   980 */    96,   96,  103,   96,   96,   66,   67,   68,   69,   70,
 /*   990 */    71,   72,   73,   74,    4,    5,    6,    7,    8,    9,
 /*  1000 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  1010 */    20,   21,   22,   23,   24,   31,   26,   27,   28,   29,
 /*  1020 */    30,   31,   96,  108,   34,  108,   36,   96,   38,   39,
 /*  1030 */    89,   41,   42,  118,   44,  118,  108,  108,   48,   49,
 /*  1040 */    50,   51,   52,   53,   54,   55,  118,  118,  144,  144,
 /*  1050 */   144,  144,  144,  144,  144,  144,   66,   67,   68,   69,
 /*  1060 */    70,   71,   72,   73,   74,    4,    5,    6,    7,    8,
 /*  1070 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  1080 */    19,   20,   21,   22,   23,   24,  144,   26,   27,   28,
 /*  1090 */    29,   30,   31,  144,  108,   34,  108,   36,  144,   38,
 /*  1100 */    39,  144,   41,   42,  118,   44,  118,  108,  108,   48,
 /*  1110 */    49,   50,   51,   52,   53,   54,   55,  118,  118,  144,
 /*  1120 */   144,  144,  144,  144,  144,  144,  144,   66,   67,   68,
 /*  1130 */    69,   70,   71,   72,   73,   74,    4,    5,    6,    7,
 /*  1140 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  1150 */    18,   19,   20,   21,   22,   23,   24,  144,   26,   27,
 /*  1160 */    28,   29,   30,   31,  144,  108,   34,  108,   36,  144,
 /*  1170 */    38,   39,  144,   41,   42,  118,   44,  118,  108,  108,
 /*  1180 */    48,   49,   50,   51,   52,   53,   54,   55,  118,  118,
 /*  1190 */   144,  144,  144,  144,  144,  144,  144,  144,   66,   67,
 /*  1200 */    68,   69,   70,   71,   72,   73,   74,    4,    5,    6,
 /*  1210 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  1220 */    17,   18,   19,   20,   21,   22,   23,   24,  144,   26,
 /*  1230 */    27,   28,   29,   30,   31,  144,  108,   34,  108,   36,
 /*  1240 */   144,   38,   39,  144,   41,   42,  118,   44,  118,  108,
 /*  1250 */   108,   48,   49,   50,   51,   52,   53,   54,   55,  118,
 /*  1260 */   118,  144,  144,  144,  144,  144,  144,  144,  144,   66,
 /*  1270 */    67,   68,   69,   70,   71,   72,   73,   74,    4,    5,
 /*  1280 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  1290 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  144,
 /*  1300 */    26,   27,   28,   29,   30,   31,  144,  108,   34,  108,
 /*  1310 */    36,  144,   38,   39,  144,   41,   42,  118,   44,  118,
 /*  1320 */   108,  108,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  1330 */   118,  118,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  1340 */    66,   67,   68,   69,   70,   71,   72,   73,   74,    4,
 /*  1350 */     5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*  1360 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  1370 */   144,   26,   27,   28,   29,   30,   31,  144,  108,   34,
 /*  1380 */   108,   36,  144,   38,   39,  144,   41,   42,  118,   44,
 /*  1390 */   118,  108,  108,   48,   49,   50,   51,   52,   53,   54,
 /*  1400 */    55,  118,  118,  144,  144,  144,  144,  144,  144,  144,
 /*  1410 */   144,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  1420 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  1430 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  1440 */    24,  144,   26,   27,   28,   29,   30,   31,  144,  108,
 /*  1450 */    34,  108,   36,  144,   38,   39,  144,   41,   42,  118,
 /*  1460 */    44,  118,  144,  144,   48,   49,   50,   51,   52,   53,
 /*  1470 */    54,   55,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  1480 */   144,  144,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  1490 */    74,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*  1500 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  1510 */    23,   24,  144,   26,   27,   28,   29,   30,   31,  144,
 /*  1520 */   144,   34,  144,   36,  144,   38,   39,  144,   41,   42,
 /*  1530 */   144,   44,  144,  144,  144,   48,   49,   50,   51,   52,
 /*  1540 */    53,   54,   55,  144,  144,  144,  144,  144,  144,  144,
 /*  1550 */   144,  144,  144,   66,   67,   68,   69,   70,   71,   72,
 /*  1560 */    73,   74,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  1570 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  1580 */    22,   23,   24,  144,   26,   27,   28,   29,   30,   31,
 /*  1590 */   144,  144,   34,  144,   36,  144,   38,   39,  144,   41,
 /*  1600 */    42,  144,   44,  144,  144,  144,   48,   49,   50,   51,
 /*  1610 */    52,   53,   54,   55,  144,  144,  144,  144,  144,  144,
 /*  1620 */   144,  144,  144,  144,   66,   67,   68,   69,   70,   71,
 /*  1630 */    72,   73,   74,    4,    5,    6,    7,    8,    9,   10,
 /*  1640 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  1650 */    21,   22,   23,   24,  144,   26,   27,   28,   29,   30,
 /*  1660 */    31,  144,  144,   34,  144,   36,  144,   38,   39,  144,
 /*  1670 */    41,   42,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  1680 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  1690 */   144,  144,  144,  144,  144,   66,   67,   68,   69,   70,
 /*  1700 */    71,   72,   73,   74,    4,    5,    6,    7,    8,    9,
 /*  1710 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  1720 */    20,   21,   22,   23,   24,  144,   26,   27,   28,   29,
 /*  1730 */    30,   31,  144,  144,   34,  144,   36,  144,   38,   39,
 /*  1740 */   144,   41,   42,  144,   44,  144,  144,  144,   48,   49,
 /*  1750 */    50,   51,   52,   53,   54,   55,  144,  144,  144,  144,
 /*  1760 */   144,  144,  144,  144,  144,  144,   66,   67,   68,   69,
 /*  1770 */    70,   71,   72,   73,   74,    4,    5,    6,    7,    8,
 /*  1780 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  1790 */    19,   20,   21,   22,   23,   24,  144,   26,   27,   28,
 /*  1800 */    29,   30,   31,  144,  144,   34,  144,   36,  144,   38,
 /*  1810 */    39,  144,   41,   42,  144,   44,  144,  144,  144,   48,
 /*  1820 */    49,   50,   51,   52,   53,   54,   55,  144,  144,  144,
 /*  1830 */   144,  144,  144,  144,  144,  144,  144,   66,   67,   68,
 /*  1840 */    69,   70,   71,   72,   73,   74,    4,    5,    6,    7,
 /*  1850 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  1860 */    18,   19,   20,   21,   22,   23,   24,  144,   26,   27,
 /*  1870 */    28,   29,   30,   31,  144,  144,   34,  144,   36,  144,
 /*  1880 */    38,   39,  144,   41,   42,  144,   44,  144,  144,  144,
 /*  1890 */    48,   49,   50,   51,   52,   53,   54,   55,  144,  144,
 /*  1900 */   144,  144,  144,  144,  144,  144,  144,  144,   66,   67,
 /*  1910 */    68,   69,   70,   71,   72,   73,   74,    4,    5,    6,
 /*  1920 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  1930 */    17,   18,   19,   20,   21,   22,   23,   24,  144,   26,
 /*  1940 */    27,   28,   29,   30,   31,  144,  144,   34,  144,   36,
 /*  1950 */   144,   38,   39,  144,   41,   42,  144,   44,  144,  144,
 /*  1960 */   144,   48,   49,   50,   51,   52,   53,   54,   55,  144,
 /*  1970 */   144,  144,  144,  144,  144,  144,  144,  144,  144,   66,
 /*  1980 */    67,   68,   69,   70,   71,   72,   73,   74,    4,    5,
 /*  1990 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  2000 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  144,
 /*  2010 */    26,   27,   28,   29,   30,   31,  144,  144,   34,  144,
 /*  2020 */    36,  144,   38,   39,  144,   41,   42,  144,   44,  144,
 /*  2030 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  2040 */   144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  2050 */    66,   67,   68,   69,   70,   71,   72,   73,   74,    4,
 /*  2060 */     5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*  2070 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  2080 */   144,   26,   27,   28,   29,   30,   31,  144,  144,   34,
 /*  2090 */   144,   36,  144,   38,   39,  144,   41,   42,  144,   44,
 /*  2100 */   144,  144,  144,   48,   49,   50,   51,   52,   53,   54,
 /*  2110 */    55,  144,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  2120 */   144,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  2130 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  2140 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  2150 */    24,  144,   26,   27,   28,   29,   30,   31,  144,  144,
 /*  2160 */    34,  144,   36,  144,   38,   39,  144,   41,   42,  144,
 /*  2170 */    44,  144,  144,  144,   48,   49,   50,   51,   52,   53,
 /*  2180 */    54,   55,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  2190 */   144,  144,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  2200 */    74,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*  2210 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  2220 */    23,   24,  144,   26,   27,   28,   29,   30,   31,  144,
 /*  2230 */   144,   34,  144,   36,  144,   38,   39,  144,   41,   42,
 /*  2240 */   144,   44,  144,  144,  144,   48,   49,   50,   51,   52,
 /*  2250 */    53,   54,   55,  144,  144,  144,  144,  144,  144,  144,
 /*  2260 */   144,  144,  144,   66,   67,   68,   69,   70,   71,   72,
 /*  2270 */    73,   74,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  2280 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  2290 */    22,   23,   24,  144,   26,   27,   28,   29,   30,   31,
 /*  2300 */   144,  144,   34,  144,   36,  144,   38,   39,  144,   41,
 /*  2310 */    42,  144,   44,  144,  144,  144,   48,   49,   50,   51,
 /*  2320 */    52,   53,   54,   55,  144,  144,  144,  144,  144,  144,
 /*  2330 */   144,  144,  144,  144,   66,   67,   68,   69,   70,   71,
 /*  2340 */    72,   73,   74,    4,    5,    6,    7,    8,    9,   10,
 /*  2350 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  2360 */    21,   22,   23,   24,  144,   26,   27,   28,   29,   30,
 /*  2370 */    31,  144,  144,   34,  144,   36,  144,   38,   39,  144,
 /*  2380 */    41,   42,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  2390 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  2400 */   144,  144,  144,  144,  144,   66,   67,   68,   69,   70,
 /*  2410 */    71,   72,   73,   74,    4,    5,    6,    7,    8,    9,
 /*  2420 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  2430 */    20,   21,   22,   23,   24,  144,   26,   27,   28,   29,
 /*  2440 */    30,   31,  144,  144,   34,  144,   36,  144,   38,   39,
 /*  2450 */   144,   41,   42,  144,   44,  144,  144,  144,   48,   49,
 /*  2460 */    50,   51,   52,   53,   54,   55,  144,  144,  144,  144,
 /*  2470 */   144,  144,  144,  144,  144,  144,   66,   67,   68,   69,
 /*  2480 */    70,   71,   72,   73,   74,    4,    5,    6,    7,    8,
 /*  2490 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  2500 */    19,   20,   21,   22,   23,   24,  144,   26,   27,   28,
 /*  2510 */    29,   30,   31,  144,  144,   34,  144,   36,  144,   38,
 /*  2520 */    39,  144,   41,   42,  144,   44,  144,  144,  144,   48,
 /*  2530 */    49,   50,   51,   52,   53,   54,   55,  144,  144,  144,
 /*  2540 */   144,  144,  144,  144,  144,  144,  144,   66,   67,   68,
 /*  2550 */    69,   70,   71,   72,   73,   74,    4,    5,    6,    7,
 /*  2560 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  2570 */    18,   19,   20,   21,   22,   23,   24,  144,   26,   27,
 /*  2580 */    28,   29,   30,   31,  144,  144,   34,  144,   36,  144,
 /*  2590 */    38,   39,  144,   41,   42,  144,   44,  144,  144,  144,
 /*  2600 */    48,   49,   50,   51,   52,   53,   54,   55,  144,  144,
 /*  2610 */   144,  144,  144,  144,  144,  144,  144,  144,   66,   67,
 /*  2620 */    68,   69,   70,   71,   72,   73,   74,    4,    5,    6,
 /*  2630 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  2640 */    17,   18,   19,   20,   21,   22,   23,   24,  144,   26,
 /*  2650 */    27,   28,   29,   30,   31,  144,  144,   34,  144,   36,
 /*  2660 */   144,   38,   39,  144,   41,   42,  144,   44,  144,  144,
 /*  2670 */   144,   48,   49,   50,   51,   52,   53,   54,   55,  144,
 /*  2680 */   144,  144,  144,  144,  144,  144,  144,  144,  144,   66,
 /*  2690 */    67,   68,   69,   70,   71,   72,   73,   74,    4,    5,
 /*  2700 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  2710 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  144,
 /*  2720 */    26,   27,   28,   29,   30,   31,  144,  144,   34,  144,
 /*  2730 */    36,  144,   38,   39,  144,   41,   42,  144,   44,  144,
 /*  2740 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  2750 */   144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  2760 */    66,   67,   68,   69,   70,   71,   72,   73,   74,    4,
 /*  2770 */     5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*  2780 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  2790 */   144,   26,   27,   28,   29,   30,   31,  144,  144,   34,
 /*  2800 */   144,   36,  144,   38,   39,  144,   41,   42,  144,   44,
 /*  2810 */   144,  144,  144,   48,   49,   50,   51,   52,   53,   54,
 /*  2820 */    55,  144,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  2830 */   144,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  2840 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  2850 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  2860 */    24,  144,   26,   27,   28,   29,   30,   31,  144,  144,
 /*  2870 */    34,  144,   36,  144,   38,   39,  144,   41,   42,  144,
 /*  2880 */    44,  144,  144,  144,   48,   49,   50,   51,   52,   53,
 /*  2890 */    54,   55,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  2900 */   144,  144,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  2910 */    74,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*  2920 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  2930 */    23,   24,  144,   26,   27,   28,   29,   30,   31,    3,
 /*  2940 */   144,    5,  144,   36,  144,   38,   39,  144,   41,   42,
 /*  2950 */   144,   44,  144,  144,  144,   48,   49,   50,   51,   52,
 /*  2960 */    53,   54,   55,  144,  144,  144,   30,  144,  144,  144,
 /*  2970 */    34,  144,   36,   66,   67,   68,   69,   70,   71,   72,
 /*  2980 */    73,   74,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  2990 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  3000 */    22,   23,   24,  144,   26,   27,   28,   29,   30,   31,
 /*  3010 */     3,  144,    5,  144,   36,  144,   38,   39,  144,   41,
 /*  3020 */    42,  144,   44,  144,  144,  144,   48,   49,   50,   51,
 /*  3030 */    52,   53,   54,   55,  144,  144,  144,   30,  144,  144,
 /*  3040 */   144,   34,  144,   36,   66,   67,   68,   69,   70,   71,
 /*  3050 */    72,   73,   74,    4,    5,    6,    7,    8,    9,   10,
 /*  3060 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  3070 */    21,   22,   23,   24,  144,   26,   27,   28,   29,   30,
 /*  3080 */    31,  144,  144,  144,  144,   36,  144,   38,   39,  144,
 /*  3090 */    41,   42,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  3100 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  3110 */   144,  144,  144,  144,  144,   66,   67,   68,   69,   70,
 /*  3120 */    71,   72,   73,   74,    3,    4,    5,    6,    7,  144,
 /*  3130 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  3140 */    19,   20,   21,   22,   23,   24,  144,  144,   27,   28,
 /*  3150 */    29,   79,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  3160 */   144,  144,    3,   91,    5,  144,   94,   95,  144,  144,
 /*  3170 */   144,  144,  144,  144,  102,   54,   55,   56,   57,   58,
 /*  3180 */    59,   60,   61,   62,   63,   64,   65,    3,    4,    5,
 /*  3190 */     6,    7,  144,    9,   10,   11,   12,   13,   14,   15,
 /*  3200 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   90,
 /*  3210 */   144,   27,   28,   29,  144,   56,   57,   58,   59,   60,
 /*  3220 */    61,   62,   63,   64,   65,  144,  144,  108,  144,  144,
 /*  3230 */   144,  144,  144,  144,  144,  144,  144,  118,   54,   55,
 /*  3240 */    56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
 /*  3250 */     3,    4,    5,    6,    7,   90,    9,   10,   11,   12,
 /*  3260 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  3270 */    23,   24,   90,  108,   27,   28,   29,  144,  144,  144,
 /*  3280 */   144,  144,  144,  118,  144,  120,  144,  144,  144,  144,
 /*  3290 */   108,  144,  144,  144,  144,  144,   84,  144,   90,  144,
 /*  3300 */   118,   54,   55,   56,   57,   58,   59,   60,   61,   62,
 /*  3310 */    63,   64,   65,    0,   90,    2,  108,  105,  106,  107,
 /*  3320 */   108,    8,  144,  144,  144,  144,  118,  144,   90,  144,
 /*  3330 */   118,   90,  108,   20,   21,  144,  124,  125,  144,   26,
 /*  3340 */    27,   28,  118,   30,   31,   32,  108,  135,   35,  108,
 /*  3350 */    37,   38,   39,   40,   41,  144,  118,   44,  144,  118,
 /*  3360 */    90,   48,   49,   50,   51,   52,   53,   54,   55,    0,
 /*  3370 */   144,    2,  144,  144,   90,  144,  144,    8,  108,   66,
 /*  3380 */    67,   68,   69,   70,   71,   72,   73,   74,  118,   20,
 /*  3390 */    21,  144,  108,  144,  144,   26,   27,   28,  144,   30,
 /*  3400 */    31,   32,  118,  144,   35,  144,   37,   38,   39,   40,
 /*  3410 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  3420 */    51,   52,   53,   54,   55,    0,  144,    2,  144,  144,
 /*  3430 */   144,  144,  144,    8,  144,   66,   67,   68,   69,   70,
 /*  3440 */    71,   72,   73,   74,  144,   20,   21,  144,  144,  144,
 /*  3450 */   144,   26,   27,   28,  144,   30,   31,   32,  144,  144,
 /*  3460 */    35,  144,   37,   38,   39,   40,   41,  144,  144,   44,
 /*  3470 */   144,  144,  144,   48,   49,   50,   51,   52,   53,   54,
 /*  3480 */    55,    0,  144,    2,  144,  144,  144,  144,  144,    8,
 /*  3490 */   144,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  3500 */   144,   20,   21,  144,  144,  144,  144,   26,   27,   28,
 /*  3510 */   144,   30,   31,   32,  144,  144,   35,  144,   37,   38,
 /*  3520 */    39,   40,   41,  144,  144,   44,  144,  144,  144,   48,
 /*  3530 */    49,   50,   51,   52,   53,   54,   55,    0,  144,    2,
 /*  3540 */   144,  144,  144,  144,  144,    8,  144,   66,   67,   68,
 /*  3550 */    69,   70,   71,   72,   73,   74,  144,   20,   21,  144,
 /*  3560 */   144,  144,  144,   26,   27,   28,  144,   30,   31,   32,
 /*  3570 */   144,  144,   35,  144,   37,   38,   39,   40,   41,  144,
 /*  3580 */   144,   44,  144,  144,  144,   48,   49,   50,   51,   52,
 /*  3590 */    53,   54,   55,    0,  144,    2,  144,  144,  144,  144,
 /*  3600 */   144,    8,  144,   66,   67,   68,   69,   70,   71,   72,
 /*  3610 */    73,   74,  144,   20,   21,  144,  144,  144,  144,   26,
 /*  3620 */    27,   28,  144,   30,   31,   32,  144,  144,   35,  144,
 /*  3630 */    37,   38,   39,   40,   41,  144,  144,   44,  144,  144,
 /*  3640 */   144,   48,   49,   50,   51,   52,   53,   54,   55,    0,
 /*  3650 */   144,    2,  144,  144,  144,  144,  144,    8,  144,   66,
 /*  3660 */    67,   68,   69,   70,   71,   72,   73,   74,  144,   20,
 /*  3670 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  3680 */    31,   32,  144,  144,   35,  144,   37,   38,   39,   40,
 /*  3690 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  3700 */    51,   52,   53,   54,   55,    0,  144,    2,  144,  144,
 /*  3710 */   144,  144,  144,    8,  144,   66,   67,   68,   69,   70,
 /*  3720 */    71,   72,   73,   74,  144,   20,   21,  144,  144,  144,
 /*  3730 */   144,   26,   27,   28,  144,   30,   31,   32,  144,  144,
 /*  3740 */    35,  144,   37,   38,   39,   40,   41,  144,  144,   44,
 /*  3750 */   144,  144,  144,   48,   49,   50,   51,   52,   53,   54,
 /*  3760 */    55,    0,  144,    2,  144,  144,  144,  144,  144,    8,
 /*  3770 */   144,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  3780 */   144,   20,   21,  144,  144,  144,  144,   26,   27,   28,
 /*  3790 */   144,   30,   31,   32,  144,  144,   35,  144,   37,   38,
 /*  3800 */    39,   40,   41,  144,  144,   44,  144,  144,  144,   48,
 /*  3810 */    49,   50,   51,   52,   53,   54,   55,    0,  144,    2,
 /*  3820 */   144,  144,  144,  144,  144,    8,  144,   66,   67,   68,
 /*  3830 */    69,   70,   71,   72,   73,   74,  144,   20,   21,  144,
 /*  3840 */   144,  144,  144,   26,   27,   28,  144,   30,   31,   32,
 /*  3850 */   144,  144,   35,  144,   37,   38,   39,   40,   41,  144,
 /*  3860 */   144,   44,  144,  144,  144,   48,   49,   50,   51,   52,
 /*  3870 */    53,   54,   55,    0,  144,    2,  144,  144,  144,  144,
 /*  3880 */   144,    8,  144,   66,   67,   68,   69,   70,   71,   72,
 /*  3890 */    73,   74,  144,   20,   21,  144,  144,  144,  144,   26,
 /*  3900 */    27,   28,  144,   30,   31,   32,  144,  144,   35,  144,
 /*  3910 */    37,   38,   39,   40,   41,  144,  144,   44,  144,  144,
 /*  3920 */   144,   48,   49,   50,   51,   52,   53,   54,   55,    0,
 /*  3930 */   144,    2,  144,  144,  144,  144,  144,    8,  144,   66,
 /*  3940 */    67,   68,   69,   70,   71,   72,   73,   74,  144,   20,
 /*  3950 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  3960 */    31,   32,  144,  144,   35,  144,   37,   38,   39,   40,
 /*  3970 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  3980 */    51,   52,   53,   54,   55,    0,  144,    2,  144,  144,
 /*  3990 */   144,  144,  144,    8,  144,   66,   67,   68,   69,   70,
 /*  4000 */    71,   72,   73,   74,  144,   20,   21,  144,  144,  144,
 /*  4010 */   144,   26,   27,   28,  144,   30,   31,   32,  144,  144,
 /*  4020 */    35,  144,   37,   38,   39,   40,   41,  144,  144,   44,
 /*  4030 */   144,  144,  144,   48,   49,   50,   51,   52,   53,   54,
 /*  4040 */    55,    0,  144,    2,  144,  144,  144,  144,  144,    8,
 /*  4050 */   144,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  4060 */   144,   20,   21,  144,  144,  144,  144,   26,   27,   28,
 /*  4070 */   144,   30,   31,   32,  144,  144,   35,  144,   37,   38,
 /*  4080 */    39,   40,   41,  144,  144,   44,  144,  144,  144,   48,
 /*  4090 */    49,   50,   51,   52,   53,   54,   55,    0,  144,    2,
 /*  4100 */   144,  144,  144,  144,  144,    8,  144,   66,   67,   68,
 /*  4110 */    69,   70,   71,   72,   73,   74,  144,   20,   21,  144,
 /*  4120 */   144,  144,  144,   26,   27,   28,  144,   30,   31,   32,
 /*  4130 */   144,  144,   35,  144,   37,   38,   39,   40,   41,  144,
 /*  4140 */   144,   44,  144,  144,  144,   48,   49,   50,   51,   52,
 /*  4150 */    53,   54,   55,    0,  144,    2,  144,  144,  144,  144,
 /*  4160 */   144,    8,  144,   66,   67,   68,   69,   70,   71,   72,
 /*  4170 */    73,   74,  144,   20,   21,  144,  144,  144,  144,   26,
 /*  4180 */    27,   28,  144,   30,   31,   32,  144,  144,   35,  144,
 /*  4190 */    37,   38,   39,   40,   41,  144,  144,   44,  144,  144,
 /*  4200 */   144,   48,   49,   50,   51,   52,   53,   54,   55,    0,
 /*  4210 */   144,    2,  144,  144,  144,  144,  144,    8,  144,   66,
 /*  4220 */    67,   68,   69,   70,   71,   72,   73,   74,  144,   20,
 /*  4230 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  4240 */    31,   32,  144,  144,   35,  144,   37,   38,   39,   40,
 /*  4250 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  4260 */    51,   52,   53,   54,   55,    0,  144,    2,  144,  144,
 /*  4270 */   144,  144,  144,    8,  144,   66,   67,   68,   69,   70,
 /*  4280 */    71,   72,   73,   74,  144,   20,   21,  144,  144,  144,
 /*  4290 */   144,   26,   27,   28,  144,   30,   31,   32,  144,  144,
 /*  4300 */    35,  144,   37,   38,   39,   40,   41,  144,  144,   44,
 /*  4310 */   144,  144,  144,   48,   49,   50,   51,   52,   53,   54,
 /*  4320 */    55,    0,  144,    2,  144,  144,  144,  144,  144,    8,
 /*  4330 */   144,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  4340 */   144,   20,   21,  144,  144,  144,  144,   26,   27,   28,
 /*  4350 */   144,   30,   31,   32,  144,  144,   35,  144,   37,   38,
 /*  4360 */    39,   40,   41,  144,  144,   44,  144,  144,  144,   48,
 /*  4370 */    49,   50,   51,   52,   53,   54,   55,    0,  144,    2,
 /*  4380 */   144,  144,  144,  144,  144,    8,  144,   66,   67,   68,
 /*  4390 */    69,   70,   71,   72,   73,   74,  144,   20,   21,  144,
 /*  4400 */   144,  144,  144,   26,   27,   28,  144,   30,   31,   32,
 /*  4410 */   144,  144,   35,  144,   37,   38,   39,   40,   41,  144,
 /*  4420 */   144,   44,  144,  144,  144,   48,   49,   50,   51,   52,
 /*  4430 */    53,   54,   55,    0,  144,    2,  144,  144,  144,  144,
 /*  4440 */   144,    8,  144,   66,   67,   68,   69,   70,   71,   72,
 /*  4450 */    73,   74,  144,   20,   21,  144,  144,  144,  144,   26,
 /*  4460 */    27,   28,  144,   30,   31,   32,  144,  144,   35,  144,
 /*  4470 */    37,   38,   39,   40,   41,  144,  144,   44,  144,  144,
 /*  4480 */   144,   48,   49,   50,   51,   52,   53,   54,   55,    0,
 /*  4490 */   144,    2,  144,  144,  144,  144,  144,    8,  144,   66,
 /*  4500 */    67,   68,   69,   70,   71,   72,   73,   74,  144,   20,
 /*  4510 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  4520 */    31,   32,  144,  144,   35,  144,   37,   38,   39,   40,
 /*  4530 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  4540 */    51,   52,   53,   54,   55,    0,  144,    2,  144,  144,
 /*  4550 */   144,  144,  144,    8,  144,   66,   67,   68,   69,   70,
 /*  4560 */    71,   72,   73,   74,  144,   20,   21,  144,  144,  144,
 /*  4570 */   144,   26,   27,   28,  144,   30,   31,   32,  144,  144,
 /*  4580 */    35,  144,   37,   38,   39,   40,   41,  144,  144,   44,
 /*  4590 */   144,  144,  144,   48,   49,   50,   51,   52,   53,   54,
 /*  4600 */    55,    0,  144,    2,  144,  144,  144,  144,  144,    8,
 /*  4610 */   144,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  4620 */   144,   20,   21,  144,  144,  144,  144,   26,   27,   28,
 /*  4630 */   144,   30,   31,   32,  144,  144,   35,  144,   37,   38,
 /*  4640 */    39,   40,   41,  144,  144,   44,  144,  144,  144,   48,
 /*  4650 */    49,   50,   51,   52,   53,   54,   55,    0,  144,    2,
 /*  4660 */   144,  144,  144,  144,  144,    8,  144,   66,   67,   68,
 /*  4670 */    69,   70,   71,   72,   73,   74,  144,   20,   21,  144,
 /*  4680 */   144,  144,  144,   26,   27,   28,  144,   30,   31,   32,
 /*  4690 */   144,  144,   35,  144,   37,   38,   39,   40,   41,  144,
 /*  4700 */   144,   44,  144,  144,  144,   48,   49,   50,   51,   52,
 /*  4710 */    53,   54,   55,    0,  144,    2,  144,  144,  144,  144,
 /*  4720 */   144,    8,  144,   66,   67,   68,   69,   70,   71,   72,
 /*  4730 */    73,   74,  144,   20,   21,  144,  144,  144,  144,   26,
 /*  4740 */    27,   28,  144,   30,   31,   32,  144,  144,   35,  144,
 /*  4750 */    37,   38,   39,   40,   41,  144,  144,   44,  144,  144,
 /*  4760 */   144,   48,   49,   50,   51,   52,   53,   54,   55,    0,
 /*  4770 */   144,    2,  144,  144,  144,  144,  144,    8,  144,   66,
 /*  4780 */    67,   68,   69,   70,   71,   72,   73,   74,  144,   20,
 /*  4790 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  4800 */    31,   32,  144,  144,   35,  144,   37,   38,   39,   40,
 /*  4810 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  4820 */    51,   52,   53,   54,   55,    0,  144,    2,  144,  144,
 /*  4830 */   144,  144,  144,    8,  144,   66,   67,   68,   69,   70,
 /*  4840 */    71,   72,   73,   74,  144,   20,   21,  144,  144,  144,
 /*  4850 */   144,   26,   27,   28,  144,   30,   31,   32,  144,  144,
 /*  4860 */    35,  144,   37,   38,   39,   40,   41,  144,  144,   44,
 /*  4870 */   144,  144,  144,   48,   49,   50,   51,   52,   53,   54,
 /*  4880 */    55,    0,  144,    2,  144,  144,  144,  144,  144,    8,
 /*  4890 */   144,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  4900 */   144,   20,   21,  144,  144,  144,  144,   26,   27,   28,
 /*  4910 */   144,   30,   31,   32,  144,  144,   35,  144,   37,   38,
 /*  4920 */    39,   40,   41,  144,  144,   44,  144,  144,  144,   48,
 /*  4930 */    49,   50,   51,   52,   53,   54,   55,    0,  144,    2,
 /*  4940 */   144,  144,  144,  144,  144,    8,  144,   66,   67,   68,
 /*  4950 */    69,   70,   71,   72,   73,   74,  144,   20,   21,  144,
 /*  4960 */   144,  144,  144,   26,   27,   28,  144,   30,   31,   32,
 /*  4970 */   144,  144,   35,  144,   37,   38,   39,   40,   41,  144,
 /*  4980 */   144,   44,  144,  144,  144,   48,   49,   50,   51,   52,
 /*  4990 */    53,   54,   55,    0,  144,    2,  144,  144,  144,  144,
 /*  5000 */   144,    8,  144,   66,   67,   68,   69,   70,   71,   72,
 /*  5010 */    73,   74,  144,   20,   21,  144,  144,  144,  144,   26,
 /*  5020 */    27,   28,  144,   30,   31,   32,  144,  144,   35,  144,
 /*  5030 */    37,   38,   39,   40,   41,  144,  144,   44,  144,  144,
 /*  5040 */   144,   48,   49,   50,   51,   52,   53,   54,   55,  144,
 /*  5050 */   144,  144,  144,    5,  144,  144,    8,  144,  144,   66,
 /*  5060 */    67,   68,   69,   70,   71,   72,   73,   74,   20,   21,
 /*  5070 */   144,  144,  144,  144,   26,   27,   28,  144,   30,   31,
 /*  5080 */   144,  144,  144,  144,   36,  144,   38,   39,  144,   41,
 /*  5090 */    42,    0,   44,  144,  144,  144,   48,   49,   50,   51,
 /*  5100 */    52,   53,   54,   55,  144,  144,  144,  144,  144,  144,
 /*  5110 */   144,  144,  144,  144,   66,   67,   68,   69,   70,   71,
 /*  5120 */    72,   73,   74,   32,   75,  144,   35,  144,   37,   38,
 /*  5130 */    39,  144,  144,   84,  144,  144,   87,  144,  144,  144,
 /*  5140 */   144,  144,   93,  144,   53,  144,  144,  144,  144,  100,
 /*  5150 */   101,  102,  144,  144,  105,  106,  107,  108,  109,  110,
 /*  5160 */   111,  112,  113,  114,  115,  144,  144,  118,  107,  108,
 /*  5170 */   144,  144,  144,  124,  125,  126,  127,  128,  144,  118,
 /*  5180 */   144,  132,  133,  134,  144,  124,  125,  144,  139,  140,
 /*  5190 */   141,  142,  143,   75,  144,  144,  144,  144,  137,  138,
 /*  5200 */   144,  144,   84,  144,  144,   87,  144,  144,  144,  144,
 /*  5210 */   144,   93,  144,  144,  144,  144,  144,  144,  100,  101,
 /*  5220 */   102,  144,  144,  105,  106,  107,  108,  109,  110,  111,
 /*  5230 */   112,  113,  114,  115,  144,  144,  118,  107,  108,  144,
 /*  5240 */   144,  144,  124,  125,  126,  127,  128,  144,  118,  144,
 /*  5250 */   132,  133,  134,   75,  124,  125,  144,  139,  140,  141,
 /*  5260 */   142,  143,   84,  144,  144,   87,  144,  137,  144,  144,
 /*  5270 */   144,   93,  144,  144,  144,  144,  144,  144,  100,  101,
 /*  5280 */   102,  144,  144,  105,  106,  107,  108,  109,  110,  111,
 /*  5290 */   112,  113,  114,  115,  144,  144,  118,  144,  144,  144,
 /*  5300 */   144,  144,  124,  125,  126,  127,  128,  144,  144,  144,
 /*  5310 */   132,  133,  134,  144,  144,  144,  144,  139,  140,  141,
 /*  5320 */   142,  143,   75,  144,  144,  144,  144,  144,  144,  144,
 /*  5330 */   144,   84,  144,  144,   87,  144,  144,  144,  144,  144,
 /*  5340 */    93,  144,  144,  144,  144,  144,  144,  100,  101,  102,
 /*  5350 */   144,  144,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  5360 */   113,  114,  115,  144,  144,  118,  144,  144,  144,  144,
 /*  5370 */   144,  124,  125,  126,  127,  128,  144,  144,  144,  132,
 /*  5380 */   133,  134,   75,  144,  144,  144,  139,  140,  141,  142,
 /*  5390 */   143,   84,  144,  144,   87,  144,  144,  144,  144,  144,
 /*  5400 */    93,  144,  144,  144,  144,  144,  144,  100,  101,  102,
 /*  5410 */   144,  144,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  5420 */   113,  114,  115,  144,  144,  118,  144,  144,  144,  144,
 /*  5430 */   144,  124,  125,  126,  127,  128,  144,  144,  144,  132,
 /*  5440 */   133,  134,  144,  144,  144,  144,  139,  140,  141,  142,
 /*  5450 */   143,   75,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  5460 */    84,  144,  144,   87,  144,  144,  144,  144,  144,   93,
 /*  5470 */   144,  144,  144,  144,  144,  144,  100,  101,  102,  144,
 /*  5480 */   144,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  5490 */   114,  115,  144,  144,  118,  144,  144,  144,  144,  144,
 /*  5500 */   124,  125,  126,  127,  128,  144,  144,  144,  132,  133,
 /*  5510 */   134,   75,  144,  144,  144,  139,  140,  141,  142,  143,
 /*  5520 */    84,  144,  144,   87,  144,  144,  144,  144,  144,   93,
 /*  5530 */   144,  144,  144,  144,  144,  144,  100,  101,  102,  144,
 /*  5540 */   144,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  5550 */   114,  115,  144,  144,  118,  144,  144,  144,  144,  144,
 /*  5560 */   124,  125,  126,  127,  128,  144,  144,  144,  132,  133,
 /*  5570 */   134,  144,  144,  144,  144,  139,  140,  141,  142,  143,
 /*  5580 */    75,  144,  144,  144,  144,  144,  144,  144,  144,   84,
 /*  5590 */   144,  144,   87,  144,  144,  144,  144,  144,   93,  144,
 /*  5600 */   144,  144,  144,  144,  144,  100,  101,  102,  144,  144,
 /*  5610 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  5620 */   115,  144,  144,  118,  144,  144,  144,  144,  144,  124,
 /*  5630 */   125,  126,  127,  128,  144,  144,  144,  132,  133,  134,
 /*  5640 */    75,  144,  144,  144,  139,  140,  141,  142,  143,   84,
 /*  5650 */   144,  144,   87,  144,  144,  144,  144,  144,  144,  144,
 /*  5660 */   144,  144,  144,  144,  144,  100,  101,  102,  144,  104,
 /*  5670 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  5680 */   115,  144,  144,  118,  144,  144,  144,  144,  144,  124,
 /*  5690 */   125,  126,  127,  128,  144,  144,  144,  132,  133,  134,
 /*  5700 */   144,  144,  144,  144,  139,  140,  141,  142,  143,   75,
 /*  5710 */   144,  144,  144,  144,  144,  144,  144,  144,   84,  144,
 /*  5720 */   144,   87,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  5730 */   144,  144,  144,  144,  100,  101,  102,  103,  144,  105,
 /*  5740 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  5750 */   144,  144,  118,    0,  144,  144,  144,  144,  124,  125,
 /*  5760 */   126,  127,  128,  144,  144,  144,  132,  133,  134,  144,
 /*  5770 */   144,  144,  144,  139,  140,  141,  142,  143,  144,    5,
 /*  5780 */   144,  144,    8,  144,  144,   32,  144,  144,   35,  144,
 /*  5790 */    37,   38,   39,  144,   20,   21,  144,  144,  144,  144,
 /*  5800 */    26,   27,   28,  144,   30,   31,   53,  144,  144,  144,
 /*  5810 */   144,  144,   38,   39,  144,   41,  144,  144,   44,  144,
 /*  5820 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  5830 */   144,  144,  144,  144,  144,  144,  144,    8,  144,  144,
 /*  5840 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   20,
 /*  5850 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  5860 */    31,  144,  144,  144,  144,  144,  144,   38,   39,   40,
 /*  5870 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  5880 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  5890 */   144,  144,    8,  144,  144,   66,   67,   68,   69,   70,
 /*  5900 */    71,   72,   73,   74,   20,   21,  144,  144,  144,  144,
 /*  5910 */    26,   27,   28,  144,   30,   31,  144,  144,  144,  144,
 /*  5920 */   144,  144,   38,   39,   40,   41,  144,  144,   44,  144,
 /*  5930 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  5940 */   144,  144,  144,  144,  144,  144,  144,    8,  144,  144,
 /*  5950 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   20,
 /*  5960 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  5970 */    31,  144,  144,  144,  144,  144,  144,   38,   39,   40,
 /*  5980 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  5990 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  6000 */   144,  144,    8,  144,  144,   66,   67,   68,   69,   70,
 /*  6010 */    71,   72,   73,   74,   20,   21,  144,  144,  144,  144,
 /*  6020 */    26,   27,   28,  144,   30,   31,  144,  144,  144,  144,
 /*  6030 */   144,  144,   38,   39,   40,   41,  144,  144,   44,  144,
 /*  6040 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6050 */   144,  144,  144,  144,  144,  144,  144,    8,  144,  144,
 /*  6060 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   20,
 /*  6070 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  6080 */    31,  144,  144,  144,  144,  144,  144,   38,   39,   40,
 /*  6090 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  6100 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  6110 */   144,  144,    8,  144,  144,   66,   67,   68,   69,   70,
 /*  6120 */    71,   72,   73,   74,   20,   21,  144,  144,  144,  144,
 /*  6130 */    26,   27,   28,  144,   30,   31,  144,  144,   34,  144,
 /*  6140 */   144,  144,   38,   39,  144,   41,  144,  144,   44,  144,
 /*  6150 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6160 */   144,  144,  144,  144,  144,  144,  144,    8,  144,  144,
 /*  6170 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   20,
 /*  6180 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  6190 */    31,  144,  144,  144,  144,  144,  144,   38,   39,   40,
 /*  6200 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  6210 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  6220 */   144,  144,    8,  144,  144,   66,   67,   68,   69,   70,
 /*  6230 */    71,   72,   73,   74,   20,   21,  144,  144,  144,  144,
 /*  6240 */    26,   27,   28,  144,   30,   31,  144,  144,  144,  144,
 /*  6250 */   144,  144,   38,   39,   40,   41,  144,  144,   44,  144,
 /*  6260 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6270 */   144,  144,  144,  144,  144,  144,  144,    8,  144,  144,
 /*  6280 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   20,
 /*  6290 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  6300 */    31,  144,  144,  144,  144,  144,  144,   38,   39,  144,
 /*  6310 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  6320 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  6330 */   144,  144,    8,  144,  144,   66,   67,   68,   69,   70,
 /*  6340 */    71,   72,   73,   74,   20,   21,  144,  144,  144,  144,
 /*  6350 */    26,   27,   28,  144,   30,   31,  144,  144,  144,  144,
 /*  6360 */   144,  144,   38,   39,  144,   41,  144,  144,   44,  144,
 /*  6370 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6380 */   144,  144,  144,  144,  144,  144,  144,    8,  144,  144,
 /*  6390 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   20,
 /*  6400 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  6410 */    31,  144,  144,  144,  144,  144,  144,   38,   39,  144,
 /*  6420 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  6430 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  6440 */   144,  144,    8,  144,  144,   66,   67,   68,   69,   70,
 /*  6450 */    71,   72,   73,   74,   20,   21,  144,  144,  144,  144,
 /*  6460 */    26,   27,   28,  144,   30,   31,  144,  144,  144,  144,
 /*  6470 */   144,  144,   38,   39,  144,   41,  144,  144,   44,  144,
 /*  6480 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6490 */   144,  144,  144,  144,  144,  144,  144,    8,  144,  144,
 /*  6500 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   20,
 /*  6510 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  6520 */    31,  144,  144,  144,  144,  144,  144,   38,   39,  144,
 /*  6530 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  6540 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  6550 */   144,  144,    8,  144,  144,   66,   67,   68,   69,   70,
 /*  6560 */    71,   72,   73,   74,   20,   21,  144,  144,  144,  144,
 /*  6570 */    26,   27,   28,  144,   30,   31,  144,  144,  144,  144,
 /*  6580 */   144,  144,   38,   39,  144,   41,  144,  144,   44,  144,
 /*  6590 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6600 */   144,  144,  144,  144,  144,  144,  144,    8,  144,  144,
 /*  6610 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   20,
 /*  6620 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  6630 */    31,  144,  144,  144,  144,  144,  144,   38,   39,  144,
 /*  6640 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  6650 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  6660 */   144,  144,    8,  144,  144,   66,   67,   68,   69,   70,
 /*  6670 */    71,   72,   73,   74,   20,   21,  144,  144,  144,  144,
 /*  6680 */    26,   27,   28,  144,   30,   31,  144,  144,  144,  144,
 /*  6690 */   144,  144,   38,   39,  144,   41,  144,  144,   44,  144,
 /*  6700 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6710 */   144,  144,  144,  144,  144,  144,  144,    8,  144,  144,
 /*  6720 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   20,
 /*  6730 */    21,  144,  144,  144,  144,   26,   27,   28,  144,   30,
 /*  6740 */    31,  144,  144,  144,  144,  144,  144,   38,   39,  144,
 /*  6750 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  6760 */    51,   52,   53,   54,   55,  144,  144,  144,  144,  144,
 /*  6770 */   144,  144,  144,  144,  144,   66,   67,   68,   69,   70,
 /*  6780 */    71,   72,   73,   74,    3,    4,    5,    6,    7,  144,
 /*  6790 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  6800 */    19,   20,   21,   22,   23,   24,  144,  144,   27,   28,
 /*  6810 */    29,  144,  144,    4,  144,    6,    7,   36,    9,   10,
 /*  6820 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  6830 */    21,   22,   23,   24,  144,  144,   27,   28,   29,   30,
 /*  6840 */   144,  144,    4,    5,    6,    7,  144,    9,   10,   11,
 /*  6850 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  6860 */    22,   23,   24,   54,   55,   27,   28,   29,   30,  144,
 /*  6870 */     4,    5,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  6880 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  6890 */    24,  144,  144,   27,   28,   29,   30,  144,    4,    5,
 /*  6900 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  6910 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  144,
 /*  6920 */   144,   27,   28,   29,   30,  144,    4,    5,    6,    7,
 /*  6930 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  6940 */    18,   19,   20,   21,   22,   23,   24,  144,  144,   27,
 /*  6950 */    28,   29,   30,  144,    4,    5,    6,    7,   36,    9,
 /*  6960 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  6970 */    20,   21,   22,   23,   24,  144,  144,   27,   28,   29,
 /*  6980 */    30,  144,    4,    5,    6,    7,   36,    9,   10,   11,
 /*  6990 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7000 */    22,   23,   24,  144,  144,   27,   28,   29,   30,  144,
 /*  7010 */     4,    5,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  7020 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  7030 */    24,  144,  144,   27,   28,   29,   30,  144,    4,    5,
 /*  7040 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  7050 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  144,
 /*  7060 */   144,   27,   28,   29,   30,  144,    4,    5,    6,    7,
 /*  7070 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  7080 */    18,   19,   20,   21,   22,   23,   24,  144,  144,   27,
 /*  7090 */    28,   29,   30,  144,    4,    5,    6,    7,   36,    9,
 /*  7100 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  7110 */    20,   21,   22,   23,   24,  144,  144,   27,   28,   29,
 /*  7120 */    30,  144,    4,    5,    6,    7,   36,    9,   10,   11,
 /*  7130 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7140 */    22,   23,   24,  144,  144,   27,   28,   29,   30,  144,
 /*  7150 */     4,    5,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  7160 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  7170 */    24,  144,  144,   27,   28,   29,   30,  144,    4,    5,
 /*  7180 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  7190 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  144,
 /*  7200 */   144,   27,   28,   29,   30,  144,    4,    5,    6,    7,
 /*  7210 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  7220 */    18,   19,   20,   21,   22,   23,   24,  144,  144,   27,
 /*  7230 */    28,   29,  144,  144,    4,    5,    6,    7,   36,    9,
 /*  7240 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  7250 */    20,   21,   22,   23,   24,  144,  144,   27,   28,   29,
 /*  7260 */   144,  144,    4,    5,    6,    7,   36,    9,   10,   11,
 /*  7270 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7280 */    22,   23,   24,  144,  144,   27,   28,   29,  144,  144,
 /*  7290 */     4,  144,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  7300 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  7310 */    24,  144,  144,   27,   28,   29,  144,  144,  144,    4,
 /*  7320 */   144,    6,    7,  144,    9,   10,   11,   12,   13,   14,
 /*  7330 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  7340 */    54,   55,   27,   28,   29,  144,  144,    4,  144,    6,
 /*  7350 */     7,   36,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  7360 */    17,   18,   19,   20,   21,   22,   23,   24,  144,  144,
 /*  7370 */    27,   28,   29,  144,  144,  144,    4,   34,    6,    7,
 /*  7380 */   144,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  7390 */    18,   19,   20,   21,   22,   23,   24,  144,  144,   27,
 /*  7400 */    28,   29,  144,  144,    4,  144,    6,    7,   36,    9,
 /*  7410 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  7420 */    20,   21,   22,   23,   24,  144,  144,   27,   28,   29,
 /*  7430 */   144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  7440 */   144,  144,   42,  144,  144,  144,  144,    4,  144,    6,
 /*  7450 */     7,  144,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  7460 */    17,   18,   19,   20,   21,   22,   23,   24,  144,  144,
 /*  7470 */    27,   28,   29,  144,  144,  144,  144,  144,  144,  144,
 /*  7480 */   144,  144,  144,  144,  144,   42,  144,  144,  144,  144,
 /*  7490 */     4,  144,    6,    7,  144,    9,   10,   11,   12,   13,
 /*  7500 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  7510 */    24,  144,  144,   27,   28,   29,  144,  144,    4,  144,
 /*  7520 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  7530 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  144,
 /*  7540 */   144,   27,   28,   29,  144,  144,    4,  144,    6,    7,
 /*  7550 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  7560 */    18,   19,   20,   21,   22,   23,   24,  144,  144,   27,
 /*  7570 */    28,   29,  144,  144,    4,  144,    6,    7,   36,    9,
 /*  7580 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  7590 */    20,   21,   22,   23,   24,  144,  144,   27,   28,   29,
 /*  7600 */    30,  144,    4,  144,    6,    7,  144,    9,   10,   11,
 /*  7610 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7620 */    22,   23,   24,    8,  144,   27,   28,   29,  144,  144,
 /*  7630 */   144,  144,  144,  144,  144,   20,   21,  144,  144,  144,
 /*  7640 */   144,   26,   27,   28,    0,   30,   31,  144,  144,  144,
 /*  7650 */   144,  144,  144,  144,   39,  144,   41,  144,  144,   44,
 /*  7660 */   144,  144,  144,   48,   49,   50,   51,   52,   53,   54,
 /*  7670 */    55,  144,    8,  144,  144,  144,   32,  144,  144,   35,
 /*  7680 */   144,   37,   38,   39,   20,   21,  144,  144,   73,  144,
 /*  7690 */    26,   27,   28,    0,   30,   31,  144,   53,  144,  144,
 /*  7700 */   144,  144,  144,   39,  144,   41,  144,  144,   44,  144,
 /*  7710 */   144,  144,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  7720 */   144,    8,  144,  144,  144,   32,  144,  144,   35,  144,
 /*  7730 */    37,   38,   39,   20,   21,  144,  144,   73,  144,   26,
 /*  7740 */    27,   28,    0,  144,   31,  144,   53,  144,  144,  144,
 /*  7750 */   144,  144,   39,  144,   41,  144,  144,   44,  144,  144,
 /*  7760 */   144,   48,   49,   50,   51,   52,   53,   54,   55,  144,
 /*  7770 */     8,  144,  144,  144,   32,  144,  144,   35,  144,   37,
 /*  7780 */    38,   39,   20,   21,  144,  144,   73,  144,   26,   27,
 /*  7790 */    28,    0,  144,   31,  144,   53,  144,  144,   36,  144,
 /*  7800 */   144,  144,  144,   41,  144,  144,   44,  144,  144,  144,
 /*  7810 */    48,   49,   50,   51,   52,  144,   54,   55,  144,    8,
 /*  7820 */   144,  144,  144,   32,  144,  144,   35,  144,   37,   38,
 /*  7830 */    39,   20,   21,  144,  144,   73,  144,   26,   27,   28,
 /*  7840 */     0,  144,   31,  144,   53,  144,  144,   36,  144,  144,
 /*  7850 */   144,  144,   41,  144,  144,   44,  144,  144,  144,   48,
 /*  7860 */    49,   50,   51,   52,  144,   54,   55,  144,    8,  144,
 /*  7870 */   144,  144,   32,  144,  144,   35,  144,   37,   38,   39,
 /*  7880 */    20,   21,  144,  144,   73,  144,   26,   27,   28,  144,
 /*  7890 */   144,   31,  144,   53,  144,  144,   36,  144,  144,  144,
 /*  7900 */   144,   41,  144,  144,   44,    8,   46,  144,   48,   49,
 /*  7910 */    50,   51,   52,  144,  144,  144,  144,   20,   21,  144,
 /*  7920 */   144,  144,  144,   26,   27,   28,  144,  144,   31,  144,
 /*  7930 */   144,  144,  144,   73,  144,  144,  144,  144,   41,  144,
 /*  7940 */   144,   44,    8,  144,  144,   48,   49,   50,   51,   52,
 /*  7950 */   144,   54,   55,  144,   20,   21,  144,  144,  144,  144,
 /*  7960 */    26,   27,   28,  144,  144,   31,  144,  144,  144,  144,
 /*  7970 */    73,  144,  144,  144,  144,   41,   42,  144,   44,    8,
 /*  7980 */   144,  144,   48,   49,   50,   51,   52,  144,  144,  144,
 /*  7990 */   144,   20,   21,  144,  144,  144,  144,   26,   27,   28,
 /*  8000 */   144,  144,   31,  144,  144,  144,  144,   73,  144,  144,
 /*  8010 */   144,  144,   41,  144,  144,   44,    8,   46,  144,   48,
 /*  8020 */    49,   50,   51,   52,  144,  144,  144,  144,   20,   21,
 /*  8030 */   144,  144,  144,  144,   26,   27,   28,  144,   30,   31,
 /*  8040 */   144,  144,  144,  144,   73,  144,  144,  144,  144,   41,
 /*  8050 */   144,  144,   44,    8,  144,  144,   48,   49,   50,   51,
 /*  8060 */    52,  144,  144,  144,  144,   20,   21,  144,  144,  144,
 /*  8070 */   144,   26,   27,   28,  144,  144,   31,  144,  144,  144,
 /*  8080 */   144,   73,  144,  144,  144,  144,   41,  144,  144,   44,
 /*  8090 */     8,  144,  144,   48,   49,   50,   51,   52,  144,  144,
 /*  8100 */   144,  144,   20,   21,  144,  144,  144,  144,   26,   27,
 /*  8110 */    28,  144,  144,   31,  144,  144,  144,  144,   73,  144,
 /*  8120 */   144,  144,  144,   41,  144,  144,   44,    8,  144,  144,
 /*  8130 */    48,   49,   50,   51,   52,  144,  144,  144,  144,   20,
 /*  8140 */    21,  144,  144,  144,  144,   26,   27,   28,  144,  144,
 /*  8150 */    31,  144,  144,  144,  144,   73,   84,  144,  144,  144,
 /*  8160 */    41,  144,  144,   44,  144,  144,  144,   48,   49,   50,
 /*  8170 */    51,   52,  144,  144,  144,  144,  144,  105,  106,  107,
 /*  8180 */   108,    0,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  8190 */   118,    0,   73,  144,  144,  144,  124,  125,  144,  144,
 /*  8200 */   144,  144,  144,  144,  144,  144,  144,  135,  136,  144,
 /*  8210 */   144,  144,  144,   32,    0,  144,   35,  144,   37,   38,
 /*  8220 */    39,  144,  144,   32,    0,  144,   35,  144,   37,   38,
 /*  8230 */    39,  144,  144,  144,   53,  144,  144,  144,  144,  144,
 /*  8240 */   144,  144,  144,  144,   53,  144,   32,    0,  144,   35,
 /*  8250 */   144,   37,   38,   39,  144,  144,   32,    0,  144,   35,
 /*  8260 */   144,   37,   38,   39,  144,  144,  144,   53,  144,  144,
 /*  8270 */   144,  144,  144,  144,  144,  144,  144,   53,  144,   32,
 /*  8280 */     0,  144,   35,  144,   37,   38,   39,  144,  144,   32,
 /*  8290 */   144,  144,   35,  144,   37,   38,   39,  144,  144,  144,
 /*  8300 */    53,  144,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  8310 */    53,  144,   32,  144,  144,   35,  144,   37,   38,   39,
 /*  8320 */   144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
 /*  8330 */   144,  144,  144,   53,
};
#define YY_SHIFT_USE_DFLT (-10)
#define YY_SHIFT_COUNT (353)
#define YY_SHIFT_MIN   (-9)
#define YY_SHIFT_MAX   (8280)
static const short yy_shift_ofst[] = {
 /*     0 */  8280, 6214, 6159, 6709, 6709, 6709, 6709, 6709, 6709, 6709,
 /*    10 */  6709, 8257, 7664, 7713, 7811, 7897, 7860, 7860, 7860, 7860,
 /*    20 */  7860, 8008, 4993, 7971, 8082, 8082, 8082, 8082, 8119, 8082,
 /*    30 */  8082, 8082, 8082,   76, 7934, 8082, 8082, 8082, 8082, 8082,
 /*    40 */  8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082,
 /*    50 */  8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082,
 /*    60 */  8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082,
 /*    70 */  8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082, 8082,
 /*    80 */  8082, 8082, 8082,  443,    5,  984, 6104,  405,  947,  947,
 /*    90 */   947,  947,  947,  947,  937,  937,  918,  913,  351,  280,
 /*   100 */   209,  138,   67,   -4, 2836, 2765, 2694, 2623, 2552, 2481,
 /*   110 */  2410, 2339, 2268, 2197, 2126, 2055, 1984, 1913, 1842, 1771,
 /*   120 */  1700, 1629, 1558, 1487, 1416, 1345, 1274, 1203, 1132, 1061,
 /*   130 */   990,  919,  848,  777,  706,  635,  564,  493,  422, 3049,
 /*   140 */  2978, 2907, 3247, 3184, 3121, 4937, 4881, 4825, 4769, 4713,
 /*   150 */  4657, 4601, 4545, 4489, 4433, 4377, 4321, 4265, 4209, 4153,
 /*   160 */  4097, 4041, 3985, 3929, 3873, 3817, 3761, 3705, 3649, 3593,
 /*   170 */  3537, 3481, 3425, 3369, 3313, 5048, 6049, 5994, 5939, 5884,
 /*   180 */  5829, 5774, 6654, 6599, 6544, 6489, 6434, 6379, 6324, 6269,
 /*   190 */  7174, 7146, 7118, 7090, 7062, 7034, 7006, 6978, 6950, 6922,
 /*   200 */  6894, 6866, 6838, 6809, 6781, 7286, 7258, 7230, 7202, 7570,
 /*   210 */  7542, 7514, 7486, 7443, 7400, 7372, 7343, 7315, 7598, 7615,
 /*   220 */  7762, 8045, 3159, 8247, 8224, 8214, 8191, 8181, 7840, 7791,
 /*   230 */  7742, 7693, 7644, 5753, 5091, 3007, 2936,  170,  372,  301,
 /*   240 */   230,  163,   91,  378,   99,  307,  236,  165,   94,   25,
 /*   250 */    23,  596,  393,  594,  662,  528,  525,  655,  310,  592,
 /*   260 */   591,  584,  523,  521,  457,  454,  386,  315,  383,  191,
 /*   270 */   312,   28,  244,  520,  334,  263,  192,  513,  450,  127,
 /*   280 */   882,  875,  883,  878,  869,  877,  876,  852,  814,  855,
 /*   290 */   843,  812,  849,  813,  803,  784,  811,  810,  809,  808,
 /*   300 */   790,  744,  719,  778,  771,  740,  739,  738,  737,  736,
 /*   310 */   735,  734,  713,  708,  701,  664,  663,  661,  660,  659,
 /*   320 */   652,  657,  654,  639,  626,  602,  589,  577,  583,  586,
 /*   330 */   563,  580,  568,  506,  530,  527,  497,  297,  440,  426,
 /*   340 */   412,  367,  284,  239,  159,  156,  147,   95,   97,   68,
 /*   350 */    62,   27,   -2,   -9,
};
#define YY_REDUCE_USE_DFLT (-80)
#define YY_REDUCE_COUNT (97)
#define YY_REDUCE_MIN   (-79)
#define YY_REDUCE_MAX   (8072)
static const short yy_reduce_ofst[] = {
 /*     0 */   403, 5634, 5565, 5505, 5436, 5376, 5307, 5247, 5178, 5118,
 /*    10 */  5049, 3072, 8072, 3212, 5061, 5130,  205,  134,   63,   -8,
 /*    20 */   -79, 3165,  -70,  276, 3284, 3270, 3241, 3238,  361, 3224,
 /*    30 */  3208, 3182, 3119,  154,  136, 1343, 1341, 1284, 1283, 1272,
 /*    40 */  1270, 1213, 1212, 1201, 1199, 1142, 1141, 1130, 1128, 1071,
 /*    50 */  1070, 1059, 1057, 1000,  999,  988,  986,  929,  928,  917,
 /*    60 */   915,  858,  857,  846,  844,  787,  786,  775,  773,  716,
 /*    70 */   715,  704,  702,  645,  644,  633,  631,  574,  562,  560,
 /*    80 */   503,  432,  136,  439,  369,  296,  941,  856,  931,  926,
 /*    90 */   888,  887,  885,  884,  879,  853,  835,  825,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*    10 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*    20 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*    30 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*    40 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*    50 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*    60 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*    70 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*    80 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*    90 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   100 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   110 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   120 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   130 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   140 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   150 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   160 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   170 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   180 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   190 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   200 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   210 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   220 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   230 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   240 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   250 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   260 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   270 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   280 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   290 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   300 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   310 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   320 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   330 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   340 */   536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
 /*   350 */   536,  536,  536,  536,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IFX",           "ELSE",          "ASSIGN",      
  "QMARK",         "COMMA",         "LOR",           "LAND",        
  "LNOT",          "EQ",            "LE",            "LT",          
  "GE",            "GT",            "NE",            "BITOR",       
  "BITXOR",        "BITAND",        "LSHIFT",        "RSHIFT",      
  "PLUS",          "MINUS",         "DIVIDE",        "MULTIPLY",    
  "MOD",           "UNARY",         "BITNOT",        "LPAREN",      
  "LSQBRACKET",    "PERIOD",        "SEMICOLON",     "NAME",        
  "IMPORT",        "AS",            "COLON",         "FUNCTION",    
  "RPAREN",        "OBJECT",        "LBRACKET",      "VAR",         
  "RBRACKET",      "NUMBER",        "RSQBRACKET",    "SUBSCRIPT",   
  "KILLS",         "MEMBER",        "STRING",        "FUNCCALL",    
  "L2V",           "MAPSTRING",     "UNIT",          "SWITCH",      
  "LOCATION",      "CONST",         "INC",           "DEC",         
  "IADD",          "ISUB",          "IMUL",          "IDIV",        
  "IMOD",          "ILSH",          "IRSH",          "IBND",        
  "IBOR",          "IBXR",          "IF",            "WHILE",       
  "FOR",           "FOREACH",       "CONTINUE",      "BREAK",       
  "RETURN",        "CONDITIONNAME",  "ACTIONNAME",    "error",       
  "nt",            "program",       "chunks",        "chunk",       
  "import_chunk",  "fdef_chunk",    "fdecl_chunk",   "object_chunk",
  "vdef_stmt",     "vdefAssign_global_stmt",  "cdef_global_stmt",  "blockStmt",   
  "dottedName",    "fdef_rettypes",  "exprList_nonEmpty",  "fdef_header", 
  "typedNameList",  "stmt",          "object_header",  "object_body", 
  "nameList_nonEmpty",  "method_header",  "nameList",      "method_chunk",
  "bodyStmt",      "return_stmt",   "lbracket",      "rbracket",    
  "bodyStmtList",  "vdefAssign_stmt",  "cdef_stmt",     "assign_stmt", 
  "funcexpr",      "actionStmt",    "if_stmt",       "while_stmt",  
  "for_stmt",      "foreach_stmt",  "continue_stmt",  "break_stmt",  
  "numList_nonEmpty",  "typedName",     "expr",          "typedNameList_nonEmpty",
  "exprList",      "fArgs_nonEmpty",  "fArgs",         "commaSkippable",
  "lvalue",        "lvalueList_nonEmpty",  "if_start",      "if_header",   
  "if_block",      "elif_start",    "elif_header",   "else_header", 
  "while_start",   "while_header",  "for_opener",    "for_init_stmt_nonEmpty",
  "for_init_stmt",  "for_action_stmt_nonEmpty",  "for_action_stmt",  "for_header1", 
  "for_header2",   "for_header",    "foreach_opener",  "foreach_header",
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= chunks",
 /*   1 */ "chunks ::=",
 /*   2 */ "chunks ::= chunks chunk",
 /*   3 */ "chunk ::= import_chunk SEMICOLON",
 /*   4 */ "chunk ::= fdef_chunk",
 /*   5 */ "chunk ::= fdecl_chunk",
 /*   6 */ "chunk ::= object_chunk",
 /*   7 */ "chunk ::= vdef_stmt SEMICOLON",
 /*   8 */ "chunk ::= vdefAssign_global_stmt SEMICOLON",
 /*   9 */ "chunk ::= cdef_global_stmt SEMICOLON",
 /*  10 */ "chunk ::= blockStmt",
 /*  11 */ "dottedName ::= NAME",
 /*  12 */ "dottedName ::= dottedName PERIOD NAME",
 /*  13 */ "import_chunk ::= IMPORT dottedName AS NAME",
 /*  14 */ "import_chunk ::= IMPORT dottedName",
 /*  15 */ "fdef_rettypes ::=",
 /*  16 */ "fdef_rettypes ::= COLON exprList_nonEmpty",
 /*  17 */ "fdef_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes",
 /*  18 */ "fdef_chunk ::= fdef_header stmt",
 /*  19 */ "fdecl_chunk ::= FUNCTION NAME LPAREN typedNameList RPAREN SEMICOLON",
 /*  20 */ "object_header ::= OBJECT NAME LBRACKET",
 /*  21 */ "object_body ::= object_header",
 /*  22 */ "object_body ::= object_body VAR nameList_nonEmpty SEMICOLON",
 /*  23 */ "method_header ::= FUNCTION NAME LPAREN nameList RPAREN",
 /*  24 */ "method_chunk ::= method_header stmt",
 /*  25 */ "object_body ::= object_body method_chunk",
 /*  26 */ "object_chunk ::= object_body RBRACKET SEMICOLON",
 /*  27 */ "stmt ::= error SEMICOLON",
 /*  28 */ "stmt ::= bodyStmt",
 /*  29 */ "stmt ::= return_stmt SEMICOLON",
 /*  30 */ "lbracket ::= LBRACKET",
 /*  31 */ "rbracket ::= RBRACKET",
 /*  32 */ "blockStmt ::= lbracket RBRACKET",
 /*  33 */ "blockStmt ::= lbracket return_stmt SEMICOLON rbracket",
 /*  34 */ "blockStmt ::= lbracket bodyStmtList rbracket",
 /*  35 */ "blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket",
 /*  36 */ "blockStmt ::= lbracket error RBRACKET",
 /*  37 */ "bodyStmt ::= blockStmt",
 /*  38 */ "bodyStmt ::= SEMICOLON",
 /*  39 */ "bodyStmt ::= vdef_stmt SEMICOLON",
 /*  40 */ "bodyStmt ::= vdefAssign_stmt SEMICOLON",
 /*  41 */ "bodyStmt ::= cdef_stmt SEMICOLON",
 /*  42 */ "bodyStmt ::= assign_stmt SEMICOLON",
 /*  43 */ "bodyStmt ::= funcexpr SEMICOLON",
 /*  44 */ "bodyStmt ::= actionStmt",
 /*  45 */ "bodyStmt ::= if_stmt",
 /*  46 */ "bodyStmt ::= while_stmt",
 /*  47 */ "bodyStmt ::= for_stmt",
 /*  48 */ "bodyStmt ::= foreach_stmt",
 /*  49 */ "bodyStmt ::= continue_stmt SEMICOLON",
 /*  50 */ "bodyStmt ::= break_stmt SEMICOLON",
 /*  51 */ "bodyStmtList ::= error",
 /*  52 */ "bodyStmtList ::= bodyStmt",
 /*  53 */ "bodyStmtList ::= bodyStmtList bodyStmt",
 /*  54 */ "bodyStmtList ::= bodyStmtList error",
 /*  55 */ "numList_nonEmpty ::= NUMBER",
 /*  56 */ "numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER",
 /*  57 */ "typedName ::= NAME",
 /*  58 */ "typedName ::= NAME COLON expr",
 /*  59 */ "typedNameList_nonEmpty ::= typedName",
 /*  60 */ "typedNameList_nonEmpty ::= typedName COMMA typedNameList_nonEmpty",
 /*  61 */ "typedNameList ::=",
 /*  62 */ "typedNameList ::= typedNameList_nonEmpty",
 /*  63 */ "nameList_nonEmpty ::= NAME",
 /*  64 */ "nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME",
 /*  65 */ "nameList ::=",
 /*  66 */ "nameList ::= nameList_nonEmpty",
 /*  67 */ "exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET",
 /*  68 */ "expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET",
 /*  69 */ "exprList_nonEmpty ::= expr",
 /*  70 */ "exprList_nonEmpty ::= exprList_nonEmpty COMMA expr",
 /*  71 */ "exprList ::=",
 /*  72 */ "exprList ::= exprList_nonEmpty",
 /*  73 */ "expr ::= NUMBER",
 /*  74 */ "expr ::= KILLS",
 /*  75 */ "expr ::= NAME",
 /*  76 */ "expr ::= expr PERIOD NAME",
 /*  77 */ "expr ::= expr LSQBRACKET expr RSQBRACKET",
 /*  78 */ "fArgs_nonEmpty ::= expr",
 /*  79 */ "fArgs_nonEmpty ::= STRING",
 /*  80 */ "fArgs_nonEmpty ::= NAME ASSIGN expr",
 /*  81 */ "fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArgs_nonEmpty",
 /*  82 */ "fArgs ::=",
 /*  83 */ "fArgs ::= fArgs_nonEmpty",
 /*  84 */ "funcexpr ::= NAME LPAREN fArgs RPAREN",
 /*  85 */ "funcexpr ::= expr LPAREN fArgs RPAREN",
 /*  86 */ "expr ::= funcexpr",
 /*  87 */ "expr ::= LPAREN expr RPAREN",
 /*  88 */ "commaSkippable ::= COMMA",
 /*  89 */ "commaSkippable ::=",
 /*  90 */ "expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET",
 /*  91 */ "expr ::= L2V LPAREN expr RPAREN",
 /*  92 */ "expr ::= MAPSTRING LPAREN STRING RPAREN",
 /*  93 */ "expr ::= UNIT LPAREN STRING RPAREN",
 /*  94 */ "expr ::= SWITCH LPAREN STRING RPAREN",
 /*  95 */ "expr ::= LOCATION LPAREN STRING RPAREN",
 /*  96 */ "expr ::= expr QMARK expr COLON expr",
 /*  97 */ "expr ::= expr PLUS expr",
 /*  98 */ "expr ::= expr MINUS expr",
 /*  99 */ "expr ::= expr MULTIPLY expr",
 /* 100 */ "expr ::= expr DIVIDE expr",
 /* 101 */ "expr ::= expr MOD expr",
 /* 102 */ "expr ::= expr LSHIFT expr",
 /* 103 */ "expr ::= expr RSHIFT expr",
 /* 104 */ "expr ::= expr BITAND expr",
 /* 105 */ "expr ::= expr BITOR expr",
 /* 106 */ "expr ::= expr BITXOR expr",
 /* 107 */ "expr ::= PLUS expr",
 /* 108 */ "expr ::= MINUS expr",
 /* 109 */ "expr ::= BITNOT expr",
 /* 110 */ "expr ::= expr EQ expr",
 /* 111 */ "expr ::= expr NE expr",
 /* 112 */ "expr ::= expr LE expr",
 /* 113 */ "expr ::= expr LT expr",
 /* 114 */ "expr ::= expr GE expr",
 /* 115 */ "expr ::= expr GT expr",
 /* 116 */ "expr ::= expr LAND expr",
 /* 117 */ "expr ::= expr LOR expr",
 /* 118 */ "expr ::= LNOT expr",
 /* 119 */ "vdef_stmt ::= VAR nameList_nonEmpty",
 /* 120 */ "vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 121 */ "vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 122 */ "cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 123 */ "cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 124 */ "lvalue ::= NAME",
 /* 125 */ "lvalue ::= expr LSQBRACKET expr RSQBRACKET",
 /* 126 */ "lvalue ::= expr PERIOD NAME",
 /* 127 */ "lvalueList_nonEmpty ::= lvalue",
 /* 128 */ "lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue",
 /* 129 */ "assign_stmt ::= lvalue ASSIGN expr",
 /* 130 */ "assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 131 */ "assign_stmt ::= INC expr",
 /* 132 */ "assign_stmt ::= expr INC",
 /* 133 */ "assign_stmt ::= DEC expr",
 /* 134 */ "assign_stmt ::= expr DEC",
 /* 135 */ "assign_stmt ::= lvalue IADD expr",
 /* 136 */ "assign_stmt ::= lvalue ISUB expr",
 /* 137 */ "assign_stmt ::= lvalue IMUL expr",
 /* 138 */ "assign_stmt ::= lvalue IDIV expr",
 /* 139 */ "assign_stmt ::= lvalue IMOD expr",
 /* 140 */ "assign_stmt ::= lvalue ILSH expr",
 /* 141 */ "assign_stmt ::= lvalue IRSH expr",
 /* 142 */ "assign_stmt ::= lvalue IBND expr",
 /* 143 */ "assign_stmt ::= lvalue IBOR expr",
 /* 144 */ "assign_stmt ::= lvalue IBXR expr",
 /* 145 */ "if_start ::= IF",
 /* 146 */ "if_header ::= if_start LPAREN expr RPAREN",
 /* 147 */ "if_block ::= if_header stmt",
 /* 148 */ "elif_start ::= ELSE IF",
 /* 149 */ "elif_header ::= elif_start LPAREN expr RPAREN",
 /* 150 */ "if_block ::= if_block elif_header stmt",
 /* 151 */ "else_header ::= ELSE",
 /* 152 */ "if_stmt ::= if_block",
 /* 153 */ "if_stmt ::= if_block else_header stmt",
 /* 154 */ "while_start ::= WHILE",
 /* 155 */ "while_header ::= while_start LPAREN expr RPAREN",
 /* 156 */ "while_stmt ::= while_header stmt",
 /* 157 */ "for_opener ::= FOR LPAREN",
 /* 158 */ "for_init_stmt_nonEmpty ::= vdef_stmt",
 /* 159 */ "for_init_stmt_nonEmpty ::= vdefAssign_stmt",
 /* 160 */ "for_init_stmt_nonEmpty ::= cdef_stmt",
 /* 161 */ "for_init_stmt_nonEmpty ::= assign_stmt",
 /* 162 */ "for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty",
 /* 163 */ "for_init_stmt ::= for_init_stmt_nonEmpty",
 /* 164 */ "for_init_stmt ::=",
 /* 165 */ "for_action_stmt_nonEmpty ::= assign_stmt",
 /* 166 */ "for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty",
 /* 167 */ "for_action_stmt ::=",
 /* 168 */ "for_action_stmt ::= for_action_stmt_nonEmpty",
 /* 169 */ "for_header1 ::= for_opener for_init_stmt SEMICOLON",
 /* 170 */ "for_header2 ::= for_header1 expr SEMICOLON",
 /* 171 */ "for_header ::= for_header2 for_action_stmt RPAREN",
 /* 172 */ "for_stmt ::= for_header stmt",
 /* 173 */ "foreach_opener ::= FOREACH LPAREN",
 /* 174 */ "foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty RPAREN",
 /* 175 */ "foreach_stmt ::= foreach_header stmt",
 /* 176 */ "continue_stmt ::= CONTINUE",
 /* 177 */ "break_stmt ::= BREAK",
 /* 178 */ "return_stmt ::= RETURN exprList",
 /* 179 */ "expr ::= CONDITIONNAME LPAREN fArgs RPAREN",
 /* 180 */ "expr ::= KILLS LPAREN fArgs RPAREN",
 /* 181 */ "actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN SEMICOLON",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    case 76: /* nt */
{
 delete (yypminor->yy0); 
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 77, 1 },
  { 78, 0 },
  { 78, 2 },
  { 79, 2 },
  { 79, 1 },
  { 79, 1 },
  { 79, 1 },
  { 79, 2 },
  { 79, 2 },
  { 79, 2 },
  { 79, 1 },
  { 88, 1 },
  { 88, 3 },
  { 80, 4 },
  { 80, 2 },
  { 89, 0 },
  { 89, 2 },
  { 91, 6 },
  { 81, 2 },
  { 82, 6 },
  { 94, 3 },
  { 95, 1 },
  { 95, 4 },
  { 97, 5 },
  { 99, 2 },
  { 95, 2 },
  { 83, 3 },
  { 93, 2 },
  { 93, 1 },
  { 93, 2 },
  { 102, 1 },
  { 103, 1 },
  { 87, 2 },
  { 87, 4 },
  { 87, 3 },
  { 87, 5 },
  { 87, 3 },
  { 100, 1 },
  { 100, 1 },
  { 100, 2 },
  { 100, 2 },
  { 100, 2 },
  { 100, 2 },
  { 100, 2 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 1 },
  { 100, 2 },
  { 100, 2 },
  { 104, 1 },
  { 104, 1 },
  { 104, 2 },
  { 104, 2 },
  { 116, 1 },
  { 116, 3 },
  { 117, 1 },
  { 117, 3 },
  { 119, 1 },
  { 119, 3 },
  { 92, 0 },
  { 92, 1 },
  { 96, 1 },
  { 96, 3 },
  { 98, 0 },
  { 98, 1 },
  { 90, 6 },
  { 118, 6 },
  { 90, 1 },
  { 90, 3 },
  { 120, 0 },
  { 120, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 3 },
  { 118, 4 },
  { 121, 1 },
  { 121, 1 },
  { 121, 3 },
  { 121, 3 },
  { 122, 0 },
  { 122, 1 },
  { 108, 4 },
  { 108, 4 },
  { 118, 1 },
  { 118, 3 },
  { 123, 1 },
  { 123, 0 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 5 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 2 },
  { 118, 2 },
  { 118, 2 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 2 },
  { 84, 2 },
  { 105, 4 },
  { 85, 4 },
  { 106, 4 },
  { 86, 4 },
  { 124, 1 },
  { 124, 4 },
  { 124, 3 },
  { 125, 1 },
  { 125, 3 },
  { 107, 3 },
  { 107, 3 },
  { 107, 2 },
  { 107, 2 },
  { 107, 2 },
  { 107, 2 },
  { 107, 3 },
  { 107, 3 },
  { 107, 3 },
  { 107, 3 },
  { 107, 3 },
  { 107, 3 },
  { 107, 3 },
  { 107, 3 },
  { 107, 3 },
  { 107, 3 },
  { 126, 1 },
  { 127, 4 },
  { 128, 2 },
  { 129, 2 },
  { 130, 4 },
  { 128, 3 },
  { 131, 1 },
  { 110, 1 },
  { 110, 3 },
  { 132, 1 },
  { 133, 4 },
  { 111, 2 },
  { 134, 2 },
  { 135, 1 },
  { 135, 1 },
  { 135, 1 },
  { 135, 1 },
  { 135, 3 },
  { 136, 1 },
  { 136, 0 },
  { 137, 1 },
  { 137, 3 },
  { 138, 0 },
  { 138, 1 },
  { 139, 3 },
  { 140, 3 },
  { 141, 3 },
  { 112, 2 },
  { 142, 2 },
  { 143, 5 },
  { 113, 2 },
  { 114, 1 },
  { 115, 1 },
  { 101, 2 },
  { 118, 4 },
  { 118, 4 },
  { 109, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 10: /* chunk ::= blockStmt */
{
    throw_error(48993, "Misplaced block statement");
}
        break;
      case 11: /* dottedName ::= NAME */
      case 16: /* fdef_rettypes ::= COLON exprList_nonEmpty */ yytestcase(yyruleno==16);
      case 55: /* numList_nonEmpty ::= NUMBER */ yytestcase(yyruleno==55);
      case 62: /* typedNameList ::= typedNameList_nonEmpty */ yytestcase(yyruleno==62);
      case 63: /* nameList_nonEmpty ::= NAME */ yytestcase(yyruleno==63);
      case 66: /* nameList ::= nameList_nonEmpty */ yytestcase(yyruleno==66);
      case 69: /* exprList_nonEmpty ::= expr */ yytestcase(yyruleno==69);
      case 72: /* exprList ::= exprList_nonEmpty */ yytestcase(yyruleno==72);
      case 73: /* expr ::= NUMBER */ yytestcase(yyruleno==73);
      case 78: /* fArgs_nonEmpty ::= expr */ yytestcase(yyruleno==78);
      case 79: /* fArgs_nonEmpty ::= STRING */ yytestcase(yyruleno==79);
      case 83: /* fArgs ::= fArgs_nonEmpty */ yytestcase(yyruleno==83);
      case 86: /* expr ::= funcexpr */ yytestcase(yyruleno==86);
      case 127: /* lvalueList_nonEmpty ::= lvalue */ yytestcase(yyruleno==127);
{ yygotominor.yy0 = yymsp[0].minor.yy0; }
        break;
      case 12: /* dottedName ::= dottedName PERIOD NAME */
{
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 13: /* import_chunk ::= IMPORT dottedName AS NAME */
{
    std::string impPath, impModname;
    impPathProcess(yymsp[-2].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(yymsp[0].minor.yy0->data)) {
        throw_error(6754, "Importing already-declared module " + yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << " as " << yymsp[0].minor.yy0->data << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 14: /* import_chunk ::= IMPORT dottedName */
{
    std::string impPath, impModname;
    impPathProcess(yymsp[0].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(impModname)) {
        throw_error(6754, "Importing already-declared module " + impModname, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 15: /* fdef_rettypes ::= */
      case 61: /* typedNameList ::= */ yytestcase(yyruleno==61);
{ yygotominor.yy0 = nullptr; }
        break;
      case 17: /* fdef_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes */
{
    // Preprocess yymsp[-4].minor.yy0
    funcNamePreprocess(yymsp[-4].minor.yy0->data);
    if(!ps->closure.defFunction(yymsp[-4].minor.yy0->data)) {
        throw_error(4495, "Duplicate function " + yymsp[-4].minor.yy0->data, yymsp[-4].minor.yy0->line);
    }

    ps->closure.pushScope();
    currentFunction = yymsp[-4].minor.yy0->data;

    // Register variables.
    // yymsp[-2].minor.yy0->data is a comma-seperated list of (yymsp[-4].minor.yy0, type). To pair names and types,
    // we store varname in odd loops and define variables on even loops.
    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = !!yymsp[0].minor.yy0;
    auto cursor = yymsp[-2].minor.yy0;

    while(cursor != nullptr) {
        auto typedNameToken = cursor->subToken[0];
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(196, ("Redeclaration of variable \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(7714, ("Redeclaration of typed constant \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
        cursor = cursor->subToken[1];
    }

    if (!isTypedFunction) ps->gen << "@EUDFunc" << std::endl;
    else {
        ps->gen << "@EUDTypedFunc([";
        writeStringList(ps->gen, types);
        if(!yymsp[0].minor.yy0) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }
    // Write argument names
    ps->gen << "def " << yymsp[-4].minor.yy0->data << "(";
    writeStringList(ps->gen, argnames);
    ps->gen << "):" << std::endl;

    ps->gen.indent();
    if(MAP_DEBUG) {
         ps->gen << "MDBG_PUSHF(\'" << currentFunction << "\', \'" << currentModule << "\')" << std::endl;
    }

    tmpIndex = 1;
    delete yymsp[-4].minor.yy0;
    delete yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
}
        break;
      case 18: /* fdef_chunk ::= fdef_header stmt */
{
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
}
        break;
      case 19: /* fdecl_chunk ::= FUNCTION NAME LPAREN typedNameList RPAREN SEMICOLON */
{
    // Preprocess yymsp[-4].minor.yy0
    funcNamePreprocess(yymsp[-4].minor.yy0->data);
    if(!ps->closure.declareFunction(yymsp[-4].minor.yy0->data)) {
        throw_error(72461, "Declaring function with non-function yymsp[-4].minor.yy0 " + yymsp[-4].minor.yy0->data, yymsp[-4].minor.yy0->line);
    }
}
        break;
      case 20: /* object_header ::= OBJECT NAME LBRACKET */
{
    ps->gen << "class " << yymsp[-1].minor.yy0->data << "(EUDStruct):\n";
    ps->gen.indent();

    funcNamePreprocess(yymsp[-1].minor.yy0->data);
    if(!ps->closure.declareFunction(yymsp[-1].minor.yy0->data)) {
        throw_error(8228, "Declaring object with non-function yymsp[-1].minor.yy0 " + yymsp[-1].minor.yy0->data, yymsp[-1].minor.yy0->line);
    }
    ps->closure.pushScope();

    yygotominor.yy0 = yymsp[-2].minor.yy0;
    yygotominor.yy0->data = yymsp[-1].minor.yy0->data;  // Add object yymsp[-1].minor.yy0
    delete yymsp[-1].minor.yy0;
}
        break;
      case 21: /* object_body ::= object_header */
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 22: /* object_body ::= object_body VAR nameList_nonEmpty SEMICOLON */
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
    yygotominor.yy0->line = yymsp[-1].minor.yy0->line;
    yygotominor.yy0->data += ", " + yymsp[-1].minor.yy0->data;
    delete yymsp[-1].minor.yy0;
}
        break;
      case 23: /* method_header ::= FUNCTION NAME LPAREN nameList RPAREN */
{
    // Method can't be called directly, so we shouldn't have to register it to closure.
    // duplicate method names should be checked at python-compile time.

    ps->gen << "@EUDMethod" << std::endl;

    ps->closure.pushScope();
    // Register variables.
    std::string _this = "this";  // This may be modified...?
    if(!ps->closure.defConstant(_this)) {
        throw_error(656, ("Redeclaration of variable \'this\'"), yymsp[-1].minor.yy0->line);
    }
    commaListIter(yymsp[-1].minor.yy0->data, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(2656, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-1].minor.yy0->line);
        }
    });

    // Add default argument 'self'
    if (yymsp[-1].minor.yy0->data.size() != 0) {
        ps->gen << "def " << yymsp[-3].minor.yy0->data << "(" << _this << ", " << yymsp[-1].minor.yy0->data << "):" << std::endl;
    } else {
        ps->gen << "def " << yymsp[-3].minor.yy0->data << "(" << _this << "):" << std::endl;
    }
    ps->gen.indent();

    currentFunction = yymsp[-3].minor.yy0->data;

    if(MAP_DEBUG) {
         ps->gen << "MDBG_PUSHF(\'" << currentFunction << "\', \'" << currentModule << "\')" << std::endl;
    }

    tmpIndex = 1;
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
        break;
      case 24: /* method_chunk ::= method_header stmt */
{
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
    yygotominor.yy0 = yymsp[-1].minor.yy0;
}
        break;
      case 25: /* object_body ::= object_body method_chunk */
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;
    delete yymsp[0].minor.yy0;
}
        break;
      case 26: /* object_chunk ::= object_body RBRACKET SEMICOLON */
{
    ps->gen << "_fields_ = [";
    bool isFirst = true;
    commaListIter(yymsp[-2].minor.yy0->data, [&](std::string& varname) {
        if (isFirst) {
            isFirst = false;
            return;
        }
        ps->gen << "'" << varname << "', ";
    });
    ps->gen << "]\n";
    ps->gen.unindent(true);
    ps->closure.popScope();
    delete yymsp[-2].minor.yy0;
}
        break;
      case 27: /* stmt ::= error SEMICOLON */
{ throw_error(6974, "Error while parsing statement", yymsp[0].minor.yy0->line); delete yymsp[0].minor.yy0; }
        break;
      case 30: /* lbracket ::= LBRACKET */
{ ps->closure.pushScope(); }
        break;
      case 31: /* rbracket ::= RBRACKET */
{ ps->closure.popScope(); }
        break;
      case 32: /* blockStmt ::= lbracket RBRACKET */
{
    ps->closure.popScope();
}
        break;
      case 36: /* blockStmt ::= lbracket error RBRACKET */
{
    throw_error(6298, "Block not terminated properly.", yymsp[0].minor.yy0->line);
    ps->closure.popScope();
    delete yymsp[0].minor.yy0;
}
        break;
      case 43: /* bodyStmt ::= funcexpr SEMICOLON */
{ ps->gen << yymsp[-1].minor.yy0->data << std::endl; }
        break;
      case 51: /* bodyStmtList ::= error */
      case 54: /* bodyStmtList ::= bodyStmtList error */ yytestcase(yyruleno==54);
{
    throw_error(8510, "Incomplete statement");
}
        break;
      case 56: /* numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER */
      case 64: /* nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME */ yytestcase(yyruleno==64);
      case 128: /* lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue */ yytestcase(yyruleno==128);
{ yygotominor.yy0 = commaConcat(yymsp[-2].minor.yy0, yymsp[0].minor.yy0); }
        break;
      case 57: /* typedName ::= NAME */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;  // Type is null.
}
        break;
      case 58: /* typedName ::= NAME COLON expr */
      case 60: /* typedNameList_nonEmpty ::= typedName COMMA typedNameList_nonEmpty */ yytestcase(yyruleno==60);
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;
}
        break;
      case 59: /* typedNameList_nonEmpty ::= typedName */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;
}
        break;
      case 65: /* nameList ::= */
      case 71: /* exprList ::= */ yytestcase(yyruleno==71);
      case 82: /* fArgs ::= */ yytestcase(yyruleno==82);
{ yygotominor.yy0 = genEmpty(); }
        break;
      case 67: /* exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = "_SRET(" + yymsp[-5].minor.yy0->data + ", [" + yymsp[-2].minor.yy0->data + "])";
    delete yymsp[-5].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
        break;
      case 68: /* expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = yymsp[-5].minor.yy0->data + "[" + yymsp[-2].minor.yy0->data + "]";
    delete yymsp[-5].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
        break;
      case 70: /* exprList_nonEmpty ::= exprList_nonEmpty COMMA expr */
{ yygotominor.yy0 = new Token((yymsp[-2].minor.yy0->data) + ", " + (yymsp[0].minor.yy0->data), yymsp[0].minor.yy0); delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 74: /* expr ::= KILLS */
{
    yymsp[0].minor.yy0->data = "4";
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 75: /* expr ::= NAME */
{
    checkIsRValue(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 76: /* expr ::= expr PERIOD NAME */
{
    yymsp[-2].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[0].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
        break;
      case 77: /* expr ::= expr LSQBRACKET expr RSQBRACKET */
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "[" + yymsp[-1].minor.yy0->data + "]";
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
        break;
      case 80: /* fArgs_nonEmpty ::= NAME ASSIGN expr */
{  // Keyword argument
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "=" + yymsp[0].minor.yy0->data;
    yymsp[0].minor.yy0->type = TOKEN_TEMP;
    yygotominor.yy0 = yymsp[0].minor.yy0;
    delete yymsp[-2].minor.yy0;
}
        break;
      case 81: /* fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArgs_nonEmpty */
{
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + ", " + yymsp[0].minor.yy0->data;
    yymsp[0].minor.yy0->type = TOKEN_TEMP;
    yygotominor.yy0 = yymsp[0].minor.yy0;
    delete yymsp[-2].minor.yy0;
}
        break;
      case 84: /* funcexpr ::= NAME LPAREN fArgs RPAREN */
{
    functionCalledInMultipleActions = true;

    // Preprocess yymsp[-3].minor.yy0
    funcNamePreprocess(yymsp[-3].minor.yy0->data);
    checkIsFunction(yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
        break;
      case 85: /* funcexpr ::= expr LPAREN fArgs RPAREN */
{
    functionCalledInMultipleActions = true;

    // If calling function imported from another module, add f_ prefix to function yymsp[-3].minor.yy0.
    static std::regex prefixedFuncNameRegex("^[a-z][_a-zA-Z0-9]*");
    std::string& nameStr = yymsp[-3].minor.yy0->data;
    if(std::count(nameStr.begin(), nameStr.end(), '.') == 1) {
        size_t p = nameStr.find('.');
        std::string moduleName = nameStr.substr(0, p);
        std::string funcName = nameStr.substr(p + 1);
        if (closure->isModule(moduleName) && std::regex_match(funcName, prefixedFuncNameRegex)) {
            funcNamePreprocess(funcName);
            yymsp[-3].minor.yy0->data = moduleName + '.' + funcName;
        }
    }

    // Preprocess yymsp[-3].minor.yy0
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
        break;
      case 87: /* expr ::= LPAREN expr RPAREN */
{
    yymsp[-1].minor.yy0->data = "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 90: /* expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = "_ARR(FlattenList([" + yymsp[-2].minor.yy0->data + "]))";
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
        break;
      case 91: /* expr ::= L2V LPAREN expr RPAREN */
{
    yymsp[-1].minor.yy0->data = "_L2V(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 92: /* expr ::= MAPSTRING LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "GetStringIndex(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 93: /* expr ::= UNIT LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "EncodeUnit(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 94: /* expr ::= SWITCH LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "EncodeSwitch(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 95: /* expr ::= LOCATION LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "GetLocationIndex(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 96: /* expr ::= expr QMARK expr COLON expr */
{
    std::stringstream ss;
    ss << "EUDTernary";
    applyNegativeOptimization(ss, yymsp[-4].minor.yy0);
    ss << "(" << yymsp[-2].minor.yy0->data << ")(" << yymsp[0].minor.yy0->data << ")";
    yymsp[0].minor.yy0->data = ss.str();
    delete yymsp[-4].minor.yy0;
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
}
        break;
      case 97: /* expr ::= expr PLUS expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "+",  yymsp[0].minor.yy0); }
        break;
      case 98: /* expr ::= expr MINUS expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "-",  yymsp[0].minor.yy0); }
        break;
      case 99: /* expr ::= expr MULTIPLY expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "*",  yymsp[0].minor.yy0); }
        break;
      case 100: /* expr ::= expr DIVIDE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "//", yymsp[0].minor.yy0); }
        break;
      case 101: /* expr ::= expr MOD expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "%",  yymsp[0].minor.yy0); }
        break;
      case 102: /* expr ::= expr LSHIFT expr */
{
    yymsp[0].minor.yy0->data = "_LSH(" + yymsp[-2].minor.yy0->data + "," + yymsp[0].minor.yy0->data + ")";
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
}
        break;
      case 103: /* expr ::= expr RSHIFT expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">>", yymsp[0].minor.yy0); }
        break;
      case 104: /* expr ::= expr BITAND expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "&",  yymsp[0].minor.yy0); }
        break;
      case 105: /* expr ::= expr BITOR expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "|",  yymsp[0].minor.yy0); }
        break;
      case 106: /* expr ::= expr BITXOR expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "^",  yymsp[0].minor.yy0); }
        break;
      case 107: /* expr ::= PLUS expr */
{ yymsp[0].minor.yy0->data = "+" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
        break;
      case 108: /* expr ::= MINUS expr */
{ yymsp[0].minor.yy0->data = "-" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
        break;
      case 109: /* expr ::= BITNOT expr */
{ yymsp[0].minor.yy0->data = "~" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
        break;
      case 110: /* expr ::= expr EQ expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "==", yymsp[0].minor.yy0); }
        break;
      case 111: /* expr ::= expr NE expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    yygotominor.yy0->type = TOKEN_NE;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;
    yygotominor.yy0->data = yymsp[-2].minor.yy0->data + " != " + yymsp[0].minor.yy0->data;
}
        break;
      case 112: /* expr ::= expr LE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "<=", yymsp[0].minor.yy0); }
        break;
      case 113: /* expr ::= expr LT expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "<",  yymsp[0].minor.yy0); }
        break;
      case 114: /* expr ::= expr GE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">=", yymsp[0].minor.yy0); }
        break;
      case 115: /* expr ::= expr GT expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">" , yymsp[0].minor.yy0); }
        break;
      case 116: /* expr ::= expr LAND expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yygotominor.yy0->type = TOKEN_LAND;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCAnd()";
    shortCircuitCondListGetter(ss, yygotominor.yy0, TOKEN_LAND);
    ss << "()";
    yygotominor.yy0->data = ss.str();
}
        break;
      case 117: /* expr ::= expr LOR expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yygotominor.yy0->type = TOKEN_LOR;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCOr()";
    shortCircuitCondListGetter(ss, yygotominor.yy0, TOKEN_LOR);
    ss << "()";
    yygotominor.yy0->data = ss.str();
}
        break;
      case 118: /* expr ::= LNOT expr */
{
    if(yymsp[0].minor.yy0->type == TOKEN_LNOT) {
        yygotominor.yy0 = yymsp[0].minor.yy0->subToken[0];
        yymsp[0].minor.yy0->subToken[0] = nullptr;
        delete yymsp[0].minor.yy0;
    }
    else {
        yygotominor.yy0 = genEmpty();
        yygotominor.yy0->line = yymsp[0].minor.yy0->line;
        yygotominor.yy0->type = TOKEN_LNOT;
        yygotominor.yy0->data = "EUDNot(" + yymsp[0].minor.yy0->data + ")";
        yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    }
}
        break;
      case 119: /* vdef_stmt ::= VAR nameList_nonEmpty */
{
    std::string& s = yymsp[0].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"), yymsp[0].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
    }
    else {
        ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    }

    delete yymsp[0].minor.yy0;
}
        break;
      case 120: /* vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
        ps->gen << s << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    }
    else {
        ps->gen << s << " = _MVAR([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 121: /* vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    ps->gen << "_IGVA([" << s << "], lambda: [" << yymsp[0].minor.yy0->data << "])" << std::endl;

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 122: /* cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = " << yymsp[0].minor.yy0->data << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 123: /* cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = _CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], 1)[0]" << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable(_CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], " << nameCount << "))" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 124: /* lvalue ::= NAME */
{
    checkIsVariable(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 125: /* lvalue ::= expr LSQBRACKET expr RSQBRACKET */
{
    checkIsConstant(yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    yymsp[-1].minor.yy0->data = "_ARRW(" + yymsp[-3].minor.yy0->data + ", " + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
    delete yymsp[-3].minor.yy0;
}
        break;
      case 126: /* lvalue ::= expr PERIOD NAME */
{
    checkIsConstant(yymsp[-2].minor.yy0->data, yymsp[-2].minor.yy0->line);
    yymsp[0].minor.yy0->data = "_ATTW(" + yymsp[-2].minor.yy0->data + ", '" + yymsp[0].minor.yy0->data + "')";
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
    delete yymsp[-2].minor.yy0;
}
        break;
      case 129: /* assign_stmt ::= lvalue ASSIGN expr */
{
    ps->gen << yymsp[-2].minor.yy0->data << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 130: /* assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty */
{
    ps->gen << "_SV([" << yymsp[-2].minor.yy0->data << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 131: /* assign_stmt ::= INC expr */
{ ps->gen << yymsp[0].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[0].minor.yy0; }
        break;
      case 132: /* assign_stmt ::= expr INC */
{ ps->gen << yymsp[-1].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[-1].minor.yy0; }
        break;
      case 133: /* assign_stmt ::= DEC expr */
{ ps->gen << yymsp[0].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[0].minor.yy0; }
        break;
      case 134: /* assign_stmt ::= expr DEC */
{ ps->gen << yymsp[-1].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[-1].minor.yy0; }
        break;
      case 135: /* assign_stmt ::= lvalue IADD expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__iadd__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 136: /* assign_stmt ::= lvalue ISUB expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__isub__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 137: /* assign_stmt ::= lvalue IMUL expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__imul__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 138: /* assign_stmt ::= lvalue IDIV expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ifloordiv__("  << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 139: /* assign_stmt ::= lvalue IMOD expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__imod__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 140: /* assign_stmt ::= lvalue ILSH expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ilshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 141: /* assign_stmt ::= lvalue IRSH expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__irshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 142: /* assign_stmt ::= lvalue IBND expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__iand__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 143: /* assign_stmt ::= lvalue IBOR expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ior__("        << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 144: /* assign_stmt ::= lvalue IBXR expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ixor__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 145: /* if_start ::= IF */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDIf()" << std::endl;
}
        break;
      case 146: /* if_header ::= if_start LPAREN expr RPAREN */
      case 149: /* elif_header ::= elif_start LPAREN expr RPAREN */ yytestcase(yyruleno==149);
      case 155: /* while_header ::= while_start LPAREN expr RPAREN */ yytestcase(yyruleno==155);
{
    writeCsOpener(*pGen, yymsp[-3].minor.yy0, yymsp[-1].minor.yy0);
    ps->gen.indent();
    delete yymsp[-3].minor.yy0; delete yymsp[-1].minor.yy0;
}
        break;
      case 148: /* elif_start ::= ELSE IF */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen.unindent(false);
    ps->gen << yygotominor.yy0->data << " = EUDElseIf()" << std::endl;
}
        break;
      case 151: /* else_header ::= ELSE */
{
    ps->gen.unindent(false);
    ps->gen << "if EUDElse()():" << std::endl;
    ps->gen.indent();
}
        break;
      case 152: /* if_stmt ::= if_block */
      case 153: /* if_stmt ::= if_block else_header stmt */ yytestcase(yyruleno==153);
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
}
        break;
      case 154: /* while_start ::= WHILE */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 156: /* while_stmt ::= while_header stmt */
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
}
        break;
      case 157: /* for_opener ::= FOR LPAREN */
      case 173: /* foreach_opener ::= FOREACH LPAREN */ yytestcase(yyruleno==173);
{
    ps->closure.pushScope();
}
        break;
      case 169: /* for_header1 ::= for_opener for_init_stmt SEMICOLON */
{
    // opening for expr
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 170: /* for_header2 ::= for_header1 expr SEMICOLON */
{
    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0; delete yymsp[-1].minor.yy0;

    // Opening for assign_statement
    yygotominor.yy0 = genTemp(yymsp[-1].minor.yy0);
    ps->gen << "def " << yygotominor.yy0->data <<"():" << std::endl;
    ps->gen.indent();
}
        break;
      case 171: /* for_header ::= for_header2 for_action_stmt RPAREN */
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    ps->gen.unindent(false);
}
        break;
      case 172: /* for_stmt ::= for_header stmt */
{
    ps->gen << "EUDSetContinuePoint()" << std::endl;
    ps->gen << yymsp[-1].minor.yy0->data << "()" << std::endl;
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
    ps->closure.popScope();
}
        break;
      case 174: /* foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty RPAREN */
{
    commaListIter(yymsp[-3].minor.yy0->data, [&](std::string& s) {
        ps->closure.defVariable(s);
    });
    ps->gen << "for " << yymsp[-3].minor.yy0->data << " in " << yymsp[-1].minor.yy0->data << ":" << std::endl;
    ps->gen.indent();
}
        break;
      case 175: /* foreach_stmt ::= foreach_header stmt */
{
    ps->gen.unindent(true);
    ps->closure.popScope();
}
        break;
      case 176: /* continue_stmt ::= CONTINUE */
{
    ps->gen << "EUDContinue()" << std::endl;
}
        break;
      case 177: /* break_stmt ::= BREAK */
{
    ps->gen << "EUDBreak()" << std::endl;
}
        break;
      case 178: /* return_stmt ::= RETURN exprList */
{
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen << "EUDReturn(" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 179: /* expr ::= CONDITIONNAME LPAREN fArgs RPAREN */
      case 180: /* expr ::= KILLS LPAREN fArgs RPAREN */ yytestcase(yyruleno==180);
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "(" + yymsp[-1].minor.yy0->data + ")";
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
        break;
      case 181: /* actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN SEMICOLON */
{
    ps->gen << "DoActions(" << yymsp[-4].minor.yy0->data << "(" << yymsp[-2].minor.yy0->data << "))" << std::endl;
    delete yymsp[-4].minor.yy0; delete yymsp[-2].minor.yy0;
}
        break;
      default:
      /* (0) program ::= chunks */ yytestcase(yyruleno==0);
      /* (1) chunks ::= */ yytestcase(yyruleno==1);
      /* (2) chunks ::= chunks chunk */ yytestcase(yyruleno==2);
      /* (3) chunk ::= import_chunk SEMICOLON */ yytestcase(yyruleno==3);
      /* (4) chunk ::= fdef_chunk */ yytestcase(yyruleno==4);
      /* (5) chunk ::= fdecl_chunk */ yytestcase(yyruleno==5);
      /* (6) chunk ::= object_chunk */ yytestcase(yyruleno==6);
      /* (7) chunk ::= vdef_stmt SEMICOLON */ yytestcase(yyruleno==7);
      /* (8) chunk ::= vdefAssign_global_stmt SEMICOLON */ yytestcase(yyruleno==8);
      /* (9) chunk ::= cdef_global_stmt SEMICOLON */ yytestcase(yyruleno==9);
      /* (28) stmt ::= bodyStmt */ yytestcase(yyruleno==28);
      /* (29) stmt ::= return_stmt SEMICOLON */ yytestcase(yyruleno==29);
      /* (33) blockStmt ::= lbracket return_stmt SEMICOLON rbracket */ yytestcase(yyruleno==33);
      /* (34) blockStmt ::= lbracket bodyStmtList rbracket */ yytestcase(yyruleno==34);
      /* (35) blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket */ yytestcase(yyruleno==35);
      /* (37) bodyStmt ::= blockStmt */ yytestcase(yyruleno==37);
      /* (38) bodyStmt ::= SEMICOLON */ yytestcase(yyruleno==38);
      /* (39) bodyStmt ::= vdef_stmt SEMICOLON */ yytestcase(yyruleno==39);
      /* (40) bodyStmt ::= vdefAssign_stmt SEMICOLON */ yytestcase(yyruleno==40);
      /* (41) bodyStmt ::= cdef_stmt SEMICOLON */ yytestcase(yyruleno==41);
      /* (42) bodyStmt ::= assign_stmt SEMICOLON */ yytestcase(yyruleno==42);
      /* (44) bodyStmt ::= actionStmt */ yytestcase(yyruleno==44);
      /* (45) bodyStmt ::= if_stmt */ yytestcase(yyruleno==45);
      /* (46) bodyStmt ::= while_stmt */ yytestcase(yyruleno==46);
      /* (47) bodyStmt ::= for_stmt */ yytestcase(yyruleno==47);
      /* (48) bodyStmt ::= foreach_stmt */ yytestcase(yyruleno==48);
      /* (49) bodyStmt ::= continue_stmt SEMICOLON */ yytestcase(yyruleno==49);
      /* (50) bodyStmt ::= break_stmt SEMICOLON */ yytestcase(yyruleno==50);
      /* (52) bodyStmtList ::= bodyStmt */ yytestcase(yyruleno==52);
      /* (53) bodyStmtList ::= bodyStmtList bodyStmt */ yytestcase(yyruleno==53);
      /* (88) commaSkippable ::= COMMA */ yytestcase(yyruleno==88);
      /* (89) commaSkippable ::= */ yytestcase(yyruleno==89);
      /* (147) if_block ::= if_header stmt */ yytestcase(yyruleno==147);
      /* (150) if_block ::= if_block elif_header stmt */ yytestcase(yyruleno==150);
      /* (158) for_init_stmt_nonEmpty ::= vdef_stmt */ yytestcase(yyruleno==158);
      /* (159) for_init_stmt_nonEmpty ::= vdefAssign_stmt */ yytestcase(yyruleno==159);
      /* (160) for_init_stmt_nonEmpty ::= cdef_stmt */ yytestcase(yyruleno==160);
      /* (161) for_init_stmt_nonEmpty ::= assign_stmt */ yytestcase(yyruleno==161);
      /* (162) for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty */ yytestcase(yyruleno==162);
      /* (163) for_init_stmt ::= for_init_stmt_nonEmpty */ yytestcase(yyruleno==163);
      /* (164) for_init_stmt ::= */ yytestcase(yyruleno==164);
      /* (165) for_action_stmt_nonEmpty ::= assign_stmt */ yytestcase(yyruleno==165);
      /* (166) for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty */ yytestcase(yyruleno==166);
      /* (167) for_action_stmt ::= */ yytestcase(yyruleno==167);
      /* (168) for_action_stmt ::= for_action_stmt_nonEmpty */ yytestcase(yyruleno==168);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */

    throw_error(-1, "Unrecoverable error");
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}


PyGenerator* pGen;
ClosureManager* closure;

std::string ParseString(const std::string& fname, const std::string& code, bool addComment)
{
    // Module name from fname
    // last \/ ~ first .
    auto lpos = fname.find_last_of("\\/");
    if(lpos == std::string::npos) lpos = 0;
    else lpos++;
    auto rpos = fname.find_first_of(".", lpos);
    if(rpos == std::string::npos) rpos = fname.size();
    currentModule = fname.substr(lpos, rpos - lpos);

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(stdout, "--");
#endif

    // Main code
    Tokenizer tok(code);
    void* pParser = ParseAlloc (malloc);
    ParserStruct ps;
    Token* token;
    currentTokenizingLine = 0;
    pGen = &ps.gen;
    closure = &ps.closure;
    functionCalledInMultipleActions = false;

    if(PARSER_DEBUG) std::cout << "Parsing string [[[\n" << code.c_str() << "\n]]]\n";
    if(MAP_DEBUG) {
        ps.gen <<
            "try:\n"
            "   MDBG_LOG = GetEUDNamespace()['MDBG_LOG']\n"
            "   MDBG_PUSHF = GetEUDNamespace()['MDBG_PUSHF']\n"
            "   MDBG_POPF = GetEUDNamespace()['MDBG_POPF']\n"
            "except KeyError:\n"
            "    mdbg_dbepd = EPD(Db(b'0123456789ABCDEFFEDCBA9876543210' + bytes(32 * 2048)))\n"
            "    mdbg_dbc = EUDVariable()\n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_LOG(line):\n"
            "        lIdf = b2i4(u2b('%4d' % line))\n"
            "        DoActions(SetMemoryEPD(mdbg_dbepd + 3 + mdbg_dbc, SetTo, lIdf))\n"
            "    \n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_PUSHF(f_name, m_name):\n"
            "        global mdbg_dbc\n"
            "        data = ((u2b(m_name) + bytes(12))[:12] + b'   0' + (u2b(f_name) + bytes(16))[:16])\n"
            "        mdbg_dbc += 8\n"
            "        DoActions([SetMemoryEPD(mdbg_dbepd + i + mdbg_dbc, SetTo, b2i4(data, i * 4)) for i in range(8)])\n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_POPF():\n"
            "        global mdbg_dbc\n"
            "        DoActions([SetMemoryEPD(mdbg_dbepd + i + mdbg_dbc, SetTo, 0) for i in range(8)])\n"
            "        mdbg_dbc -= 8\n"
            "\n";
    }

    tmpIndex = 1;
    resetParserErrorNum();
    while ((token = tok.getToken()) != nullptr) {
        if (currentTokenizingLine != tok.getCurrentLine()) {
            if(addComment) {
                currentTokenizingLine = tok.getCurrentLine();
                ps.gen << "# (Line " << currentTokenizingLine << ") " << trim(tok.getCurrentLineString()) << std::endl;
                if(MAP_DEBUG && !currentFunction.empty()) {
                    ps.gen << "MDBG_LOG(" << currentTokenizingLine << ")" << std::endl;
                }
            }
            if(PARSER_DEBUG) printf("# reading line %s\n", tok.getCurrentLineString().c_str());
        }
        if (tokenTypeConv(token)) {
            Parse (pParser, token->type, token, &ps);
        }
        else {
            throw_error(8104, "Invalid token");
        }
    }
    Parse (pParser, 0, nullptr, &ps);
    ParseFree(pParser, free );

    std::string ret = iwCollapse(ps.gen.str());
    if(getParseErrorNum() > 0) {
        ret += "\nraise RuntimeError('Compile error')\n";
    }

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(NULL, "--");
#endif

    return ret;
}
