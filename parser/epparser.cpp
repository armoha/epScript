/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include <stdio.h>
#include <assert.h>
#include <string>
#include <sstream>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <regex>

#include "epparser.h"
#include "generator/pygen.h"
#include "generator/closure.h"
#include "parser.h"
#include "tokenAdapter.h"
#include "parserUtilities.h"

struct ParserStruct {
   PyGenerator gen;
    ClosureManager closure;
};

int currentTokenizingLine;
int lambdaIndex;
std::string currentFunction;
std::string currentModule;
std::string currentFile;
bool PARSER_DEBUG = false;
bool MAP_DEBUG = false;


Token* negate(Token* B) {
    Token* A;
    bool isBGrouped = false;
    if (B->type == TOKEN_EXPR) {
        isBGrouped = true;
        do {
            Token* B1 = B->subToken[0];
            B->subToken[0] = nullptr;
            delete B;
            B = B1;
        } while(B->type == TOKEN_EXPR);
    }

    if(B->type == TOKEN_LNOT) {
        A = B->subToken[0];
        B->subToken[0] = nullptr;
        delete B;
    }
    else {
        A = genEmpty();
        A->line = B->line;
        A->type = TOKEN_LNOT;
        A->data = "EUDNot(" + B->data + ")";
        A->subToken[0] = B;
    }

    if (isBGrouped) {
        Token* A1 = genEmpty();
        A1->type = TOKEN_EXPR;
        A1->subToken[0] = A;
        A1->data = "(" + A->data + ")";
        A = A1;
    }
    return A;
}
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 148
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token*
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy295;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL  ParserStruct* ps ;
#define ParseARG_PDECL , ParserStruct* ps 
#define ParseARG_FETCH  ParserStruct* ps  = yypParser->ps 
#define ParseARG_STORE yypParser->ps  = ps 
#define YYNSTATE 367
#define YYNRULE 185
#define YYERRORSYMBOL 76
#define YYERRSYMDT yy295
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (8566)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
 /*    10 */   478,   69,   68,   70,   72,   71,   77,   76,   74,   75,
 /*    20 */    73,  232,  478,   19,   82,  351,  478,  478,  231,   83,
 /*    30 */   478,  478,  478,  316,  478,  478,  356,  478,  478,  292,
 /*    40 */   478,  310,  309,    4,  478,  478,  478,  478,  478,  478,
 /*    50 */   478,  478,  478,  206,  488,  171,  421,   10,  276,  275,
 /*    60 */   288,  242,   26,  478,  478,  478,  478,  478,  478,  478,
 /*    70 */   478,  478,  479,  479,  479,  479,  479,  479,  479,  479,
 /*    80 */   479,  479,  479,   69,   68,   70,   72,   71,   77,   76,
 /*    90 */    74,   75,   73,  352,  479,   19,   82,  351,  479,  479,
 /*   100 */   236,   83,  479,  479,  479,  427,  479,  479,  291,  479,
 /*   110 */   479,  292,  479,   30,  227,  316,  479,  479,  479,  479,
 /*   120 */   479,  479,  479,  479,  479,  206,  489,  171,  334,   10,
 /*   130 */   276,  275,  289,  242,  226,  479,  479,  479,  479,  479,
 /*   140 */   479,  479,  479,  479,  480,  480,  480,  480,  480,  480,
 /*   150 */   480,  480,  480,  480,  480,   69,   68,   70,   72,   71,
 /*   160 */    77,   76,   74,   75,   73,  333,  480,   19,   82,  351,
 /*   170 */   480,  480,  225,   83,  480,  480,  480,  247,  480,  480,
 /*   180 */   282,  480,  480,  292,  480,   29,  359,  316,  480,  480,
 /*   190 */   480,  480,  480,  480,  480,  480,  480,  206,  491,  171,
 /*   200 */   422,   10,  276,  275,  290,  242,  381,  480,  480,  480,
 /*   210 */   480,  480,  480,  480,  480,  480,  481,  481,  481,  481,
 /*   220 */   481,  481,  481,  481,  481,  481,  481,   69,   68,   70,
 /*   230 */    72,   71,   77,   76,   74,   75,   73,  422,  481,   19,
 /*   240 */    82,  351,  481,  481,    2,  238,  481,  481,  481,  357,
 /*   250 */   481,  481,  527,  481,  481,  174,  481,  171,   86,   10,
 /*   260 */   481,  481,  481,  481,  481,  481,  481,  481,  481,  206,
 /*   270 */    27,  171,   28,   10,  276,  275,  318,  527,  534,  481,
 /*   280 */   481,  481,  481,  481,  481,  481,  481,  481,  482,  482,
 /*   290 */   482,  482,  482,  482,  482,  482,  482,  482,  482,   69,
 /*   300 */    68,   70,   72,   71,   77,   76,   74,   75,   73,  534,
 /*   310 */   482,   19,   82,  351,  482,  482,  553,   12,  482,  482,
 /*   320 */   482,   92,  482,  482,  528,  482,  482,  207,  482,  171,
 /*   330 */   354,   10,  482,  482,  482,  482,  482,  482,  482,  482,
 /*   340 */   482,  206,  497,  171,  497,   10,  276,  275,  294,  528,
 /*   350 */   353,  482,  482,  482,  482,  482,  482,  482,  482,  482,
 /*   360 */   483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
 /*   370 */   483,   69,   68,   70,   72,   71,   77,   76,   74,   75,
 /*   380 */    73,  369,  483,   19,   82,  351,  483,  483,  352,  529,
 /*   390 */   483,  483,  483,  253,  483,  483,  426,  483,  483,  204,
 /*   400 */   483,  171,  426,   10,  483,  483,  483,  483,  483,  483,
 /*   410 */   483,  483,  483,  369,  529,  242,  369,  388,  369,  369,
 /*   420 */   369,  388,  388,  483,  483,  483,  483,  483,  483,  483,
 /*   430 */   483,  483,  394,  170,  394,  369,  394,  394,  394,  394,
 /*   440 */   394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
 /*   450 */   394,  394,  394,  394,  394,  394,  394,  370,  394,  394,
 /*   460 */   394,  394,  394,  394,  394,  530,  394,  394,  394,  394,
 /*   470 */   394,  394,  394,  394,  394,  202,  394,  171,  445,   10,
 /*   480 */   394,  394,  394,  394,  394,  394,  394,  394,  394,  370,
 /*   490 */   530,   85,  370,  389,  370,  370,  370,  389,  389,  394,
 /*   500 */   394,  394,  394,  394,  394,  394,  394,  394,  395,  445,
 /*   510 */   395,  370,  395,  395,  395,  395,  395,  395,  395,  395,
 /*   520 */   395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
 /*   530 */   395,  395,  395,  371,  395,  395,  395,  395,  395,  395,
 /*   540 */   395,   14,  395,  395,  395,  395,  395,  395,  395,  395,
 /*   550 */   395,  215,  395,  171,  447,   10,  395,  395,  395,  395,
 /*   560 */   395,  395,  395,  395,  395,  371,  532,  135,  371,  391,
 /*   570 */   371,  371,  371,  391,  391,  395,  395,  395,  395,  395,
 /*   580 */   395,  395,  395,  395,  397,  447,  397,  371,  397,  397,
 /*   590 */   397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
 /*   600 */   397,  397,  397,  397,  397,  397,  397,  397,  397,  372,
 /*   610 */   397,  397,  397,  397,  397,  397,  397,  531,  397,  397,
 /*   620 */   397,  397,  397,  397,  397,  397,  397,  165,  397,  171,
 /*   630 */    23,   10,  397,  397,  397,  397,  397,  397,  397,  397,
 /*   640 */   397,  372,  531,  131,  372,  392,  372,  372,  372,  392,
 /*   650 */   392,  397,  397,  397,  397,  397,  397,  397,  397,  397,
 /*   660 */   398,  450,  398,  372,  398,  398,  398,  398,  398,  398,
 /*   670 */   398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
 /*   680 */   398,  398,  398,  398,  398,  373,  398,  398,  398,  398,
 /*   690 */   398,  398,  398,   83,  398,  398,  398,  398,  398,  398,
 /*   700 */   398,  398,  398,  164,  398,  171,  448,   10,  398,  398,
 /*   710 */   398,  398,  398,  398,  398,  398,  398,  373,  436,  128,
 /*   720 */   373,  284,  373,  373,  373,   88,  281,  398,  398,  398,
 /*   730 */   398,  398,  398,  398,  398,  398,  399,  448,  399,  373,
 /*   740 */   399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
 /*   750 */   399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
 /*   760 */   399,  374,  399,  399,  399,  399,  399,  399,  399,   83,
 /*   770 */   399,  399,  399,  399,  399,  399,  399,  399,  399,  163,
 /*   780 */   399,  171,  535,   10,  399,  399,  399,  399,  399,  399,
 /*   790 */   399,  399,  399,  374,  490,   24,  374,  316,  374,  374,
 /*   800 */   374,  169,  127,  399,  399,  399,  399,  399,  399,  399,
 /*   810 */   399,  399,  402,  535,  402,  374,  402,  402,  402,  402,
 /*   820 */   402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
 /*   830 */   402,  402,  402,  402,  402,  402,  402,  375,  402,  402,
 /*   840 */   402,  402,  402,  402,  402,   83,  402,  402,  402,  402,
 /*   850 */   402,  402,  402,  402,  402,  162,  402,  171,   16,   10,
 /*   860 */   402,  402,  402,  402,  402,  402,  402,  402,  402,  375,
 /*   870 */   492,  126,  375,  125,  375,  375,  375,  124,  123,  402,
 /*   880 */   402,  402,  402,  402,  402,  402,  402,  402,  403,  538,
 /*   890 */   403,  375,  403,  403,  403,  403,  403,  403,  403,  403,
 /*   900 */   403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
 /*   910 */   403,  403,  403,  376,  403,  403,  403,  403,  403,  403,
 /*   920 */   403,  122,  403,  403,  403,  403,  403,  403,  403,  403,
 /*   930 */   403,  161,  403,  171,  536,   10,  403,  403,  403,  403,
 /*   940 */   403,  403,  403,  403,  403,  376,  117,  116,  376,  115,
 /*   950 */   376,  376,  376,  180,  100,  403,  403,  403,  403,  403,
 /*   960 */   403,  403,  403,  403,  404,  536,  404,  376,  404,  404,
 /*   970 */   404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
 /*   980 */   404,  404,  404,  404,  404,  404,  404,  404,  404,  377,
 /*   990 */   404,  404,  404,  404,  404,  404,  404,  176,  404,  404,
 /*  1000 */   404,  404,  404,  404,  404,  404,  404,  160,  404,  171,
 /*  1010 */    83,   10,  404,  404,  404,  404,  404,  404,  404,  404,
 /*  1020 */   404,  377,  278,   57,  377,  178,  377,  377,  377,  330,
 /*  1030 */   329,  404,  404,  404,  404,  404,  404,  404,  404,  404,
 /*  1040 */   405,  544,  405,  377,  405,  405,  405,  405,  405,  405,
 /*  1050 */   405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
 /*  1060 */   405,  405,  405,  405,  405,  378,  405,  405,  405,  405,
 /*  1070 */   405,  405,  405,  150,  405,  405,  405,  405,  405,  405,
 /*  1080 */   405,  405,  405,  159,  405,  171,  327,   10,  405,  405,
 /*  1090 */   405,  405,  405,  405,  405,  405,  405,  378,  326,  149,
 /*  1100 */   378,  324,  378,  378,  378,  148,  323,  405,  405,  405,
 /*  1110 */   405,  405,  405,  405,  405,  405,  406,  321,  406,  378,
 /*  1120 */   406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
 /*  1130 */   406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
 /*  1140 */   406,  387,  406,  406,  406,  406,  406,  406,  406,  320,
 /*  1150 */   406,  406,  406,  406,  406,  406,  406,  406,  406,  158,
 /*  1160 */   406,  171,  147,   10,  406,  406,  406,  406,  406,  406,
 /*  1170 */   406,  406,  406,  387,   18,  142,  387,  141,  387,  387,
 /*  1180 */   387,  234,   98,  406,  406,  406,  406,  406,  406,  406,
 /*  1190 */   406,  406,  407,  514,  407,  387,  407,  407,  407,  407,
 /*  1200 */   407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
 /*  1210 */   407,  407,  407,  407,  407,  407,  407,  386,  407,  407,
 /*  1220 */   407,  407,  407,  407,  407,   39,  407,  407,  407,  407,
 /*  1230 */   407,  407,  407,  407,  407,  157,  407,  171,    9,   10,
 /*  1240 */   407,  407,  407,  407,  407,  407,  407,  407,  407,  386,
 /*  1250 */   517,   38,  386,  523,  386,  386,  386,    8,   37,  407,
 /*  1260 */   407,  407,  407,  407,  407,  407,  407,  407,  408,    7,
 /*  1270 */   408,  386,  408,  408,  408,  408,  408,  408,  408,  408,
 /*  1280 */   408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
 /*  1290 */   408,  408,  408,  393,  408,  408,  408,  408,  408,  408,
 /*  1300 */   408,  217,  408,  408,  408,  408,  408,  408,  408,  408,
 /*  1310 */   408,  156,  408,  171,  219,   10,  408,  408,  408,  408,
 /*  1320 */   408,  408,  408,  408,  408,  393,  541,    6,  393,  300,
 /*  1330 */   393,  393,  393,    5,  543,  408,  408,  408,  408,  408,
 /*  1340 */   408,  408,  408,  408,  409,  546,  409,  393,  409,  409,
 /*  1350 */   409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
 /*  1360 */   409,  409,  409,  409,  409,  409,  409,  409,  409,  367,
 /*  1370 */   409,  409,  409,  409,  409,  409,  409,  547,  409,  409,
 /*  1380 */   409,  409,  409,  409,  409,  409,  409,  155,  409,  171,
 /*  1390 */   548,   10,  409,  409,  409,  409,  409,  409,  409,  409,
 /*  1400 */   409,  102,   17,  293,  358,   84,  287,  182,   95,  551,
 /*  1410 */   428,  409,  409,  409,  409,  409,  409,  409,  409,  409,
 /*  1420 */   410,   91,  410,   94,  410,  410,  410,  410,  410,  410,
 /*  1430 */   410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
 /*  1440 */   410,  410,  410,  410,  410,  368,  410,  410,  410,  410,
 /*  1450 */   410,  410,  410,  139,  410,  410,  410,  410,  410,  410,
 /*  1460 */   410,  410,  410,  108,  410,  171,  138,   10,  410,  410,
 /*  1470 */   410,  410,  410,  410,  410,  410,  410,  368,  137,  286,
 /*  1480 */   368,  241,  368,  368,  368,  240,   90,  410,  410,  410,
 /*  1490 */   410,  410,  410,  410,  410,  410,  411,  283,  411,  368,
 /*  1500 */   411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
 /*  1510 */   411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
 /*  1520 */   411,  221,  411,  411,  411,  411,  411,  411,  411,  254,
 /*  1530 */   411,  411,  411,  411,  411,  411,  411,  411,  411,  107,
 /*  1540 */   411,  171,  248,   10,  411,  411,  411,  411,  411,  411,
 /*  1550 */   411,  411,  411,  285,  379,  379,  132,  172,  379,  173,
 /*  1560 */   296,   10,  249,  411,  411,  411,  411,  411,  411,  411,
 /*  1570 */   411,  411,  412,  133,  412,  242,  412,  412,  412,  412,
 /*  1580 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
 /*  1590 */   412,  412,  412,  412,  412,  412,  412,  279,  412,  412,
 /*  1600 */   412,  412,  412,  412,  412,  423,  412,  412,  412,  412,
 /*  1610 */   412,  412,  412,  412,  412,  106,  412,  171,  280,   10,
 /*  1620 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  216,
 /*  1630 */   423,  171,  244,   10,   80,  235,  423,  272,  267,  412,
 /*  1640 */   412,  412,  412,  412,  412,  412,  412,  412,  413,  270,
 /*  1650 */   413,  256,  413,  413,  413,  413,  413,  413,  413,  413,
 /*  1660 */   413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
 /*  1670 */   413,  413,  413,  237,  413,  413,  413,  413,  413,  413,
 /*  1680 */   413,  183,  413,  413,  413,  413,  413,  413,  413,  413,
 /*  1690 */   413,  105,  413,  171,  251,   10,  413,  413,  413,  413,
 /*  1700 */   413,  413,  413,  413,  413,  317,  361,  382,  185,  172,
 /*  1710 */   360,  173,   35,   10,  186,  413,  413,  413,  413,  413,
 /*  1720 */   413,  413,  413,  413,  414,  184,  414,  236,  414,  414,
 /*  1730 */   414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
 /*  1740 */   414,  414,  414,  414,  414,  414,  414,  414,  414,  457,
 /*  1750 */   414,  414,  414,  414,  414,  414,  414,   93,  414,  414,
 /*  1760 */   414,  414,  414,  414,  414,  414,  414,  104,  414,  171,
 /*  1770 */   554,   10,  414,  414,  414,  414,  414,  414,  414,  414,
 /*  1780 */   414,  554,  380,  380,  554,  172,  380,  173,  554,   10,
 /*  1790 */   554,  414,  414,  414,  414,  414,  414,  414,  414,  414,
 /*  1800 */   415,  554,  415,  554,  415,  415,  415,  415,  415,  415,
 /*  1810 */   415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
 /*  1820 */   415,  415,  415,  415,  415,  554,  415,  415,  415,  415,
 /*  1830 */   415,  415,  415,  273,  415,  415,  415,  415,  415,  415,
 /*  1840 */   415,  415,  415,  103,  415,  171,  554,   10,  415,  415,
 /*  1850 */   415,  415,  415,  415,  415,  415,  415,  554,  154,  554,
 /*  1860 */   171,  172,   10,  173,  554,   10,  554,  415,  415,  415,
 /*  1870 */   415,  415,  415,  415,  415,  415,  416,  554,  416,  554,
 /*  1880 */   416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
 /*  1890 */   416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
 /*  1900 */   416,  554,  416,  416,  416,  416,  416,  416,  416,  271,
 /*  1910 */   416,  416,  416,  416,  416,  416,  416,  416,  416,  153,
 /*  1920 */   416,  171,  554,   10,  416,  416,  416,  416,  416,  416,
 /*  1930 */   416,  416,  416,  554,  214,  554,  171,  172,   10,  173,
 /*  1940 */   554,   10,  554,  416,  416,  416,  416,  416,  416,  416,
 /*  1950 */   416,  416,  417,  554,  417,  554,  417,  417,  417,  417,
 /*  1960 */   417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
 /*  1970 */   417,  417,  417,  417,  417,  417,  417,  554,  417,  417,
 /*  1980 */   417,  417,  417,  417,  417,  269,  417,  417,  417,  417,
 /*  1990 */   417,  417,  417,  417,  417,  213,  417,  171,  554,   10,
 /*  2000 */   417,  417,  417,  417,  417,  417,  417,  417,  417,  554,
 /*  2010 */   212,  554,  171,  172,   10,  173,  554,   10,  554,  417,
 /*  2020 */   417,  417,  417,  417,  417,  417,  417,  417,  516,  554,
 /*  2030 */   516,  554,  516,  516,  516,  516,  516,  516,  516,  516,
 /*  2040 */   516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
 /*  2050 */   516,  516,  516,  554,  516,  516,  516,  516,  516,  516,
 /*  2060 */   516,  243,  516,  516,  516,  516,  516,  516,  516,  516,
 /*  2070 */   516,  146,  516,  171,  554,   10,  516,  516,  516,  516,
 /*  2080 */   516,  516,  516,  516,  516,  554,  145,  554,  171,  172,
 /*  2090 */    10,  173,  554,   10,  554,  516,  516,  516,  516,  516,
 /*  2100 */   516,  516,  516,  516,  519,  554,  519,  554,  519,  519,
 /*  2110 */   519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
 /*  2120 */   519,  519,  519,  519,  519,  519,  519,  519,  519,  554,
 /*  2130 */   519,  519,  519,  519,  519,  519,  519,  255,  519,  519,
 /*  2140 */   519,  519,  519,  519,  519,  519,  519,  144,  519,  171,
 /*  2150 */   554,   10,  519,  519,  519,  519,  519,  519,  519,  519,
 /*  2160 */   519,  554,  143,  554,  171,  172,   10,  173,  554,   10,
 /*  2170 */   554,  519,  519,  519,  519,  519,  519,  519,  519,  519,
 /*  2180 */   525,  554,  525,  554,  525,  525,  525,  525,  525,  525,
 /*  2190 */   525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
 /*  2200 */   525,  525,  525,  525,  525,  554,  525,  525,  525,  525,
 /*  2210 */   525,  525,  525,  252,  525,  525,  525,  525,  525,  525,
 /*  2220 */   525,  525,  525,  201,  525,  171,  554,   10,  525,  525,
 /*  2230 */   525,  525,  525,  525,  525,  525,  525,  554,  200,  554,
 /*  2240 */   171,  172,   10,  173,  554,   10,  554,  525,  525,  525,
 /*  2250 */   525,  525,  525,  525,  525,  525,  542,  554,  542,  554,
 /*  2260 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*  2270 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*  2280 */   542,  554,  542,  542,  542,  542,  542,  542,  542,  250,
 /*  2290 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  199,
 /*  2300 */   542,  171,  554,   10,  542,  542,  542,  542,  542,  542,
 /*  2310 */   542,  542,  542,  554,  198,  554,  171,  172,   10,  173,
 /*  2320 */   554,   10,  554,  542,  542,  542,  542,  542,  542,  542,
 /*  2330 */   542,  542,  545,  554,  545,  554,  545,  545,  545,  545,
 /*  2340 */   545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
 /*  2350 */   545,  545,  545,  545,  545,  545,  545,  554,  545,  545,
 /*  2360 */   545,  545,  545,  545,  545,  501,  545,  545,  545,  545,
 /*  2370 */   545,  545,  545,  545,  545,  197,  545,  171,  554,   10,
 /*  2380 */   545,  545,  545,  545,  545,  545,  545,  545,  545,  206,
 /*  2390 */   501,  171,  554,   10,  274,  554,  501,  554,  554,  545,
 /*  2400 */   545,  545,  545,  545,  545,  545,  545,  545,  522,  554,
 /*  2410 */   522,  554,  522,  522,  522,  522,  522,  522,  522,  522,
 /*  2420 */   522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
 /*  2430 */   522,  522,  522,  554,  522,  522,  522,  522,  522,  522,
 /*  2440 */   522,  503,  522,  522,  522,  522,  522,  522,  522,  522,
 /*  2450 */   522,  196,  522,  171,  554,   10,  522,  522,  522,  522,
 /*  2460 */   522,  522,  522,  522,  522,  195,  503,  171,  554,   10,
 /*  2470 */   554,  554,  503,  554,  554,  522,  522,  522,  522,  522,
 /*  2480 */   522,  522,  522,  522,  521,  554,  187,  554,  521,  521,
 /*  2490 */   521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
 /*  2500 */   521,  521,  521,  521,  521,  521,  521,  521,  521,  554,
 /*  2510 */   521,  521,  521,  521,  521,  521,  521,   83,  521,  521,
 /*  2520 */   521,  521,  521,  521,  521,  521,  521,  194,  521,  171,
 /*  2530 */   554,   10,  521,  521,  521,  521,  521,  521,  521,  521,
 /*  2540 */   521,  193,  499,  171,  554,   10,  554,  554,  499,  554,
 /*  2550 */   554,  521,  521,  521,  521,  521,  521,  521,  521,  521,
 /*  2560 */   454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
 /*  2570 */   454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
 /*  2580 */   454,  554,  454,  454,  355,  454,  454,  454,   89,  554,
 /*  2590 */   454,  454,  454,  554,  454,  454,  554,  454,  454,  192,
 /*  2600 */   454,  171,  554,   10,  454,  454,  454,  454,  454,  454,
 /*  2610 */   454,  454,  454,  425,  191,  554,  171,  554,   10,  425,
 /*  2620 */   554,  554,  554,  454,  454,  454,  454,  454,  454,  454,
 /*  2630 */   454,  454,  432,  432,  432,  432,  432,  432,  432,  432,
 /*  2640 */   432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
 /*  2650 */   432,  432,  432,  554,  432,  432,  432,  432,  432,  432,
 /*  2660 */   554,  554,  432,  432,  432,  554,  432,  432,  554,  432,
 /*  2670 */   432,  190,  432,  171,  554,   10,  432,  432,  432,  432,
 /*  2680 */   432,  432,  432,  432,  432,  189,  211,  171,  171,   10,
 /*  2690 */    10,  554,  554,  554,  554,  432,  432,  432,  432,  432,
 /*  2700 */   432,  432,  432,  432,  440,  440,  440,  440,  440,  440,
 /*  2710 */   440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
 /*  2720 */   440,  440,  440,  440,  440,  554,  440,  440,  440,  440,
 /*  2730 */   440,  440,  554,  554,  440,  440,  440,  554,  440,  440,
 /*  2740 */   554,  440,  440,  210,  440,  171,  554,   10,  440,  440,
 /*  2750 */   440,  440,  440,  440,  440,  440,  440,  209,  208,  171,
 /*  2760 */   171,   10,   10,  554,  554,  554,  554,  440,  440,  440,
 /*  2770 */   440,  440,  440,  440,  440,  440,  437,  437,  437,  437,
 /*  2780 */   437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
 /*  2790 */   437,  437,  437,  437,  437,  437,  437,  554,  437,  437,
 /*  2800 */   437,  437,  437,  437,  554,  554,  437,  437,  437,  554,
 /*  2810 */   437,  437,  554,  437,  437,  554,  437,  554,  554,  554,
 /*  2820 */   437,  437,  437,  437,  437,  437,  437,  437,  437,  554,
 /*  2830 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  437,
 /*  2840 */   437,  437,  437,  437,  437,  437,  437,  437,  438,  438,
 /*  2850 */   438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
 /*  2860 */   438,  438,  438,  438,  438,  438,  438,  438,  438,  554,
 /*  2870 */   438,   21,  438,  438,  438,  438,  554,  554,  438,  438,
 /*  2880 */   438,  554,  438,  438,  554,  438,  438,  554,  438,  554,
 /*  2890 */   554,  554,  438,  438,  438,  438,  438,  438,  438,  438,
 /*  2900 */   438,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  2910 */   554,  438,  438,  438,  438,  438,  438,  438,  438,  438,
 /*  2920 */   439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
 /*  2930 */   439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
 /*  2940 */   439,  554,  439,   20,  439,  439,  439,  439,  554,  554,
 /*  2950 */   439,  439,  439,  554,  439,  439,  554,  439,  439,  554,
 /*  2960 */   439,  554,  554,  554,  439,  439,  439,  439,  439,  439,
 /*  2970 */   439,  439,  439,  554,  554,  554,  554,  554,  554,  554,
 /*  2980 */   554,  554,  554,  439,  439,  439,  439,  439,  439,  439,
 /*  2990 */   439,  439,   79,  464,   60,   61,  464,   67,   65,   63,
 /*  3000 */    64,   62,   66,   69,   68,   70,   72,   71,   77,   76,
 /*  3010 */    74,   75,   73,  554,  464,   19,   82,  351,  464,  464,
 /*  3020 */   554,  554,  464,  464,  464,  554,  464,  464,  554,  464,
 /*  3030 */   464,  554,  464,  554,  554,  554,  464,  464,  464,  464,
 /*  3040 */   464,  464,  464,  464,  464,  554,  554,  554,  554,  554,
 /*  3050 */   554,  554,  554,  554,  554,  464,  464,  464,  464,  464,
 /*  3060 */   464,  464,  464,  464,  465,  465,  465,  465,  465,  465,
 /*  3070 */   465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
 /*  3080 */   465,  465,   74,   75,   73,  554,  465,   19,   82,  351,
 /*  3090 */   465,  465,  554,  554,  465,  465,  465,  554,  465,  465,
 /*  3100 */   554,  465,  465,  554,  465,  554,  554,  554,  465,  465,
 /*  3110 */   465,  465,  465,  465,  465,  465,  465,  554,  554,  554,
 /*  3120 */   554,  554,  554,  554,  554,  554,  554,  465,  465,  465,
 /*  3130 */   465,  465,  465,  465,  465,  465,  466,  466,  466,  466,
 /*  3140 */   466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
 /*  3150 */   466,  466,  466,  466,   74,   75,   73,  554,  466,   19,
 /*  3160 */    82,  351,  466,  466,  554,  554,  466,  466,  466,  554,
 /*  3170 */   466,  466,  554,  466,  466,  554,  466,  554,  554,  554,
 /*  3180 */   466,  466,  466,  466,  466,  466,  466,  466,  466,  554,
 /*  3190 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  466,
 /*  3200 */   466,  466,  466,  466,  466,  466,  466,  466,  467,  467,
 /*  3210 */   467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
 /*  3220 */   467,  467,  467,  467,  467,  467,  467,  467,  467,  554,
 /*  3230 */   467,   19,   82,  351,  467,  467,  554,  554,  467,  467,
 /*  3240 */   467,  554,  467,  467,  554,  467,  467,  554,  467,  554,
 /*  3250 */   554,  554,  467,  467,  467,  467,  467,  467,  467,  467,
 /*  3260 */   467,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  3270 */   554,  467,  467,  467,  467,  467,  467,  467,  467,  467,
 /*  3280 */   468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
 /*  3290 */   468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
 /*  3300 */   468,  554,  468,   19,   82,  351,  468,  468,  554,  554,
 /*  3310 */   468,  468,  468,  554,  468,  468,  554,  468,  468,  554,
 /*  3320 */   468,  554,  554,  554,  468,  468,  468,  468,  468,  468,
 /*  3330 */   468,  468,  468,  554,  554,  554,  554,  554,  554,  554,
 /*  3340 */   554,  554,  554,  468,  468,  468,  468,  468,  468,  468,
 /*  3350 */   468,  468,  469,  469,  469,  469,  469,  469,  469,  469,
 /*  3360 */   469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
 /*  3370 */   469,  469,  469,  554,  469,   19,   82,  351,  469,  469,
 /*  3380 */   554,  554,  469,  469,  469,  554,  469,  469,  554,  469,
 /*  3390 */   469,  554,  469,  554,  554,  554,  469,  469,  469,  469,
 /*  3400 */   469,  469,  469,  469,  469,  554,  554,  554,  554,  554,
 /*  3410 */   554,  554,  554,  554,  554,  469,  469,  469,  469,  469,
 /*  3420 */   469,  469,  469,  469,  470,  470,  470,  470,  470,  470,
 /*  3430 */   470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
 /*  3440 */    77,   76,   74,   75,   73,  554,  470,   19,   82,  351,
 /*  3450 */   470,  470,  554,  554,  470,  470,  470,  554,  470,  470,
 /*  3460 */   554,  470,  470,  554,  470,  554,  554,  554,  470,  470,
 /*  3470 */   470,  470,  470,  470,  470,  470,  470,  554,  554,  554,
 /*  3480 */   554,  554,  554,  554,  554,  554,  554,  470,  470,  470,
 /*  3490 */   470,  470,  470,  470,  470,  470,  471,  471,  471,  471,
 /*  3500 */   471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
 /*  3510 */   471,  471,   77,   76,   74,   75,   73,  554,  471,   19,
 /*  3520 */    82,  351,  471,  471,  554,  554,  471,  471,  471,  554,
 /*  3530 */   471,  471,  554,  471,  471,  554,  471,  554,  554,  554,
 /*  3540 */   471,  471,  471,  471,  471,  471,  471,  471,  471,  554,
 /*  3550 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  471,
 /*  3560 */   471,  471,  471,  471,  471,  471,  471,  471,  472,  472,
 /*  3570 */   472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
 /*  3580 */   472,  472,   72,   71,   77,   76,   74,   75,   73,  554,
 /*  3590 */   472,   19,   82,  351,  472,  472,  554,  554,  472,  472,
 /*  3600 */   472,  554,  472,  472,  554,  472,  472,  554,  472,  554,
 /*  3610 */   554,  554,  472,  472,  472,  472,  472,  472,  472,  472,
 /*  3620 */   472,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  3630 */   554,  472,  472,  472,  472,  472,  472,  472,  472,  472,
 /*  3640 */   473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
 /*  3650 */   473,  473,   68,   70,   72,   71,   77,   76,   74,   75,
 /*  3660 */    73,  554,  473,   19,   82,  351,  473,  473,  554,  554,
 /*  3670 */   473,  473,  473,  554,  473,  473,  554,  473,  473,  554,
 /*  3680 */   473,  554,  554,  554,  473,  473,  473,  473,  473,  473,
 /*  3690 */   473,  473,  473,  554,  554,  554,  554,  554,  554,  554,
 /*  3700 */   554,  554,  554,  473,  473,  473,  473,  473,  473,  473,
 /*  3710 */   473,  473,  474,  474,  474,  474,  474,  474,  474,  474,
 /*  3720 */   474,  474,  474,  474,  474,   70,   72,   71,   77,   76,
 /*  3730 */    74,   75,   73,  554,  474,   19,   82,  351,  474,  474,
 /*  3740 */   554,  554,  474,  474,  474,  554,  474,  474,  554,  474,
 /*  3750 */   474,  554,  474,  554,  554,  554,  474,  474,  474,  474,
 /*  3760 */   474,  474,  474,  474,  474,  554,  554,  554,  554,  554,
 /*  3770 */   554,  554,  554,  554,  554,  474,  474,  474,  474,  474,
 /*  3780 */   474,  474,  474,  474,  484,  484,  484,  484,  484,   67,
 /*  3790 */    65,   63,   64,   62,   66,   69,   68,   70,   72,   71,
 /*  3800 */    77,   76,   74,   75,   73,  554,  484,   19,   82,  351,
 /*  3810 */   484,  484,  554,  554,  484,  484,  484,  554,  484,  484,
 /*  3820 */   554,  484,  484,  554,  484,  554,  554,  554,  484,  484,
 /*  3830 */   484,  484,  484,  484,  484,  484,  484,  554,  554,  554,
 /*  3840 */   554,  554,  554,  554,  554,  554,  554,  484,  484,  484,
 /*  3850 */   484,  484,  484,  484,  484,  484,  485,  485,  485,   61,
 /*  3860 */   485,   67,   65,   63,   64,   62,   66,   69,   68,   70,
 /*  3870 */    72,   71,   77,   76,   74,   75,   73,  554,  485,   19,
 /*  3880 */    82,  351,  485,  485,  554,  554,  485,  485,  485,  554,
 /*  3890 */   485,  485,  554,  485,  485,  554,  485,  554,  554,  554,
 /*  3900 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  554,
 /*  3910 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  485,
 /*  3920 */   485,  485,  485,  485,  485,  485,  485,  485,  455,  455,
 /*  3930 */   455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
 /*  3940 */   455,  455,  455,  455,  455,  455,  455,  455,  455,  554,
 /*  3950 */   455,  455,  455,  455,  455,  455,  554,  554,  455,  455,
 /*  3960 */   455,  554,  455,  455,  554,  455,  455,  554,  455,  554,
 /*  3970 */   554,  554,  455,  455,  455,  455,  455,  455,  455,  455,
 /*  3980 */   455,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  3990 */   554,  455,  455,  455,  455,  455,  455,  455,  455,  455,
 /*  4000 */   459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
 /*  4010 */   459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
 /*  4020 */   459,  554,  459,  459,  459,  459,  459,  459,  554,  554,
 /*  4030 */   459,  459,  459,  554,  459,  459,  554,  459,  459,  554,
 /*  4040 */   459,  554,  554,  554,  459,  459,  459,  459,  459,  459,
 /*  4050 */   459,  459,  459,  554,  554,  554,  554,  554,  554,  554,
 /*  4060 */   554,  554,  554,  459,  459,  459,  459,  459,  459,  459,
 /*  4070 */   459,  459,  460,  460,  460,  460,  460,  460,  460,  460,
 /*  4080 */   460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
 /*  4090 */   460,  460,  460,  554,  460,  460,  460,  460,  460,  460,
 /*  4100 */   554,  554,  460,  460,  460,  554,  460,  460,  554,  460,
 /*  4110 */   460,  554,  460,  554,  554,  554,  460,  460,  460,  460,
 /*  4120 */   460,  460,  460,  460,  460,  554,  554,  554,  554,  554,
 /*  4130 */   554,  554,  554,  554,  554,  460,  460,  460,  460,  460,
 /*  4140 */   460,  460,  460,  460,  461,  461,  461,  461,  461,  461,
 /*  4150 */   461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
 /*  4160 */   461,  461,  461,  461,  461,  554,  461,  461,  461,  461,
 /*  4170 */   461,  461,  554,  554,  461,  461,  461,  554,  461,  461,
 /*  4180 */   554,  461,  461,  554,  461,  554,  554,  554,  461,  461,
 /*  4190 */   461,  461,  461,  461,  461,  461,  461,  554,  554,  554,
 /*  4200 */   554,  554,  554,  554,  554,  554,  554,  461,  461,  461,
 /*  4210 */   461,  461,  461,  461,  461,  461,  462,  462,  462,  462,
 /*  4220 */   462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
 /*  4230 */   462,  462,  462,  462,  462,  462,  462,  554,  462,  462,
 /*  4240 */   462,  462,  462,  462,  554,  554,  462,  462,  462,  554,
 /*  4250 */   462,  462,  554,  462,  462,  554,  462,  554,  554,  554,
 /*  4260 */   462,  462,  462,  462,  462,  462,  462,  462,  462,  554,
 /*  4270 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  462,
 /*  4280 */   462,  462,  462,  462,  462,  462,  462,  462,  463,  463,
 /*  4290 */   463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
 /*  4300 */   463,  463,  463,  463,  463,  463,  463,  463,  463,  554,
 /*  4310 */   463,  463,  463,  463,  463,  463,  554,  554,  463,  463,
 /*  4320 */   463,  554,  463,  463,  554,  463,  463,  554,  463,  554,
 /*  4330 */   554,  554,  463,  463,  463,  463,  463,  463,  463,  463,
 /*  4340 */   463,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  4350 */   554,  463,  463,  463,  463,  463,  463,  463,  463,  463,
 /*  4360 */   475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
 /*  4370 */   475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
 /*  4380 */   475,  554,  475,   19,   82,  351,  475,  475,  554,  554,
 /*  4390 */   475,  475,  475,  554,  475,  475,  554,  475,  475,  554,
 /*  4400 */   475,  554,  554,  554,  475,  475,  475,  475,  475,  475,
 /*  4410 */   475,  475,  475,  554,  554,  554,  554,  554,  554,  554,
 /*  4420 */   554,  554,  554,  475,  475,  475,  475,  475,  475,  475,
 /*  4430 */   475,  475,  476,  476,  476,  476,  476,  476,  476,  476,
 /*  4440 */   476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
 /*  4450 */   476,  476,  476,  554,  476,   19,   82,  351,  476,  476,
 /*  4460 */   554,  554,  476,  476,  476,  554,  476,  476,  554,  476,
 /*  4470 */   476,  554,  476,  554,  554,  554,  476,  476,  476,  476,
 /*  4480 */   476,  476,  476,  476,  476,  554,  554,  554,  554,  554,
 /*  4490 */   554,  554,  554,  554,  554,  476,  476,  476,  476,  476,
 /*  4500 */   476,  476,  476,  476,  477,  477,  477,  477,  477,  477,
 /*  4510 */   477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
 /*  4520 */   477,  477,  477,  477,  477,  554,  477,   19,   82,  351,
 /*  4530 */   477,  477,  554,  554,  477,  477,  477,  554,  477,  477,
 /*  4540 */   554,  477,  477,  554,  477,  554,  554,  554,  477,  477,
 /*  4550 */   477,  477,  477,  477,  477,  477,  477,  554,  554,  554,
 /*  4560 */   554,  554,  554,  554,  554,  554,  554,  477,  477,  477,
 /*  4570 */   477,  477,  477,  477,  477,  477,  486,  486,  486,  486,
 /*  4580 */   486,   67,   65,   63,   64,   62,   66,   69,   68,   70,
 /*  4590 */    72,   71,   77,   76,   74,   75,   73,  554,  486,   19,
 /*  4600 */    82,  351,  486,  486,  554,  554,  486,  486,  486,  554,
 /*  4610 */   486,  486,  554,  486,  486,  554,  486,  554,  554,  554,
 /*  4620 */   486,  486,  486,  486,  486,  486,  486,  486,  486,  554,
 /*  4630 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  486,
 /*  4640 */   486,  486,  486,  486,  486,  486,  486,  486,  549,  549,
 /*  4650 */   549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
 /*  4660 */   549,  549,  549,  549,  549,  549,  549,  549,  549,  554,
 /*  4670 */   549,  549,  549,  549,  549,  549,  554,  554,  549,  549,
 /*  4680 */   549,  554,  549,  549,  554,  549,  549,  554,  549,  554,
 /*  4690 */   554,  554,  549,  549,  549,  549,  549,  549,  549,  549,
 /*  4700 */   549,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  4710 */   554,  549,  549,  549,  549,  549,  549,  549,  549,  549,
 /*  4720 */   458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
 /*  4730 */   458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
 /*  4740 */   458,  554,  458,  458,  458,  458,  458,  458,  554,  554,
 /*  4750 */   458,  458,  458,  554,  458,  458,  554,  458,  458,  554,
 /*  4760 */   458,  554,  554,  554,  458,  458,  458,  458,  458,  458,
 /*  4770 */   458,  458,  458,  554,  554,  554,  554,  554,  554,  554,
 /*  4780 */   554,  554,  554,  458,  458,  458,  458,  458,  458,  458,
 /*  4790 */   458,  458,  443,  443,  443,  443,  443,  443,  443,  443,
 /*  4800 */   443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
 /*  4810 */   443,  443,  443,  554,  443,  443,  443,  443,  443,  443,
 /*  4820 */   554,  554,  443,  443,  443,  554,  443,  443,  554,  443,
 /*  4830 */   443,  554,  443,  554,  554,  554,  443,  443,  443,  443,
 /*  4840 */   443,  443,  443,  443,  443,  554,  554,  554,  554,  554,
 /*  4850 */   554,  554,  554,  554,  554,  443,  443,  443,  443,  443,
 /*  4860 */   443,  443,  443,  443,  453,  453,  453,  453,  453,  453,
 /*  4870 */   453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
 /*  4880 */   453,  453,  453,  453,  453,  554,  453,  453,  453,  453,
 /*  4890 */   453,  453,  554,  554,  453,  453,  453,  554,  453,  453,
 /*  4900 */   554,  453,  453,  554,  453,  554,  554,  554,  453,  453,
 /*  4910 */   453,  453,  453,  453,  453,  453,  453,  554,  554,  554,
 /*  4920 */   554,  554,  554,  554,  554,  554,  554,  453,  453,  453,
 /*  4930 */   453,  453,  453,  453,  453,  453,  452,  452,  452,  452,
 /*  4940 */   452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
 /*  4950 */   452,  452,  452,  452,  452,  452,  452,  554,  452,  452,
 /*  4960 */   452,  452,  452,  452,  554,  554,  452,  452,  452,  554,
 /*  4970 */   452,  452,  554,  452,  452,  554,  452,  554,  554,  554,
 /*  4980 */   452,  452,  452,  452,  452,  452,  452,  452,  452,  554,
 /*  4990 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  452,
 /*  5000 */   452,  452,  452,  452,  452,  452,  452,  452,  550,  550,
 /*  5010 */   550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
 /*  5020 */   550,  550,  550,  550,  550,  550,  550,  550,  550,  554,
 /*  5030 */   550,  550,  550,  550,  550,  550,  554,  554,  550,  550,
 /*  5040 */   550,  554,  550,  550,  554,  550,  550,  554,  550,  554,
 /*  5050 */   554,  554,  550,  550,  550,  550,  550,  550,  550,  550,
 /*  5060 */   550,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  5070 */   554,  550,  550,  550,  550,  550,  550,  550,  550,  550,
 /*  5080 */   441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
 /*  5090 */   441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
 /*  5100 */   441,  554,  441,  441,  441,  441,  441,  441,  554,  554,
 /*  5110 */   441,  441,  441,  554,  441,  441,  554,  441,  441,  554,
 /*  5120 */   441,  554,  554,  554,  441,  441,  441,  441,  441,  441,
 /*  5130 */   441,  441,  441,  554,  554,  554,  554,  554,  554,  554,
 /*  5140 */   554,  554,  554,  441,  441,  441,  441,  441,  441,  441,
 /*  5150 */   441,  441,   79,  434,   60,   61,  434,   67,   65,   63,
 /*  5160 */    64,   62,   66,   69,   68,   70,   72,   71,   77,   76,
 /*  5170 */    74,   75,   73,  554,  434,   19,   82,  351,  434,  434,
 /*  5180 */   429,  554,  429,  434,  434,  554,  434,  434,  554,  434,
 /*  5190 */   434,  554,  434,  554,  554,  554,  434,  434,  434,  434,
 /*  5200 */   434,  434,  434,  434,  434,  554,  554,  429,  554,  554,
 /*  5210 */   554,  429,  554,  554,  554,  434,  434,  434,  434,  434,
 /*  5220 */   434,  434,  434,  434,  454,  454,  454,  454,  454,  454,
 /*  5230 */   454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
 /*  5240 */   454,  454,  454,  454,  454,  554,  454,  454,  335,  454,
 /*  5250 */   454,  454,  430,  554,  430,  454,  454,  554,  454,  454,
 /*  5260 */   554,  454,  454,  554,  454,  554,  554,  554,  454,  454,
 /*  5270 */   454,  454,  454,  454,  454,  454,  454,  554,  554,  430,
 /*  5280 */   554,  554,  554,  430,  554,  554,  554,  454,  454,  454,
 /*  5290 */   454,  454,  454,  454,  454,  454,   79,  433,   60,   61,
 /*  5300 */   433,   67,   65,   63,   64,   62,   66,   69,   68,   70,
 /*  5310 */    72,   71,   77,   76,   74,   75,   73,  554,  433,   19,
 /*  5320 */    82,  351,  433,  433,  554,  554,  554,  433,  433,  554,
 /*  5330 */   433,  433,  554,  433,  433,  554,  433,  554,  554,  554,
 /*  5340 */   433,  433,  433,  433,  433,  433,  433,  433,  433,   52,
 /*  5350 */   554,  496,  554,  554,  554,  554,  554,  554,  554,  433,
 /*  5360 */   433,  433,  433,  433,  433,  433,  433,  433,  493,  439,
 /*  5370 */   493,  439,  439,  554,  439,  439,  439,  439,  439,  439,
 /*  5380 */   439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
 /*  5390 */   554,  554,   20,  439,  439,  554,  554,  554,  554,  554,
 /*  5400 */   554,  554,  554,   51,   50,   49,   48,   47,   46,   45,
 /*  5410 */    44,   43,   42,  554,  554,  554,  554,  554,  554,  554,
 /*  5420 */   439,  439,  493,  493,  493,  493,  493,  493,  493,  493,
 /*  5430 */   493,  493,  495,  440,  495,  440,  440,  554,  440,  440,
 /*  5440 */   440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
 /*  5450 */   440,  440,  440,  440,  554,  554,  440,  440,  440,  554,
 /*  5460 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  5470 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  5480 */   554,  554,  554,  554,  440,  440,  495,  495,  495,  495,
 /*  5490 */   495,  495,  495,  495,  495,  495,  494,  441,  494,  441,
 /*  5500 */   441,  554,  441,  441,  441,  441,  441,  441,  441,  441,
 /*  5510 */   441,  441,  441,  441,  441,  441,  441,  441,  554,  554,
 /*  5520 */   441,  441,  441,  554,  554,  554,  554,  554,  554,  554,
 /*  5530 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  5540 */   554,  554,  554,  554,  554,  554,  554,  554,  441,  441,
 /*  5550 */   494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
 /*  5560 */    31,  349,  316,  554,  554,  554,  554,  554,  554,  347,
 /*  5570 */   554,  554,  130,  554,  554,  554,  554,  554,  140,  554,
 /*  5580 */   554,  554,  554,  134,    1,  554,  101,  487,  346,  345,
 /*  5590 */   344,  343,  342,  341,  121,  120,  119,  118,  340,  339,
 /*  5600 */   338,  554,  554,  205,  554,  188,  554,   10,  554,  554,
 /*  5610 */   554,  554,  220,  268,  313,  312,   34,   25,  554,  316,
 /*  5620 */   307,  306,   13,  554,  554,  349,  554,   36,   15,  302,
 /*  5630 */    96,  299,  554,  347,  554,  554,  130,  554,  554,  554,
 /*  5640 */   554,  554,  114,  554,  487,  554,  554,  134,    1,  554,
 /*  5650 */   101,  554,  346,  345,  344,  343,  342,  341,  121,  120,
 /*  5660 */   119,  118,  340,  339,  338,  554,  554,  205,  554,  188,
 /*  5670 */   554,   10,  554,  554,  554,  554,  220,  268,  313,  312,
 /*  5680 */    34,  554,  554,  554,  307,  306,   13,  554,  554,  349,
 /*  5690 */   554,   36,   15,  302,   96,  299,  554,  347,  554,  554,
 /*  5700 */   130,  554,  554,  554,  554,  554,  113,  554,  554,  554,
 /*  5710 */   554,  134,    1,  554,  101,  554,  346,  345,  344,  343,
 /*  5720 */   342,  341,  121,  120,  119,  118,  340,  339,  338,  554,
 /*  5730 */   554,  205,  554,  188,  554,   10,  554,  554,  554,  554,
 /*  5740 */   220,  268,  313,  312,   34,  554,  554,  554,  307,  306,
 /*  5750 */    13,  554,  554,  349,  554,   36,   15,  302,   96,  299,
 /*  5760 */   554,  347,  554,  554,  130,  554,  554,  554,  554,  554,
 /*  5770 */   112,  554,  554,  554,  554,  134,    1,  554,  101,  554,
 /*  5780 */   346,  345,  344,  343,  342,  341,  121,  120,  119,  118,
 /*  5790 */   340,  339,  338,  554,  554,  205,  554,  188,  554,   10,
 /*  5800 */   554,  554,  554,  554,  220,  268,  313,  312,   34,  554,
 /*  5810 */   554,  554,  307,  306,   13,  554,  554,  349,  554,   36,
 /*  5820 */    15,  302,   96,  299,  554,  347,  554,  554,  130,  554,
 /*  5830 */   554,  554,  554,  554,  111,  554,  554,  554,  554,  134,
 /*  5840 */     1,  554,  101,  554,  346,  345,  344,  343,  342,  341,
 /*  5850 */   121,  120,  119,  118,  340,  339,  338,  554,  554,  205,
 /*  5860 */   554,  188,  554,   10,  554,  554,  554,  554,  220,  268,
 /*  5870 */   313,  312,   34,  554,  554,  554,  307,  306,   13,  554,
 /*  5880 */   554,  349,  554,   36,   15,  302,   96,  299,  554,  347,
 /*  5890 */   554,  554,  130,  554,  554,  554,  554,  554,  110,  554,
 /*  5900 */   554,  554,  554,  134,    1,  554,  101,  554,  346,  345,
 /*  5910 */   344,  343,  342,  341,  121,  120,  119,  118,  340,  339,
 /*  5920 */   338,  554,  554,  205,  554,  188,  554,   10,  554,  554,
 /*  5930 */   554,  554,  220,  268,  313,  312,   34,  554,  554,  554,
 /*  5940 */   307,  306,   13,  554,  554,  349,  554,   36,   15,  302,
 /*  5950 */    96,  299,  554,  347,  554,  554,  130,  554,  554,  554,
 /*  5960 */   554,  554,  109,  554,  554,  554,  554,  134,    1,  554,
 /*  5970 */   101,  554,  346,  345,  344,  343,  342,  341,  121,  120,
 /*  5980 */   119,  118,  340,  339,  338,  554,  554,  205,  554,  188,
 /*  5990 */   554,   10,  554,  554,  554,  554,  220,  268,  313,  312,
 /*  6000 */    34,  554,  554,  554,  307,  306,   13,  554,  554,  349,
 /*  6010 */   554,   36,   15,  302,   96,  299,  554,  347,  554,  554,
 /*  6020 */   130,  554,  554,  554,  554,  554,  222,  554,  554,  554,
 /*  6030 */   554,  134,    1,  554,  101,  554,  346,  345,  344,  343,
 /*  6040 */   342,  341,  121,  120,  119,  118,  340,  339,  338,  554,
 /*  6050 */   554,  205,  554,  188,  554,   10,  554,  554,  554,  554,
 /*  6060 */   220,  268,  313,  312,   34,  554,  554,  554,  307,  306,
 /*  6070 */    13,  554,  554,  349,  554,   36,   15,  302,   96,  299,
 /*  6080 */   554,  347,  554,  554,  130,  554,  554,  554,  554,  554,
 /*  6090 */   239,  554,  554,  554,  554,  134,    1,  554,  101,  554,
 /*  6100 */   346,  345,  344,  343,  342,  341,  121,  120,  119,  118,
 /*  6110 */   340,  339,  338,  554,  554,  205,  554,  188,  554,   10,
 /*  6120 */   554,  554,  554,  554,  220,  268,  313,  312,   34,  554,
 /*  6130 */   554,  554,  307,  306,   13,  554,  554,  348,  554,   36,
 /*  6140 */    15,  302,   96,  299,  554,  347,  554,  554,  130,  554,
 /*  6150 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  179,
 /*  6160 */     1,  554,  101,   11,  346,  345,  344,  343,  342,  341,
 /*  6170 */   121,  120,  119,  118,  340,  339,  338,  554,  554,  205,
 /*  6180 */   554,  188,  554,   10,  554,  554,  554,  554,  220,  268,
 /*  6190 */   313,  312,   34,  554,  554,  554,  307,  306,   13,  554,
 /*  6200 */   554,  337,  554,   36,   15,  302,   96,  299,  554,  347,
 /*  6210 */   554,  554,  130,  554,  554,  554,  554,  554,  554,  554,
 /*  6220 */   554,  554,  554,  181,    1,  554,  101,  554,  346,  345,
 /*  6230 */   344,  343,  342,  341,  121,  120,  119,  118,  340,  339,
 /*  6240 */   338,  554,  554,  205,  554,  188,  554,   10,  554,  554,
 /*  6250 */   554,  554,  220,  268,  313,  312,   34,  554,  554,  554,
 /*  6260 */   307,  306,   13,  554,  554,  554,  554,   36,   15,  302,
 /*  6270 */    96,  299,  554,  431,  554,  554,  431,  554,  554,  554,
 /*  6280 */   554,  554,  554,  554,  554,  554,  554,  554,  431,  431,
 /*  6290 */   554,  554,  554,  554,  431,  431,  431,  554,  431,  431,
 /*  6300 */   554,  554,  554,  431,  431,  554,  431,  431,  554,  431,
 /*  6310 */   431,  554,  431,  554,  554,  554,  431,  431,  431,  431,
 /*  6320 */   431,  431,  431,  431,  431,  554,  554,  554,  554,   83,
 /*  6330 */   554,  554,  384,  554,  554,  431,  431,  431,  431,  431,
 /*  6340 */   431,  431,  431,  431,  384,  384,  554,  554,  554,  554,
 /*  6350 */   384,  384,  384,  554,  384,  384,  554,  554,  554,  384,
 /*  6360 */   554,  554,  384,  384,  554,  384,  554,  554,  384,  554,
 /*  6370 */   554,  554,  384,  384,  384,  384,  384,  384,  384,  384,
 /*  6380 */   384,  554,  554,  554,  554,  554,  554,  554,  396,  554,
 /*  6390 */   554,  384,  384,  384,  384,  384,  384,  384,  384,  384,
 /*  6400 */   396,  396,  554,  554,  554,  554,  396,  396,  396,  554,
 /*  6410 */   396,  396,  554,  554,  554,  396,  554,  554,  396,  396,
 /*  6420 */   396,  396,  554,  554,  396,  554,  554,  554,  396,  396,
 /*  6430 */   396,  396,  396,  396,  396,  396,  396,  554,  554,  554,
 /*  6440 */   554,  554,  554,  554,  419,  554,  554,  396,  396,  396,
 /*  6450 */   396,  396,  396,  396,  396,  396,  419,  419,  554,  554,
 /*  6460 */   554,  554,  419,  419,  419,  554,  419,  419,  554,  554,
 /*  6470 */   554,  419,  554,  554,  419,  419,  419,  419,  554,  554,
 /*  6480 */   419,  554,  554,  554,  419,  419,  419,  419,  419,  419,
 /*  6490 */   419,  419,  419,  554,  554,  554,  554,  554,  554,  554,
 /*  6500 */   420,  554,  554,  419,  419,  419,  419,  419,  419,  419,
 /*  6510 */   419,  419,  420,  420,  554,  554,  554,  554,  420,  420,
 /*  6520 */   420,  554,  420,  420,  554,  554,  554,  420,  554,  554,
 /*  6530 */   420,  420,  420,  420,  554,  554,  420,  554,  554,  554,
 /*  6540 */   420,  420,  420,  420,  420,  420,  420,  420,  420,  554,
 /*  6550 */   554,  554,  554,  554,  554,  554,  418,  554,  554,  420,
 /*  6560 */   420,  420,  420,  420,  420,  420,  420,  420,  418,  418,
 /*  6570 */   554,  554,  554,  554,  418,  418,  418,  554,  418,  418,
 /*  6580 */   554,  554,  554,  418,  554,  554,  418,  418,  418,  418,
 /*  6590 */   554,  554,  418,  554,  554,  554,  418,  418,  418,  418,
 /*  6600 */   418,  418,  418,  418,  418,  554,  554,  554,  554,  554,
 /*  6610 */   554,  554,  383,  554,  554,  418,  418,  418,  418,  418,
 /*  6620 */   418,  418,  418,  418,  383,  383,  554,  554,  554,  554,
 /*  6630 */   383,  383,  383,  554,  223,  383,  554,  554,   33,  383,
 /*  6640 */   554,  554,  383,  383,  554,  383,  554,  554,  383,  554,
 /*  6650 */   554,  554,  383,  383,  383,  383,  383,  383,  383,  383,
 /*  6660 */   383,  554,  554,  554,  554,  554,  554,  554,  383,  554,
 /*  6670 */   554,  383,  383,  383,  383,  383,  383,  383,  383,  383,
 /*  6680 */   383,  383,  554,  554,  554,  554,  383,  383,  383,  554,
 /*  6690 */   383,  383,  554,  554,   33,  383,  554,  554,  383,  383,
 /*  6700 */   554,  383,  554,  554,  383,  554,  554,  554,  383,  383,
 /*  6710 */   383,  383,  383,  383,  383,  383,  383,  554,  554,  554,
 /*  6720 */   554,  554,  554,  554,   53,  554,  554,  383,  383,  383,
 /*  6730 */   383,  383,  383,  383,  383,  383,   56,   55,  554,  554,
 /*  6740 */   554,  554,   54,   58,   32,  554,  129,  177,  554,  554,
 /*  6750 */   554,  350,  554,  554,  182,   99,  401,  168,  554,  554,
 /*  6760 */   167,  554,  554,  554,  332,  331,  328,  325,  322,  315,
 /*  6770 */    97,   41,   40,  554,  554,  554,  554,  554,  554,  554,
 /*  6780 */    53,  554,  554,  314,  308,  305,  301,  298,  297,   22,
 /*  6790 */   319,  295,   56,   55,  554,  554,  554,  554,   54,   58,
 /*  6800 */    32,  554,  129,  177,  554,  554,  554,  350,  554,  554,
 /*  6810 */   182,   99,  400,  168,  554,  554,  167,  554,  554,  554,
 /*  6820 */   332,  331,  328,  325,  322,  315,   97,   41,   40,  554,
 /*  6830 */   554,  554,  554,  554,  554,  554,  520,  554,  554,  314,
 /*  6840 */   308,  305,  301,  298,  297,   22,  319,  295,  520,  520,
 /*  6850 */   554,  554,  554,  554,  520,  520,  520,  554,  520,  520,
 /*  6860 */   554,  554,  554,  520,  554,  554,  520,  520,  554,  520,
 /*  6870 */   554,  554,  520,  554,  554,  554,  520,  520,  520,  520,
 /*  6880 */   520,  520,  520,  520,  520,  554,  554,  554,  554,  554,
 /*  6890 */   554,  554,  442,  554,  554,  311,  520,  520,  520,  520,
 /*  6900 */   520,  520,  520,  520,  442,  442,  554,  554,  554,  554,
 /*  6910 */   442,  442,  442,  554,  442,  442,  554,  554,  554,  442,
 /*  6920 */   554,  554,  442,  442,  554,  442,  554,  554,  442,  554,
 /*  6930 */   554,  554,  442,  442,  442,  442,  442,  442,  442,  442,
 /*  6940 */   442,  554,  554,  554,  554,  554,  554,  554,  385,  554,
 /*  6950 */   554,  442,  442,  442,  442,  442,  442,  442,  442,  442,
 /*  6960 */   385,  385,  554,  554,  554,  554,  385,  385,  385,  554,
 /*  6970 */   385,  385,  554,  554,  554,  385,  554,  554,  385,  385,
 /*  6980 */   554,  385,  554,  554,  385,  554,  554,  554,  385,  385,
 /*  6990 */   385,  385,  385,  385,  385,  385,  385,  554,  554,  554,
 /*  7000 */   554,  554,  554,  554,  390,  554,  554,  385,  385,  385,
 /*  7010 */   385,  385,  385,  385,  385,  385,  390,  390,  554,  554,
 /*  7020 */   554,  554,  390,  390,  390,  554,  390,  390,  554,  554,
 /*  7030 */   554,  390,  554,  554,  390,  390,  554,  390,  554,  554,
 /*  7040 */   390,  554,  554,  554,  390,  390,  390,  390,  390,  390,
 /*  7050 */   390,  390,  390,  554,  554,  554,  554,  554,  554,  554,
 /*  7060 */    53,  554,  554,  390,  390,  390,  390,  390,  390,  390,
 /*  7070 */   390,  390,   56,   55,  554,  554,  554,  554,   54,   58,
 /*  7080 */    32,  554,  129,  177,  554,  554,  554,  350,  554,  554,
 /*  7090 */   182,   99,  554,  168,  554,  554,  167,  554,  554,  554,
 /*  7100 */   332,  331,  328,  325,  322,  315,   97,   41,   40,  554,
 /*  7110 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  314,
 /*  7120 */   308,  305,  301,  298,  297,   22,  319,  295,  454,  451,
 /*  7130 */   454,  454,  554,  454,  454,  454,  454,  454,  454,  454,
 /*  7140 */   454,  454,  454,  454,  454,  454,  454,  454,  454,  554,
 /*  7150 */   554,  454,  355,  454,  451,  554,  554,  554,  554,  554,
 /*  7160 */   451,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  7170 */   554,  554,  554,  554,  554,  554,  554,  554,  554,  454,
 /*  7180 */   454,  554,  554,   81,  439,  439,  439,  439,  554,  439,
 /*  7190 */   439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
 /*  7200 */   439,  439,  439,  439,  439,  554,  554,   20,  439,  439,
 /*  7210 */   554,  554,   79,  424,   60,   61,  439,   67,   65,   63,
 /*  7220 */    64,   62,   66,   69,   68,   70,   72,   71,   77,   76,
 /*  7230 */    74,   75,   73,  554,  554,   19,   82,  351,  424,  554,
 /*  7240 */    79,  498,   60,   61,  424,   67,   65,   63,   64,   62,
 /*  7250 */    66,   69,   68,   70,   72,   71,   77,   76,   74,   75,
 /*  7260 */    73,  554,  554,   19,   82,  351,  498,  554,   79,  504,
 /*  7270 */    60,   61,  498,   67,   65,   63,   64,   62,   66,   69,
 /*  7280 */    68,   70,   72,   71,   77,   76,   74,   75,   73,  554,
 /*  7290 */   554,   19,   82,  351,  504,  554,   79,  505,   60,   61,
 /*  7300 */   504,   67,   65,   63,   64,   62,   66,   69,   68,   70,
 /*  7310 */    72,   71,   77,   76,   74,   75,   73,  554,  554,   19,
 /*  7320 */    82,  351,  505,  554,   79,  506,   60,   61,  505,   67,
 /*  7330 */    65,   63,   64,   62,   66,   69,   68,   70,   72,   71,
 /*  7340 */    77,   76,   74,   75,   73,  554,  554,   19,   82,  351,
 /*  7350 */   506,  554,   79,  507,   60,   61,  506,   67,   65,   63,
 /*  7360 */    64,   62,   66,   69,   68,   70,   72,   71,   77,   76,
 /*  7370 */    74,   75,   73,  554,  554,   19,   82,  351,  507,  554,
 /*  7380 */    79,  508,   60,   61,  507,   67,   65,   63,   64,   62,
 /*  7390 */    66,   69,   68,   70,   72,   71,   77,   76,   74,   75,
 /*  7400 */    73,  554,  554,   19,   82,  351,  508,  554,   79,  509,
 /*  7410 */    60,   61,  508,   67,   65,   63,   64,   62,   66,   69,
 /*  7420 */    68,   70,   72,   71,   77,   76,   74,   75,   73,  554,
 /*  7430 */   554,   19,   82,  351,  509,  554,   79,  510,   60,   61,
 /*  7440 */   509,   67,   65,   63,   64,   62,   66,   69,   68,   70,
 /*  7450 */    72,   71,   77,   76,   74,   75,   73,  554,  554,   19,
 /*  7460 */    82,  351,  510,  554,   79,  511,   60,   61,  510,   67,
 /*  7470 */    65,   63,   64,   62,   66,   69,   68,   70,   72,   71,
 /*  7480 */    77,   76,   74,   75,   73,  554,  554,   19,   82,  351,
 /*  7490 */   511,  554,   79,  512,   60,   61,  511,   67,   65,   63,
 /*  7500 */    64,   62,   66,   69,   68,   70,   72,   71,   77,   76,
 /*  7510 */    74,   75,   73,  554,  554,   19,   82,  351,  512,  554,
 /*  7520 */    79,  513,   60,   61,  512,   67,   65,   63,   64,   62,
 /*  7530 */    66,   69,   68,   70,   72,   71,   77,   76,   74,   75,
 /*  7540 */    73,  554,  554,   19,   82,  351,  513,  554,   79,  500,
 /*  7550 */    60,   61,  513,   67,   65,   63,   64,   62,   66,   69,
 /*  7560 */    68,   70,   72,   71,   77,   76,   74,   75,   73,  554,
 /*  7570 */   554,   19,   82,  351,  500,  554,   79,  502,   60,   61,
 /*  7580 */   500,   67,   65,   63,   64,   62,   66,   69,   68,   70,
 /*  7590 */    72,   71,   77,   76,   74,   75,   73,  554,  554,   19,
 /*  7600 */    82,  351,  502,  554,   79,  444,   60,   61,  502,   67,
 /*  7610 */    65,   63,   64,   62,   66,   69,   68,   70,   72,   71,
 /*  7620 */    77,   76,   74,   75,   73,  554,  554,   19,   82,  351,
 /*  7630 */   554,  554,   79,  554,   60,   61,  444,   67,   65,   63,
 /*  7640 */    64,   62,   66,   69,   68,   70,   72,   71,   77,   76,
 /*  7650 */    74,   75,   73,  554,  554,   19,   59,  336,  554,  554,
 /*  7660 */   554,  554,   79,  446,   60,   61,  554,   67,   65,   63,
 /*  7670 */    64,   62,   66,   69,   68,   70,   72,   71,   77,   76,
 /*  7680 */    74,   75,   73,  246,  245,   19,   82,  351,  554,  554,
 /*  7690 */    79,  554,   60,   61,  446,   67,   65,   63,   64,   62,
 /*  7700 */    66,   69,   68,   70,   72,   71,   77,   76,   74,   75,
 /*  7710 */    73,  554,  554,   19,   82,  351,  554,  554,  554,   79,
 /*  7720 */    78,   60,   61,  554,   67,   65,   63,   64,   62,   66,
 /*  7730 */    69,   68,   70,   72,   71,   77,   76,   74,   75,   73,
 /*  7740 */   554,  554,   19,   82,  351,  554,  554,  554,  554,  554,
 /*  7750 */   554,  554,  554,  554,  554,  554,  554,  175,  554,  554,
 /*  7760 */   554,  554,   79,  554,   60,   61,  554,   67,   65,   63,
 /*  7770 */    64,   62,   66,   69,   68,   70,   72,   71,   77,   76,
 /*  7780 */    74,   75,   73,  554,  554,   19,   82,  351,  554,  554,
 /*  7790 */    79,  554,   60,   61,  152,   67,   65,   63,   64,   62,
 /*  7800 */    66,   69,   68,   70,   72,   71,   77,   76,   74,   75,
 /*  7810 */    73,  554,  554,   19,   82,  351,  554,  554,   79,  554,
 /*  7820 */    60,   61,  151,   67,   65,   63,   64,   62,   66,   69,
 /*  7830 */    68,   70,   72,   71,   77,   76,   74,   75,   73,  554,
 /*  7840 */   554,   19,   82,  351,  554,  554,   79,  554,   60,   61,
 /*  7850 */   515,   67,   65,   63,   64,   62,   66,   69,   68,   70,
 /*  7860 */    72,   71,   77,   76,   74,   75,   73,  554,  554,   19,
 /*  7870 */    82,  351,  554,  554,   79,  554,   60,   61,  518,   67,
 /*  7880 */    65,   63,   64,   62,   66,   69,   68,   70,   72,   71,
 /*  7890 */    77,   76,   74,   75,   73,  554,  554,   19,   82,  351,
 /*  7900 */   554,  554,   79,  554,   60,   61,  524,   67,   65,   63,
 /*  7910 */    64,   62,   66,   69,   68,   70,   72,   71,   77,   76,
 /*  7920 */    74,   75,   73,  554,  554,   19,   82,  351,  218,  554,
 /*  7930 */    79,  554,   60,   61,  554,   67,   65,   63,   64,   62,
 /*  7940 */    66,   69,   68,   70,   72,   71,   77,   76,   74,   75,
 /*  7950 */    73,  554,  554,   19,   82,  351,  554,  554,  554,  554,
 /*  7960 */   554,  554,  554,  554,  554,  554,  554,  554,  136,  554,
 /*  7970 */   554,  554,  554,   79,  554,   60,   61,  554,   67,   65,
 /*  7980 */    63,   64,   62,   66,   69,   68,   70,   72,   71,   77,
 /*  7990 */    76,   74,   75,   73,  526,  554,   19,   59,  336,  554,
 /*  8000 */   554,  554,  554,  554,  554,  554,  526,  526,  554,  554,
 /*  8010 */   554,  266,  526,  526,  526,  554,  526,  526,  554,  554,
 /*  8020 */   554,  526,  554,  554,  554,  526,  554,  526,  554,  554,
 /*  8030 */   526,  265,  264,  263,  526,  526,  526,  526,  526,   53,
 /*  8040 */   526,  526,  526,  554,  554,  205,  554,  171,  554,   10,
 /*  8050 */   554,   56,   55,  554,  220,  268,  554,   54,   58,   32,
 /*  8060 */   526,  533,  177,  554,  554,  261,  350,  554,  554,  554,
 /*  8070 */    99,  554,  168,  554,  554,  167,  554,  554,  554,  332,
 /*  8080 */   331,  328,  325,  322,   53,   97,   41,   40,  554,  554,
 /*  8090 */   554,  554,  554,  554,  554,  554,   56,   55,  554,  554,
 /*  8100 */   259,  260,   54,   58,   32,  319,  554,  177,  554,  554,
 /*  8110 */   554,  350,  205,  554,  188,   99,   10,  168,  554,  554,
 /*  8120 */   167,  220,  268,  554,  332,  331,  328,  325,  322,  540,
 /*  8130 */    97,   41,   40,  554,  258,  303,  554,  554,  554,  554,
 /*  8140 */   554,  540,  540,  554,  554,  554,  554,  540,  540,  540,
 /*  8150 */   319,  554,  540,  554,  554,  554,  540,  540,  554,  554,
 /*  8160 */   554,  554,  540,  554,  554,  540,   53,  554,  554,  540,
 /*  8170 */   540,  540,  540,  540,  554,  554,  540,  540,   56,   55,
 /*  8180 */   554,  554,  554,  554,   54,   58,   32,  554,  554,  177,
 /*  8190 */   554,  554,  554,  350,  537,  540,  554,  554,  554,  168,
 /*  8200 */   554,  554,  167,   53,  554,  554,  332,  331,  328,  325,
 /*  8210 */   322,  554,  554,   41,   40,   56,   55,  554,  554,  554,
 /*  8220 */   554,   54,   58,   32,  554,  554,  203,  554,  554,  554,
 /*  8230 */   350,  449,  319,  554,  554,  554,  168,  554,  554,  167,
 /*  8240 */    53,  277,  554,  332,  331,  328,  325,  322,  554,  554,
 /*  8250 */   554,  554,   56,   55,  554,  554,  554,  554,   54,   58,
 /*  8260 */    32,  554,  554,  177,  554,  554,  554,  350,  554,  319,
 /*  8270 */   554,  554,  554,  168,  554,  554,  167,  554,   53,  554,
 /*  8280 */   332,  331,  328,  325,  322,  554,  554,   41,   40,  554,
 /*  8290 */    56,   55,  554,  554,  554,  554,   54,   58,   32,  554,
 /*  8300 */   554,  166,  554,  554,  554,  350,  319,  554,  554,  554,
 /*  8310 */   554,  168,  456,  554,  167,   53,  554,  554,  332,  331,
 /*  8320 */   328,  325,  322,  554,  554,  554,  554,   56,   55,  554,
 /*  8330 */   554,  554,  554,   54,   58,   32,  554,  554,  203,  554,
 /*  8340 */   554,  554,  350,  554,  319,  554,  554,  554,  168,  554,
 /*  8350 */   554,  167,  554,  277,  554,  332,  331,  328,  325,  322,
 /*  8360 */    53,  554,  554,  554,  554,  554,  554,  554,  554,  554,
 /*  8370 */   554,  554,   56,   55,  554,  554,  554,  554,   54,   58,
 /*  8380 */    32,  319,  435,  166,  554,  554,  554,  350,  554,  554,
 /*  8390 */   554,  554,  554,  168,  554,  554,  167,  554,  554,  266,
 /*  8400 */   332,  331,  328,  325,  322,  539,  554,  554,  554,  554,
 /*  8410 */   554,  554,  554,  554,  554,  554,  554,  539,  539,  265,
 /*  8420 */   264,  263,  554,  539,  539,  539,  319,  554,  539,  554,
 /*  8430 */   554,  554,  539,  205,  554,  171,  554,   10,  539,  554,
 /*  8440 */   554,  539,  220,  268,  554,  539,  539,  539,  539,  539,
 /*  8450 */    53,  554,  554,  262,  304,  554,  554,  554,  554,  554,
 /*  8460 */   554,  554,   56,   55,  554,  554,  259,  260,   54,   58,
 /*  8470 */    32,  539,  554,  166,  554,  554,  554,  350,  205,  554,
 /*  8480 */   188,  554,   10,  168,  554,  554,  167,  220,  268,  554,
 /*  8490 */   332,  331,  328,  325,  322,   53,  554,  554,  554,  554,
 /*  8500 */   257,  554,  554,  554,  554,  554,  554,   56,   55,  554,
 /*  8510 */   554,  554,  554,   54,   58,   32,  319,  554,  177,  554,
 /*  8520 */   554,  554,  350,  554,  554,  554,  554,  554,  168,  554,
 /*  8530 */   554,  167,  554,  554,  554,  332,  331,  328,  325,  322,
 /*  8540 */   366,  554,  554,  233,  365,  230,  229,  228,  364,  363,
 /*  8550 */   362,  224,  554,  554,  554,    3,  554,  554,   87,  554,
 /*  8560 */   554,  319,  554,    1,  554,  101,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*    10 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*    20 */    24,   30,   26,   27,   28,   29,   30,   31,   30,    5,
 /*    30 */    34,   35,   36,    5,   38,   39,   92,   41,   42,   95,
 /*    40 */    44,  132,  133,  134,   48,   49,   50,   51,   52,   53,
 /*    50 */    54,   55,   56,  118,   30,  120,    5,  122,  123,  124,
 /*    60 */   125,  117,   34,   67,   68,   69,   70,   71,   72,   73,
 /*    70 */    74,   75,    4,    5,    6,    7,    8,    9,   10,   11,
 /*    80 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*    90 */    22,   23,   24,   42,   26,   27,   28,   29,   30,   31,
 /*   100 */    31,    5,   34,   35,   36,   36,   38,   39,   92,   41,
 /*   110 */    42,   95,   44,    3,   30,    5,   48,   49,   50,   51,
 /*   120 */    52,   53,   54,   55,   56,  118,   30,  120,    5,  122,
 /*   130 */   123,  124,  125,  117,   30,   67,   68,   69,   70,   71,
 /*   140 */    72,   73,   74,   75,    4,    5,    6,    7,    8,    9,
 /*   150 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   160 */    20,   21,   22,   23,   24,   42,   26,   27,   28,   29,
 /*   170 */    30,   31,   30,    5,   34,   35,   36,   31,   38,   39,
 /*   180 */    92,   41,   42,   95,   44,    3,   31,    5,   48,   49,
 /*   190 */    50,   51,   52,   53,   54,   55,   56,  118,   30,  120,
 /*   200 */     5,  122,  123,  124,  125,  117,   30,   67,   68,   69,
 /*   210 */    70,   71,   72,   73,   74,   75,    4,    5,    6,    7,
 /*   220 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   230 */    18,   19,   20,   21,   22,   23,   24,   42,   26,   27,
 /*   240 */    28,   29,   30,   31,   96,   97,   34,   35,   36,   31,
 /*   250 */    38,   39,    5,   41,   42,  118,   44,  120,   27,  122,
 /*   260 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  118,
 /*   270 */     3,  120,    5,  122,  123,  124,  125,   30,    5,   67,
 /*   280 */    68,   69,   70,   71,   72,   73,   74,   75,    4,    5,
 /*   290 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   300 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   36,
 /*   310 */    26,   27,   28,   29,   30,   31,   77,   78,   34,   35,
 /*   320 */    36,   36,   38,   39,    5,   41,   42,  118,   44,  120,
 /*   330 */    28,  122,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   340 */    56,  118,    3,  120,    5,  122,  123,  124,  125,   30,
 /*   350 */    41,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*   360 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   370 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   380 */    24,    0,   26,   27,   28,   29,   30,   31,   42,    5,
 /*   390 */    34,   35,   36,   95,   38,   39,   30,   41,   42,  118,
 /*   400 */    44,  120,   36,  122,   48,   49,   50,   51,   52,   53,
 /*   410 */    54,   55,   56,   32,   30,  117,   35,   35,   37,   38,
 /*   420 */    39,   39,   40,   67,   68,   69,   70,   71,   72,   73,
 /*   430 */    74,   75,    0,   42,    2,   54,    4,    5,    6,    7,
 /*   440 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   450 */    18,   19,   20,   21,   22,   23,   24,    0,   26,   27,
 /*   460 */    28,   29,   30,   31,   32,    5,   34,   35,   36,   37,
 /*   470 */    38,   39,   40,   41,   42,  118,   44,  120,    5,  122,
 /*   480 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   32,
 /*   490 */    30,   27,   35,   35,   37,   38,   39,   39,   40,   67,
 /*   500 */    68,   69,   70,   71,   72,   73,   74,   75,    0,   36,
 /*   510 */     2,   54,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   520 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*   530 */    22,   23,   24,    0,   26,   27,   28,   29,   30,   31,
 /*   540 */    32,    5,   34,   35,   36,   37,   38,   39,   40,   41,
 /*   550 */    42,  118,   44,  120,    5,  122,   48,   49,   50,   51,
 /*   560 */    52,   53,   54,   55,   56,   32,   30,   30,   35,   35,
 /*   570 */    37,   38,   39,   39,   40,   67,   68,   69,   70,   71,
 /*   580 */    72,   73,   74,   75,    0,   36,    2,   54,    4,    5,
 /*   590 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   600 */    16,   17,   18,   19,   20,   21,   22,   23,   24,    0,
 /*   610 */    26,   27,   28,   29,   30,   31,   32,    5,   34,   35,
 /*   620 */    36,   37,   38,   39,   40,   41,   42,  118,   44,  120,
 /*   630 */     5,  122,   48,   49,   50,   51,   52,   53,   54,   55,
 /*   640 */    56,   32,   30,   40,   35,   35,   37,   38,   39,   39,
 /*   650 */    40,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*   660 */     0,   36,    2,   54,    4,    5,    6,    7,    8,    9,
 /*   670 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   680 */    20,   21,   22,   23,   24,    0,   26,   27,   28,   29,
 /*   690 */    30,   31,   32,    5,   34,   35,   36,   37,   38,   39,
 /*   700 */    40,   41,   42,  118,   44,  120,    5,  122,   48,   49,
 /*   710 */    50,   51,   52,   53,   54,   55,   56,   32,   30,   30,
 /*   720 */    35,   35,   37,   38,   39,   39,   40,   67,   68,   69,
 /*   730 */    70,   71,   72,   73,   74,   75,    0,   36,    2,   54,
 /*   740 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   750 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   760 */    24,    0,   26,   27,   28,   29,   30,   31,   32,    5,
 /*   770 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  118,
 /*   780 */    44,  120,    5,  122,   48,   49,   50,   51,   52,   53,
 /*   790 */    54,   55,   56,   32,   30,    3,   35,    5,   37,   38,
 /*   800 */    39,   31,   30,   67,   68,   69,   70,   71,   72,   73,
 /*   810 */    74,   75,    0,   36,    2,   54,    4,    5,    6,    7,
 /*   820 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   830 */    18,   19,   20,   21,   22,   23,   24,    0,   26,   27,
 /*   840 */    28,   29,   30,   31,   32,    5,   34,   35,   36,   37,
 /*   850 */    38,   39,   40,   41,   42,  118,   44,  120,    5,  122,
 /*   860 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   32,
 /*   870 */    30,   30,   35,   30,   37,   38,   39,   30,   30,   67,
 /*   880 */    68,   69,   70,   71,   72,   73,   74,   75,    0,   36,
 /*   890 */     2,   54,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   900 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*   910 */    22,   23,   24,    0,   26,   27,   28,   29,   30,   31,
 /*   920 */    32,   30,   34,   35,   36,   37,   38,   39,   40,   41,
 /*   930 */    42,  118,   44,  120,    5,  122,   48,   49,   50,   51,
 /*   940 */    52,   53,   54,   55,   56,   32,   30,   30,   35,   30,
 /*   950 */    37,   38,   39,   30,   28,   67,   68,   69,   70,   71,
 /*   960 */    72,   73,   74,   75,    0,   36,    2,   54,    4,    5,
 /*   970 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   980 */    16,   17,   18,   19,   20,   21,   22,   23,   24,    0,
 /*   990 */    26,   27,   28,   29,   30,   31,   32,   31,   34,   35,
 /*  1000 */    36,   37,   38,   39,   40,   41,   42,  118,   44,  120,
 /*  1010 */     5,  122,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  1020 */    56,   32,   41,   27,   35,   42,   37,   38,   39,   27,
 /*  1030 */    46,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  1040 */     0,   36,    2,   54,    4,    5,    6,    7,    8,    9,
 /*  1050 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  1060 */    20,   21,   22,   23,   24,    0,   26,   27,   28,   29,
 /*  1070 */    30,   31,   32,   36,   34,   35,   36,   37,   38,   39,
 /*  1080 */    40,   41,   42,  118,   44,  120,   27,  122,   48,   49,
 /*  1090 */    50,   51,   52,   53,   54,   55,   56,   32,   46,   36,
 /*  1100 */    35,   27,   37,   38,   39,   36,   46,   67,   68,   69,
 /*  1110 */    70,   71,   72,   73,   74,   75,    0,   27,    2,   54,
 /*  1120 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  1130 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  1140 */    24,    0,   26,   27,   28,   29,   30,   31,   32,   46,
 /*  1150 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  118,
 /*  1160 */    44,  120,   36,  122,   48,   49,   50,   51,   52,   53,
 /*  1170 */    54,   55,   56,   32,   27,   36,   35,   42,   37,   38,
 /*  1180 */    39,   31,   39,   67,   68,   69,   70,   71,   72,   73,
 /*  1190 */    74,   75,    0,   27,    2,   54,    4,    5,    6,    7,
 /*  1200 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  1210 */    18,   19,   20,   21,   22,   23,   24,    0,   26,   27,
 /*  1220 */    28,   29,   30,   31,   32,   27,   34,   35,   36,   37,
 /*  1230 */    38,   39,   40,   41,   42,  118,   44,  120,   36,  122,
 /*  1240 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   32,
 /*  1250 */    27,   27,   35,   27,   37,   38,   39,   36,   27,   67,
 /*  1260 */    68,   69,   70,   71,   72,   73,   74,   75,    0,   36,
 /*  1270 */     2,   54,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  1280 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  1290 */    22,   23,   24,    0,   26,   27,   28,   29,   30,   31,
 /*  1300 */    32,   27,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  1310 */    42,  118,   44,  120,   30,  122,   48,   49,   50,   51,
 /*  1320 */    52,   53,   54,   55,   56,   32,   36,   36,   35,   27,
 /*  1330 */    37,   38,   39,   36,   31,   67,   68,   69,   70,   71,
 /*  1340 */    72,   73,   74,   75,    0,   30,    2,   54,    4,    5,
 /*  1350 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  1360 */    16,   17,   18,   19,   20,   21,   22,   23,   24,    0,
 /*  1370 */    26,   27,   28,   29,   30,   31,   32,   30,   34,   35,
 /*  1380 */    36,   37,   38,   39,   40,   41,   42,  118,   44,  120,
 /*  1390 */    30,  122,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  1400 */    56,   32,   27,   36,   35,   27,   37,   38,   39,   30,
 /*  1410 */    36,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  1420 */     0,   36,    2,   54,    4,    5,    6,    7,    8,    9,
 /*  1430 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  1440 */    20,   21,   22,   23,   24,    0,   26,   27,   28,   29,
 /*  1450 */    30,   31,   32,   36,   34,   35,   36,   37,   38,   39,
 /*  1460 */    40,   41,   42,  118,   44,  120,   36,  122,   48,   49,
 /*  1470 */    50,   51,   52,   53,   54,   55,   56,   32,   36,   31,
 /*  1480 */    35,   38,   37,   38,   39,   30,   36,   67,   68,   69,
 /*  1490 */    70,   71,   72,   73,   74,   75,    0,   31,    2,   54,
 /*  1500 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  1510 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  1520 */    24,   30,   26,   27,   28,   29,   30,   31,   32,   90,
 /*  1530 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  118,
 /*  1540 */    44,  120,   88,  122,   48,   49,   50,   51,   52,   53,
 /*  1550 */    54,   55,   56,   95,   29,   30,  100,  118,   33,  120,
 /*  1560 */   121,  122,   31,   67,   68,   69,   70,   71,   72,   73,
 /*  1570 */    74,   75,    0,   40,    2,  117,    4,    5,    6,    7,
 /*  1580 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  1590 */    18,   19,   20,   21,   22,   23,   24,  116,   26,   27,
 /*  1600 */    28,   29,   30,   31,   32,    5,   34,   35,   36,   37,
 /*  1610 */    38,   39,   40,   41,   42,  118,   44,  120,   41,  122,
 /*  1620 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  118,
 /*  1630 */    30,  120,  119,  122,   34,   31,   36,  119,  127,   67,
 /*  1640 */    68,   69,   70,   71,   72,   73,   74,   75,    0,  119,
 /*  1650 */     2,  119,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  1660 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  1670 */    22,   23,   24,  119,   26,   27,   28,   29,   30,   31,
 /*  1680 */    32,   90,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  1690 */    42,  118,   44,  120,  119,  122,   48,   49,   50,   51,
 /*  1700 */    52,   53,   54,   55,   56,  126,   29,   30,   89,  118,
 /*  1710 */    33,  120,    5,  122,   89,   67,   68,   69,   70,   71,
 /*  1720 */    72,   73,   74,   75,    0,   89,    2,   31,    4,    5,
 /*  1730 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  1740 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   42,
 /*  1750 */    26,   27,   28,   29,   30,   31,   32,   90,   34,   35,
 /*  1760 */    36,   37,   38,   39,   40,   41,   42,  118,   44,  120,
 /*  1770 */   147,  122,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  1780 */    56,  147,   29,   30,  147,  118,   33,  120,  147,  122,
 /*  1790 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  1800 */     0,  147,    2,  147,    4,    5,    6,    7,    8,    9,
 /*  1810 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  1820 */    20,   21,   22,   23,   24,  147,   26,   27,   28,   29,
 /*  1830 */    30,   31,   32,   90,   34,   35,   36,   37,   38,   39,
 /*  1840 */    40,   41,   42,  118,   44,  120,  147,  122,   48,   49,
 /*  1850 */    50,   51,   52,   53,   54,   55,   56,  147,  118,  147,
 /*  1860 */   120,  118,  122,  120,  147,  122,  147,   67,   68,   69,
 /*  1870 */    70,   71,   72,   73,   74,   75,    0,  147,    2,  147,
 /*  1880 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  1890 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  1900 */    24,  147,   26,   27,   28,   29,   30,   31,   32,   90,
 /*  1910 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  118,
 /*  1920 */    44,  120,  147,  122,   48,   49,   50,   51,   52,   53,
 /*  1930 */    54,   55,   56,  147,  118,  147,  120,  118,  122,  120,
 /*  1940 */   147,  122,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  1950 */    74,   75,    0,  147,    2,  147,    4,    5,    6,    7,
 /*  1960 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  1970 */    18,   19,   20,   21,   22,   23,   24,  147,   26,   27,
 /*  1980 */    28,   29,   30,   31,   32,   90,   34,   35,   36,   37,
 /*  1990 */    38,   39,   40,   41,   42,  118,   44,  120,  147,  122,
 /*  2000 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  2010 */   118,  147,  120,  118,  122,  120,  147,  122,  147,   67,
 /*  2020 */    68,   69,   70,   71,   72,   73,   74,   75,    0,  147,
 /*  2030 */     2,  147,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  2040 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  2050 */    22,   23,   24,  147,   26,   27,   28,   29,   30,   31,
 /*  2060 */    32,   90,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  2070 */    42,  118,   44,  120,  147,  122,   48,   49,   50,   51,
 /*  2080 */    52,   53,   54,   55,   56,  147,  118,  147,  120,  118,
 /*  2090 */   122,  120,  147,  122,  147,   67,   68,   69,   70,   71,
 /*  2100 */    72,   73,   74,   75,    0,  147,    2,  147,    4,    5,
 /*  2110 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  2120 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  2130 */    26,   27,   28,   29,   30,   31,   32,   90,   34,   35,
 /*  2140 */    36,   37,   38,   39,   40,   41,   42,  118,   44,  120,
 /*  2150 */   147,  122,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  2160 */    56,  147,  118,  147,  120,  118,  122,  120,  147,  122,
 /*  2170 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  2180 */     0,  147,    2,  147,    4,    5,    6,    7,    8,    9,
 /*  2190 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  2200 */    20,   21,   22,   23,   24,  147,   26,   27,   28,   29,
 /*  2210 */    30,   31,   32,   90,   34,   35,   36,   37,   38,   39,
 /*  2220 */    40,   41,   42,  118,   44,  120,  147,  122,   48,   49,
 /*  2230 */    50,   51,   52,   53,   54,   55,   56,  147,  118,  147,
 /*  2240 */   120,  118,  122,  120,  147,  122,  147,   67,   68,   69,
 /*  2250 */    70,   71,   72,   73,   74,   75,    0,  147,    2,  147,
 /*  2260 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  2270 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  2280 */    24,  147,   26,   27,   28,   29,   30,   31,   32,   90,
 /*  2290 */    34,   35,   36,   37,   38,   39,   40,   41,   42,  118,
 /*  2300 */    44,  120,  147,  122,   48,   49,   50,   51,   52,   53,
 /*  2310 */    54,   55,   56,  147,  118,  147,  120,  118,  122,  120,
 /*  2320 */   147,  122,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  2330 */    74,   75,    0,  147,    2,  147,    4,    5,    6,    7,
 /*  2340 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  2350 */    18,   19,   20,   21,   22,   23,   24,  147,   26,   27,
 /*  2360 */    28,   29,   30,   31,   32,    5,   34,   35,   36,   37,
 /*  2370 */    38,   39,   40,   41,   42,  118,   44,  120,  147,  122,
 /*  2380 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  118,
 /*  2390 */    30,  120,  147,  122,  123,  147,   36,  147,  147,   67,
 /*  2400 */    68,   69,   70,   71,   72,   73,   74,   75,    0,  147,
 /*  2410 */     2,  147,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  2420 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  2430 */    22,   23,   24,  147,   26,   27,   28,   29,   30,   31,
 /*  2440 */    32,    5,   34,   35,   36,   37,   38,   39,   40,   41,
 /*  2450 */    42,  118,   44,  120,  147,  122,   48,   49,   50,   51,
 /*  2460 */    52,   53,   54,   55,   56,  118,   30,  120,  147,  122,
 /*  2470 */   147,  147,   36,  147,  147,   67,   68,   69,   70,   71,
 /*  2480 */    72,   73,   74,   75,    0,  147,    2,  147,    4,    5,
 /*  2490 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  2500 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  2510 */    26,   27,   28,   29,   30,   31,   32,    5,   34,   35,
 /*  2520 */    36,   37,   38,   39,   40,   41,   42,  118,   44,  120,
 /*  2530 */   147,  122,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  2540 */    56,  118,   30,  120,  147,  122,  147,  147,   36,  147,
 /*  2550 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  2560 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  2570 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  2580 */    24,  147,   26,   27,   28,   29,   30,   31,    5,  147,
 /*  2590 */    34,   35,   36,  147,   38,   39,  147,   41,   42,  118,
 /*  2600 */    44,  120,  147,  122,   48,   49,   50,   51,   52,   53,
 /*  2610 */    54,   55,   56,   30,  118,  147,  120,  147,  122,   36,
 /*  2620 */   147,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  2630 */    74,   75,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  2640 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  2650 */    22,   23,   24,  147,   26,   27,   28,   29,   30,   31,
 /*  2660 */   147,  147,   34,   35,   36,  147,   38,   39,  147,   41,
 /*  2670 */    42,  118,   44,  120,  147,  122,   48,   49,   50,   51,
 /*  2680 */    52,   53,   54,   55,   56,  118,  118,  120,  120,  122,
 /*  2690 */   122,  147,  147,  147,  147,   67,   68,   69,   70,   71,
 /*  2700 */    72,   73,   74,   75,    4,    5,    6,    7,    8,    9,
 /*  2710 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  2720 */    20,   21,   22,   23,   24,  147,   26,   27,   28,   29,
 /*  2730 */    30,   31,  147,  147,   34,   35,   36,  147,   38,   39,
 /*  2740 */   147,   41,   42,  118,   44,  120,  147,  122,   48,   49,
 /*  2750 */    50,   51,   52,   53,   54,   55,   56,  118,  118,  120,
 /*  2760 */   120,  122,  122,  147,  147,  147,  147,   67,   68,   69,
 /*  2770 */    70,   71,   72,   73,   74,   75,    4,    5,    6,    7,
 /*  2780 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  2790 */    18,   19,   20,   21,   22,   23,   24,  147,   26,   27,
 /*  2800 */    28,   29,   30,   31,  147,  147,   34,   35,   36,  147,
 /*  2810 */    38,   39,  147,   41,   42,  147,   44,  147,  147,  147,
 /*  2820 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  2830 */   147,  147,  147,  147,  147,  147,  147,  147,  147,   67,
 /*  2840 */    68,   69,   70,   71,   72,   73,   74,   75,    4,    5,
 /*  2850 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  2860 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  2870 */    26,   27,   28,   29,   30,   31,  147,  147,   34,   35,
 /*  2880 */    36,  147,   38,   39,  147,   41,   42,  147,   44,  147,
 /*  2890 */   147,  147,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  2900 */    56,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  2910 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  2920 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  2930 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  2940 */    24,  147,   26,   27,   28,   29,   30,   31,  147,  147,
 /*  2950 */    34,   35,   36,  147,   38,   39,  147,   41,   42,  147,
 /*  2960 */    44,  147,  147,  147,   48,   49,   50,   51,   52,   53,
 /*  2970 */    54,   55,   56,  147,  147,  147,  147,  147,  147,  147,
 /*  2980 */   147,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  2990 */    74,   75,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  3000 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  3010 */    22,   23,   24,  147,   26,   27,   28,   29,   30,   31,
 /*  3020 */   147,  147,   34,   35,   36,  147,   38,   39,  147,   41,
 /*  3030 */    42,  147,   44,  147,  147,  147,   48,   49,   50,   51,
 /*  3040 */    52,   53,   54,   55,   56,  147,  147,  147,  147,  147,
 /*  3050 */   147,  147,  147,  147,  147,   67,   68,   69,   70,   71,
 /*  3060 */    72,   73,   74,   75,    4,    5,    6,    7,    8,    9,
 /*  3070 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  3080 */    20,   21,   22,   23,   24,  147,   26,   27,   28,   29,
 /*  3090 */    30,   31,  147,  147,   34,   35,   36,  147,   38,   39,
 /*  3100 */   147,   41,   42,  147,   44,  147,  147,  147,   48,   49,
 /*  3110 */    50,   51,   52,   53,   54,   55,   56,  147,  147,  147,
 /*  3120 */   147,  147,  147,  147,  147,  147,  147,   67,   68,   69,
 /*  3130 */    70,   71,   72,   73,   74,   75,    4,    5,    6,    7,
 /*  3140 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  3150 */    18,   19,   20,   21,   22,   23,   24,  147,   26,   27,
 /*  3160 */    28,   29,   30,   31,  147,  147,   34,   35,   36,  147,
 /*  3170 */    38,   39,  147,   41,   42,  147,   44,  147,  147,  147,
 /*  3180 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  3190 */   147,  147,  147,  147,  147,  147,  147,  147,  147,   67,
 /*  3200 */    68,   69,   70,   71,   72,   73,   74,   75,    4,    5,
 /*  3210 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  3220 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  3230 */    26,   27,   28,   29,   30,   31,  147,  147,   34,   35,
 /*  3240 */    36,  147,   38,   39,  147,   41,   42,  147,   44,  147,
 /*  3250 */   147,  147,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  3260 */    56,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  3270 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  3280 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  3290 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  3300 */    24,  147,   26,   27,   28,   29,   30,   31,  147,  147,
 /*  3310 */    34,   35,   36,  147,   38,   39,  147,   41,   42,  147,
 /*  3320 */    44,  147,  147,  147,   48,   49,   50,   51,   52,   53,
 /*  3330 */    54,   55,   56,  147,  147,  147,  147,  147,  147,  147,
 /*  3340 */   147,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  3350 */    74,   75,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  3360 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  3370 */    22,   23,   24,  147,   26,   27,   28,   29,   30,   31,
 /*  3380 */   147,  147,   34,   35,   36,  147,   38,   39,  147,   41,
 /*  3390 */    42,  147,   44,  147,  147,  147,   48,   49,   50,   51,
 /*  3400 */    52,   53,   54,   55,   56,  147,  147,  147,  147,  147,
 /*  3410 */   147,  147,  147,  147,  147,   67,   68,   69,   70,   71,
 /*  3420 */    72,   73,   74,   75,    4,    5,    6,    7,    8,    9,
 /*  3430 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  3440 */    20,   21,   22,   23,   24,  147,   26,   27,   28,   29,
 /*  3450 */    30,   31,  147,  147,   34,   35,   36,  147,   38,   39,
 /*  3460 */   147,   41,   42,  147,   44,  147,  147,  147,   48,   49,
 /*  3470 */    50,   51,   52,   53,   54,   55,   56,  147,  147,  147,
 /*  3480 */   147,  147,  147,  147,  147,  147,  147,   67,   68,   69,
 /*  3490 */    70,   71,   72,   73,   74,   75,    4,    5,    6,    7,
 /*  3500 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  3510 */    18,   19,   20,   21,   22,   23,   24,  147,   26,   27,
 /*  3520 */    28,   29,   30,   31,  147,  147,   34,   35,   36,  147,
 /*  3530 */    38,   39,  147,   41,   42,  147,   44,  147,  147,  147,
 /*  3540 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  3550 */   147,  147,  147,  147,  147,  147,  147,  147,  147,   67,
 /*  3560 */    68,   69,   70,   71,   72,   73,   74,   75,    4,    5,
 /*  3570 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  3580 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  3590 */    26,   27,   28,   29,   30,   31,  147,  147,   34,   35,
 /*  3600 */    36,  147,   38,   39,  147,   41,   42,  147,   44,  147,
 /*  3610 */   147,  147,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  3620 */    56,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  3630 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  3640 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  3650 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  3660 */    24,  147,   26,   27,   28,   29,   30,   31,  147,  147,
 /*  3670 */    34,   35,   36,  147,   38,   39,  147,   41,   42,  147,
 /*  3680 */    44,  147,  147,  147,   48,   49,   50,   51,   52,   53,
 /*  3690 */    54,   55,   56,  147,  147,  147,  147,  147,  147,  147,
 /*  3700 */   147,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  3710 */    74,   75,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  3720 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  3730 */    22,   23,   24,  147,   26,   27,   28,   29,   30,   31,
 /*  3740 */   147,  147,   34,   35,   36,  147,   38,   39,  147,   41,
 /*  3750 */    42,  147,   44,  147,  147,  147,   48,   49,   50,   51,
 /*  3760 */    52,   53,   54,   55,   56,  147,  147,  147,  147,  147,
 /*  3770 */   147,  147,  147,  147,  147,   67,   68,   69,   70,   71,
 /*  3780 */    72,   73,   74,   75,    4,    5,    6,    7,    8,    9,
 /*  3790 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  3800 */    20,   21,   22,   23,   24,  147,   26,   27,   28,   29,
 /*  3810 */    30,   31,  147,  147,   34,   35,   36,  147,   38,   39,
 /*  3820 */   147,   41,   42,  147,   44,  147,  147,  147,   48,   49,
 /*  3830 */    50,   51,   52,   53,   54,   55,   56,  147,  147,  147,
 /*  3840 */   147,  147,  147,  147,  147,  147,  147,   67,   68,   69,
 /*  3850 */    70,   71,   72,   73,   74,   75,    4,    5,    6,    7,
 /*  3860 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  3870 */    18,   19,   20,   21,   22,   23,   24,  147,   26,   27,
 /*  3880 */    28,   29,   30,   31,  147,  147,   34,   35,   36,  147,
 /*  3890 */    38,   39,  147,   41,   42,  147,   44,  147,  147,  147,
 /*  3900 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  3910 */   147,  147,  147,  147,  147,  147,  147,  147,  147,   67,
 /*  3920 */    68,   69,   70,   71,   72,   73,   74,   75,    4,    5,
 /*  3930 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  3940 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  3950 */    26,   27,   28,   29,   30,   31,  147,  147,   34,   35,
 /*  3960 */    36,  147,   38,   39,  147,   41,   42,  147,   44,  147,
 /*  3970 */   147,  147,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  3980 */    56,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  3990 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  4000 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  4010 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  4020 */    24,  147,   26,   27,   28,   29,   30,   31,  147,  147,
 /*  4030 */    34,   35,   36,  147,   38,   39,  147,   41,   42,  147,
 /*  4040 */    44,  147,  147,  147,   48,   49,   50,   51,   52,   53,
 /*  4050 */    54,   55,   56,  147,  147,  147,  147,  147,  147,  147,
 /*  4060 */   147,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  4070 */    74,   75,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  4080 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  4090 */    22,   23,   24,  147,   26,   27,   28,   29,   30,   31,
 /*  4100 */   147,  147,   34,   35,   36,  147,   38,   39,  147,   41,
 /*  4110 */    42,  147,   44,  147,  147,  147,   48,   49,   50,   51,
 /*  4120 */    52,   53,   54,   55,   56,  147,  147,  147,  147,  147,
 /*  4130 */   147,  147,  147,  147,  147,   67,   68,   69,   70,   71,
 /*  4140 */    72,   73,   74,   75,    4,    5,    6,    7,    8,    9,
 /*  4150 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  4160 */    20,   21,   22,   23,   24,  147,   26,   27,   28,   29,
 /*  4170 */    30,   31,  147,  147,   34,   35,   36,  147,   38,   39,
 /*  4180 */   147,   41,   42,  147,   44,  147,  147,  147,   48,   49,
 /*  4190 */    50,   51,   52,   53,   54,   55,   56,  147,  147,  147,
 /*  4200 */   147,  147,  147,  147,  147,  147,  147,   67,   68,   69,
 /*  4210 */    70,   71,   72,   73,   74,   75,    4,    5,    6,    7,
 /*  4220 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  4230 */    18,   19,   20,   21,   22,   23,   24,  147,   26,   27,
 /*  4240 */    28,   29,   30,   31,  147,  147,   34,   35,   36,  147,
 /*  4250 */    38,   39,  147,   41,   42,  147,   44,  147,  147,  147,
 /*  4260 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  4270 */   147,  147,  147,  147,  147,  147,  147,  147,  147,   67,
 /*  4280 */    68,   69,   70,   71,   72,   73,   74,   75,    4,    5,
 /*  4290 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  4300 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  4310 */    26,   27,   28,   29,   30,   31,  147,  147,   34,   35,
 /*  4320 */    36,  147,   38,   39,  147,   41,   42,  147,   44,  147,
 /*  4330 */   147,  147,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  4340 */    56,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  4350 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  4360 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  4370 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  4380 */    24,  147,   26,   27,   28,   29,   30,   31,  147,  147,
 /*  4390 */    34,   35,   36,  147,   38,   39,  147,   41,   42,  147,
 /*  4400 */    44,  147,  147,  147,   48,   49,   50,   51,   52,   53,
 /*  4410 */    54,   55,   56,  147,  147,  147,  147,  147,  147,  147,
 /*  4420 */   147,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  4430 */    74,   75,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  4440 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  4450 */    22,   23,   24,  147,   26,   27,   28,   29,   30,   31,
 /*  4460 */   147,  147,   34,   35,   36,  147,   38,   39,  147,   41,
 /*  4470 */    42,  147,   44,  147,  147,  147,   48,   49,   50,   51,
 /*  4480 */    52,   53,   54,   55,   56,  147,  147,  147,  147,  147,
 /*  4490 */   147,  147,  147,  147,  147,   67,   68,   69,   70,   71,
 /*  4500 */    72,   73,   74,   75,    4,    5,    6,    7,    8,    9,
 /*  4510 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  4520 */    20,   21,   22,   23,   24,  147,   26,   27,   28,   29,
 /*  4530 */    30,   31,  147,  147,   34,   35,   36,  147,   38,   39,
 /*  4540 */   147,   41,   42,  147,   44,  147,  147,  147,   48,   49,
 /*  4550 */    50,   51,   52,   53,   54,   55,   56,  147,  147,  147,
 /*  4560 */   147,  147,  147,  147,  147,  147,  147,   67,   68,   69,
 /*  4570 */    70,   71,   72,   73,   74,   75,    4,    5,    6,    7,
 /*  4580 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  4590 */    18,   19,   20,   21,   22,   23,   24,  147,   26,   27,
 /*  4600 */    28,   29,   30,   31,  147,  147,   34,   35,   36,  147,
 /*  4610 */    38,   39,  147,   41,   42,  147,   44,  147,  147,  147,
 /*  4620 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  4630 */   147,  147,  147,  147,  147,  147,  147,  147,  147,   67,
 /*  4640 */    68,   69,   70,   71,   72,   73,   74,   75,    4,    5,
 /*  4650 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  4660 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  4670 */    26,   27,   28,   29,   30,   31,  147,  147,   34,   35,
 /*  4680 */    36,  147,   38,   39,  147,   41,   42,  147,   44,  147,
 /*  4690 */   147,  147,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  4700 */    56,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  4710 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  4720 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  4730 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  4740 */    24,  147,   26,   27,   28,   29,   30,   31,  147,  147,
 /*  4750 */    34,   35,   36,  147,   38,   39,  147,   41,   42,  147,
 /*  4760 */    44,  147,  147,  147,   48,   49,   50,   51,   52,   53,
 /*  4770 */    54,   55,   56,  147,  147,  147,  147,  147,  147,  147,
 /*  4780 */   147,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  4790 */    74,   75,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  4800 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  4810 */    22,   23,   24,  147,   26,   27,   28,   29,   30,   31,
 /*  4820 */   147,  147,   34,   35,   36,  147,   38,   39,  147,   41,
 /*  4830 */    42,  147,   44,  147,  147,  147,   48,   49,   50,   51,
 /*  4840 */    52,   53,   54,   55,   56,  147,  147,  147,  147,  147,
 /*  4850 */   147,  147,  147,  147,  147,   67,   68,   69,   70,   71,
 /*  4860 */    72,   73,   74,   75,    4,    5,    6,    7,    8,    9,
 /*  4870 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  4880 */    20,   21,   22,   23,   24,  147,   26,   27,   28,   29,
 /*  4890 */    30,   31,  147,  147,   34,   35,   36,  147,   38,   39,
 /*  4900 */   147,   41,   42,  147,   44,  147,  147,  147,   48,   49,
 /*  4910 */    50,   51,   52,   53,   54,   55,   56,  147,  147,  147,
 /*  4920 */   147,  147,  147,  147,  147,  147,  147,   67,   68,   69,
 /*  4930 */    70,   71,   72,   73,   74,   75,    4,    5,    6,    7,
 /*  4940 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  4950 */    18,   19,   20,   21,   22,   23,   24,  147,   26,   27,
 /*  4960 */    28,   29,   30,   31,  147,  147,   34,   35,   36,  147,
 /*  4970 */    38,   39,  147,   41,   42,  147,   44,  147,  147,  147,
 /*  4980 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  4990 */   147,  147,  147,  147,  147,  147,  147,  147,  147,   67,
 /*  5000 */    68,   69,   70,   71,   72,   73,   74,   75,    4,    5,
 /*  5010 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*  5020 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  5030 */    26,   27,   28,   29,   30,   31,  147,  147,   34,   35,
 /*  5040 */    36,  147,   38,   39,  147,   41,   42,  147,   44,  147,
 /*  5050 */   147,  147,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  5060 */    56,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  5070 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  5080 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*  5090 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  5100 */    24,  147,   26,   27,   28,   29,   30,   31,  147,  147,
 /*  5110 */    34,   35,   36,  147,   38,   39,  147,   41,   42,  147,
 /*  5120 */    44,  147,  147,  147,   48,   49,   50,   51,   52,   53,
 /*  5130 */    54,   55,   56,  147,  147,  147,  147,  147,  147,  147,
 /*  5140 */   147,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  5150 */    74,   75,    4,    5,    6,    7,    8,    9,   10,   11,
 /*  5160 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  5170 */    22,   23,   24,  147,   26,   27,   28,   29,   30,   31,
 /*  5180 */     3,  147,    5,   35,   36,  147,   38,   39,  147,   41,
 /*  5190 */    42,  147,   44,  147,  147,  147,   48,   49,   50,   51,
 /*  5200 */    52,   53,   54,   55,   56,  147,  147,   30,  147,  147,
 /*  5210 */   147,   34,  147,  147,  147,   67,   68,   69,   70,   71,
 /*  5220 */    72,   73,   74,   75,    4,    5,    6,    7,    8,    9,
 /*  5230 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  5240 */    20,   21,   22,   23,   24,  147,   26,   27,   28,   29,
 /*  5250 */    30,   31,    3,  147,    5,   35,   36,  147,   38,   39,
 /*  5260 */   147,   41,   42,  147,   44,  147,  147,  147,   48,   49,
 /*  5270 */    50,   51,   52,   53,   54,   55,   56,  147,  147,   30,
 /*  5280 */   147,  147,  147,   34,  147,  147,  147,   67,   68,   69,
 /*  5290 */    70,   71,   72,   73,   74,   75,    4,    5,    6,    7,
 /*  5300 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  5310 */    18,   19,   20,   21,   22,   23,   24,  147,   26,   27,
 /*  5320 */    28,   29,   30,   31,  147,  147,  147,   35,   36,  147,
 /*  5330 */    38,   39,  147,   41,   42,  147,   44,  147,  147,  147,
 /*  5340 */    48,   49,   50,   51,   52,   53,   54,   55,   56,    3,
 /*  5350 */   147,    5,  147,  147,  147,  147,  147,  147,  147,   67,
 /*  5360 */    68,   69,   70,   71,   72,   73,   74,   75,    3,    4,
 /*  5370 */     5,    6,    7,  147,    9,   10,   11,   12,   13,   14,
 /*  5380 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  5390 */   147,  147,   27,   28,   29,  147,  147,  147,  147,  147,
 /*  5400 */   147,  147,  147,   57,   58,   59,   60,   61,   62,   63,
 /*  5410 */    64,   65,   66,  147,  147,  147,  147,  147,  147,  147,
 /*  5420 */    55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
 /*  5430 */    65,   66,    3,    4,    5,    6,    7,  147,    9,   10,
 /*  5440 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  5450 */    21,   22,   23,   24,  147,  147,   27,   28,   29,  147,
 /*  5460 */   147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  5470 */   147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  5480 */   147,  147,  147,  147,   55,   56,   57,   58,   59,   60,
 /*  5490 */    61,   62,   63,   64,   65,   66,    3,    4,    5,    6,
 /*  5500 */     7,  147,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  5510 */    17,   18,   19,   20,   21,   22,   23,   24,  147,  147,
 /*  5520 */    27,   28,   29,  147,  147,  147,  147,  147,  147,  147,
 /*  5530 */   147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  5540 */   147,  147,  147,  147,  147,  147,  147,  147,   55,   56,
 /*  5550 */    57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
 /*  5560 */     3,   76,    5,  147,  147,  147,  147,  147,  147,   84,
 /*  5570 */   147,  147,   87,  147,  147,  147,  147,  147,   93,  147,
 /*  5580 */   147,  147,  147,   98,   99,  147,  101,   30,  103,  104,
 /*  5590 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  5600 */   115,  147,  147,  118,  147,  120,  147,  122,  147,  147,
 /*  5610 */   147,  147,  127,  128,  129,  130,  131,    3,  147,    5,
 /*  5620 */   135,  136,  137,  147,  147,   76,  147,  142,  143,  144,
 /*  5630 */   145,  146,  147,   84,  147,  147,   87,  147,  147,  147,
 /*  5640 */   147,  147,   93,  147,   30,  147,  147,   98,   99,  147,
 /*  5650 */   101,  147,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  5660 */   111,  112,  113,  114,  115,  147,  147,  118,  147,  120,
 /*  5670 */   147,  122,  147,  147,  147,  147,  127,  128,  129,  130,
 /*  5680 */   131,  147,  147,  147,  135,  136,  137,  147,  147,   76,
 /*  5690 */   147,  142,  143,  144,  145,  146,  147,   84,  147,  147,
 /*  5700 */    87,  147,  147,  147,  147,  147,   93,  147,  147,  147,
 /*  5710 */   147,   98,   99,  147,  101,  147,  103,  104,  105,  106,
 /*  5720 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  147,
 /*  5730 */   147,  118,  147,  120,  147,  122,  147,  147,  147,  147,
 /*  5740 */   127,  128,  129,  130,  131,  147,  147,  147,  135,  136,
 /*  5750 */   137,  147,  147,   76,  147,  142,  143,  144,  145,  146,
 /*  5760 */   147,   84,  147,  147,   87,  147,  147,  147,  147,  147,
 /*  5770 */    93,  147,  147,  147,  147,   98,   99,  147,  101,  147,
 /*  5780 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  5790 */   113,  114,  115,  147,  147,  118,  147,  120,  147,  122,
 /*  5800 */   147,  147,  147,  147,  127,  128,  129,  130,  131,  147,
 /*  5810 */   147,  147,  135,  136,  137,  147,  147,   76,  147,  142,
 /*  5820 */   143,  144,  145,  146,  147,   84,  147,  147,   87,  147,
 /*  5830 */   147,  147,  147,  147,   93,  147,  147,  147,  147,   98,
 /*  5840 */    99,  147,  101,  147,  103,  104,  105,  106,  107,  108,
 /*  5850 */   109,  110,  111,  112,  113,  114,  115,  147,  147,  118,
 /*  5860 */   147,  120,  147,  122,  147,  147,  147,  147,  127,  128,
 /*  5870 */   129,  130,  131,  147,  147,  147,  135,  136,  137,  147,
 /*  5880 */   147,   76,  147,  142,  143,  144,  145,  146,  147,   84,
 /*  5890 */   147,  147,   87,  147,  147,  147,  147,  147,   93,  147,
 /*  5900 */   147,  147,  147,   98,   99,  147,  101,  147,  103,  104,
 /*  5910 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  5920 */   115,  147,  147,  118,  147,  120,  147,  122,  147,  147,
 /*  5930 */   147,  147,  127,  128,  129,  130,  131,  147,  147,  147,
 /*  5940 */   135,  136,  137,  147,  147,   76,  147,  142,  143,  144,
 /*  5950 */   145,  146,  147,   84,  147,  147,   87,  147,  147,  147,
 /*  5960 */   147,  147,   93,  147,  147,  147,  147,   98,   99,  147,
 /*  5970 */   101,  147,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  5980 */   111,  112,  113,  114,  115,  147,  147,  118,  147,  120,
 /*  5990 */   147,  122,  147,  147,  147,  147,  127,  128,  129,  130,
 /*  6000 */   131,  147,  147,  147,  135,  136,  137,  147,  147,   76,
 /*  6010 */   147,  142,  143,  144,  145,  146,  147,   84,  147,  147,
 /*  6020 */    87,  147,  147,  147,  147,  147,   93,  147,  147,  147,
 /*  6030 */   147,   98,   99,  147,  101,  147,  103,  104,  105,  106,
 /*  6040 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  147,
 /*  6050 */   147,  118,  147,  120,  147,  122,  147,  147,  147,  147,
 /*  6060 */   127,  128,  129,  130,  131,  147,  147,  147,  135,  136,
 /*  6070 */   137,  147,  147,   76,  147,  142,  143,  144,  145,  146,
 /*  6080 */   147,   84,  147,  147,   87,  147,  147,  147,  147,  147,
 /*  6090 */    93,  147,  147,  147,  147,   98,   99,  147,  101,  147,
 /*  6100 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  6110 */   113,  114,  115,  147,  147,  118,  147,  120,  147,  122,
 /*  6120 */   147,  147,  147,  147,  127,  128,  129,  130,  131,  147,
 /*  6130 */   147,  147,  135,  136,  137,  147,  147,   76,  147,  142,
 /*  6140 */   143,  144,  145,  146,  147,   84,  147,  147,   87,  147,
 /*  6150 */   147,  147,  147,  147,  147,  147,  147,  147,  147,   98,
 /*  6160 */    99,  147,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  6170 */   109,  110,  111,  112,  113,  114,  115,  147,  147,  118,
 /*  6180 */   147,  120,  147,  122,  147,  147,  147,  147,  127,  128,
 /*  6190 */   129,  130,  131,  147,  147,  147,  135,  136,  137,  147,
 /*  6200 */   147,   76,  147,  142,  143,  144,  145,  146,  147,   84,
 /*  6210 */   147,  147,   87,  147,  147,  147,  147,  147,  147,  147,
 /*  6220 */   147,  147,  147,   98,   99,  147,  101,  147,  103,  104,
 /*  6230 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  6240 */   115,  147,  147,  118,  147,  120,  147,  122,  147,  147,
 /*  6250 */   147,  147,  127,  128,  129,  130,  131,  147,  147,  147,
 /*  6260 */   135,  136,  137,  147,  147,  147,  147,  142,  143,  144,
 /*  6270 */   145,  146,  147,    5,  147,  147,    8,  147,  147,  147,
 /*  6280 */   147,  147,  147,  147,  147,  147,  147,  147,   20,   21,
 /*  6290 */   147,  147,  147,  147,   26,   27,   28,  147,   30,   31,
 /*  6300 */   147,  147,  147,   35,   36,  147,   38,   39,  147,   41,
 /*  6310 */    42,  147,   44,  147,  147,  147,   48,   49,   50,   51,
 /*  6320 */    52,   53,   54,   55,   56,  147,  147,  147,  147,    5,
 /*  6330 */   147,  147,    8,  147,  147,   67,   68,   69,   70,   71,
 /*  6340 */    72,   73,   74,   75,   20,   21,  147,  147,  147,  147,
 /*  6350 */    26,   27,   28,  147,   30,   31,  147,  147,  147,   35,
 /*  6360 */   147,  147,   38,   39,  147,   41,  147,  147,   44,  147,
 /*  6370 */   147,  147,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6380 */    56,  147,  147,  147,  147,  147,  147,  147,    8,  147,
 /*  6390 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  6400 */    20,   21,  147,  147,  147,  147,   26,   27,   28,  147,
 /*  6410 */    30,   31,  147,  147,  147,   35,  147,  147,   38,   39,
 /*  6420 */    40,   41,  147,  147,   44,  147,  147,  147,   48,   49,
 /*  6430 */    50,   51,   52,   53,   54,   55,   56,  147,  147,  147,
 /*  6440 */   147,  147,  147,  147,    8,  147,  147,   67,   68,   69,
 /*  6450 */    70,   71,   72,   73,   74,   75,   20,   21,  147,  147,
 /*  6460 */   147,  147,   26,   27,   28,  147,   30,   31,  147,  147,
 /*  6470 */   147,   35,  147,  147,   38,   39,   40,   41,  147,  147,
 /*  6480 */    44,  147,  147,  147,   48,   49,   50,   51,   52,   53,
 /*  6490 */    54,   55,   56,  147,  147,  147,  147,  147,  147,  147,
 /*  6500 */     8,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  6510 */    74,   75,   20,   21,  147,  147,  147,  147,   26,   27,
 /*  6520 */    28,  147,   30,   31,  147,  147,  147,   35,  147,  147,
 /*  6530 */    38,   39,   40,   41,  147,  147,   44,  147,  147,  147,
 /*  6540 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  6550 */   147,  147,  147,  147,  147,  147,    8,  147,  147,   67,
 /*  6560 */    68,   69,   70,   71,   72,   73,   74,   75,   20,   21,
 /*  6570 */   147,  147,  147,  147,   26,   27,   28,  147,   30,   31,
 /*  6580 */   147,  147,  147,   35,  147,  147,   38,   39,   40,   41,
 /*  6590 */   147,  147,   44,  147,  147,  147,   48,   49,   50,   51,
 /*  6600 */    52,   53,   54,   55,   56,  147,  147,  147,  147,  147,
 /*  6610 */   147,  147,    8,  147,  147,   67,   68,   69,   70,   71,
 /*  6620 */    72,   73,   74,   75,   20,   21,  147,  147,  147,  147,
 /*  6630 */    26,   27,   28,  147,   30,   31,  147,  147,   34,   35,
 /*  6640 */   147,  147,   38,   39,  147,   41,  147,  147,   44,  147,
 /*  6650 */   147,  147,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6660 */    56,  147,  147,  147,  147,  147,  147,  147,    8,  147,
 /*  6670 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  6680 */    20,   21,  147,  147,  147,  147,   26,   27,   28,  147,
 /*  6690 */    30,   31,  147,  147,   34,   35,  147,  147,   38,   39,
 /*  6700 */   147,   41,  147,  147,   44,  147,  147,  147,   48,   49,
 /*  6710 */    50,   51,   52,   53,   54,   55,   56,  147,  147,  147,
 /*  6720 */   147,  147,  147,  147,    8,  147,  147,   67,   68,   69,
 /*  6730 */    70,   71,   72,   73,   74,   75,   20,   21,  147,  147,
 /*  6740 */   147,  147,   26,   27,   28,  147,   30,   31,  147,  147,
 /*  6750 */   147,   35,  147,  147,   38,   39,   40,   41,  147,  147,
 /*  6760 */    44,  147,  147,  147,   48,   49,   50,   51,   52,   53,
 /*  6770 */    54,   55,   56,  147,  147,  147,  147,  147,  147,  147,
 /*  6780 */     8,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  6790 */    74,   75,   20,   21,  147,  147,  147,  147,   26,   27,
 /*  6800 */    28,  147,   30,   31,  147,  147,  147,   35,  147,  147,
 /*  6810 */    38,   39,   40,   41,  147,  147,   44,  147,  147,  147,
 /*  6820 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  6830 */   147,  147,  147,  147,  147,  147,    8,  147,  147,   67,
 /*  6840 */    68,   69,   70,   71,   72,   73,   74,   75,   20,   21,
 /*  6850 */   147,  147,  147,  147,   26,   27,   28,  147,   30,   31,
 /*  6860 */   147,  147,  147,   35,  147,  147,   38,   39,  147,   41,
 /*  6870 */   147,  147,   44,  147,  147,  147,   48,   49,   50,   51,
 /*  6880 */    52,   53,   54,   55,   56,  147,  147,  147,  147,  147,
 /*  6890 */   147,  147,    8,  147,  147,   67,   68,   69,   70,   71,
 /*  6900 */    72,   73,   74,   75,   20,   21,  147,  147,  147,  147,
 /*  6910 */    26,   27,   28,  147,   30,   31,  147,  147,  147,   35,
 /*  6920 */   147,  147,   38,   39,  147,   41,  147,  147,   44,  147,
 /*  6930 */   147,  147,   48,   49,   50,   51,   52,   53,   54,   55,
 /*  6940 */    56,  147,  147,  147,  147,  147,  147,  147,    8,  147,
 /*  6950 */   147,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  6960 */    20,   21,  147,  147,  147,  147,   26,   27,   28,  147,
 /*  6970 */    30,   31,  147,  147,  147,   35,  147,  147,   38,   39,
 /*  6980 */   147,   41,  147,  147,   44,  147,  147,  147,   48,   49,
 /*  6990 */    50,   51,   52,   53,   54,   55,   56,  147,  147,  147,
 /*  7000 */   147,  147,  147,  147,    8,  147,  147,   67,   68,   69,
 /*  7010 */    70,   71,   72,   73,   74,   75,   20,   21,  147,  147,
 /*  7020 */   147,  147,   26,   27,   28,  147,   30,   31,  147,  147,
 /*  7030 */   147,   35,  147,  147,   38,   39,  147,   41,  147,  147,
 /*  7040 */    44,  147,  147,  147,   48,   49,   50,   51,   52,   53,
 /*  7050 */    54,   55,   56,  147,  147,  147,  147,  147,  147,  147,
 /*  7060 */     8,  147,  147,   67,   68,   69,   70,   71,   72,   73,
 /*  7070 */    74,   75,   20,   21,  147,  147,  147,  147,   26,   27,
 /*  7080 */    28,  147,   30,   31,  147,  147,  147,   35,  147,  147,
 /*  7090 */    38,   39,  147,   41,  147,  147,   44,  147,  147,  147,
 /*  7100 */    48,   49,   50,   51,   52,   53,   54,   55,   56,  147,
 /*  7110 */   147,  147,  147,  147,  147,  147,  147,  147,  147,   67,
 /*  7120 */    68,   69,   70,   71,   72,   73,   74,   75,    4,    5,
 /*  7130 */     6,    7,  147,    9,   10,   11,   12,   13,   14,   15,
 /*  7140 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  7150 */   147,   27,   28,   29,   30,  147,  147,  147,  147,  147,
 /*  7160 */    36,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  7170 */   147,  147,  147,  147,  147,  147,  147,  147,  147,   55,
 /*  7180 */    56,  147,  147,    3,    4,    5,    6,    7,  147,    9,
 /*  7190 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  7200 */    20,   21,   22,   23,   24,  147,  147,   27,   28,   29,
 /*  7210 */   147,  147,    4,    5,    6,    7,   36,    9,   10,   11,
 /*  7220 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7230 */    22,   23,   24,  147,  147,   27,   28,   29,   30,  147,
 /*  7240 */     4,    5,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  7250 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  7260 */    24,  147,  147,   27,   28,   29,   30,  147,    4,    5,
 /*  7270 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  7280 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  7290 */   147,   27,   28,   29,   30,  147,    4,    5,    6,    7,
 /*  7300 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  7310 */    18,   19,   20,   21,   22,   23,   24,  147,  147,   27,
 /*  7320 */    28,   29,   30,  147,    4,    5,    6,    7,   36,    9,
 /*  7330 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  7340 */    20,   21,   22,   23,   24,  147,  147,   27,   28,   29,
 /*  7350 */    30,  147,    4,    5,    6,    7,   36,    9,   10,   11,
 /*  7360 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7370 */    22,   23,   24,  147,  147,   27,   28,   29,   30,  147,
 /*  7380 */     4,    5,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  7390 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  7400 */    24,  147,  147,   27,   28,   29,   30,  147,    4,    5,
 /*  7410 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  7420 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  7430 */   147,   27,   28,   29,   30,  147,    4,    5,    6,    7,
 /*  7440 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  7450 */    18,   19,   20,   21,   22,   23,   24,  147,  147,   27,
 /*  7460 */    28,   29,   30,  147,    4,    5,    6,    7,   36,    9,
 /*  7470 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  7480 */    20,   21,   22,   23,   24,  147,  147,   27,   28,   29,
 /*  7490 */    30,  147,    4,    5,    6,    7,   36,    9,   10,   11,
 /*  7500 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7510 */    22,   23,   24,  147,  147,   27,   28,   29,   30,  147,
 /*  7520 */     4,    5,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  7530 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  7540 */    24,  147,  147,   27,   28,   29,   30,  147,    4,    5,
 /*  7550 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  7560 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  7570 */   147,   27,   28,   29,   30,  147,    4,    5,    6,    7,
 /*  7580 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  7590 */    18,   19,   20,   21,   22,   23,   24,  147,  147,   27,
 /*  7600 */    28,   29,   30,  147,    4,    5,    6,    7,   36,    9,
 /*  7610 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  7620 */    20,   21,   22,   23,   24,  147,  147,   27,   28,   29,
 /*  7630 */   147,  147,    4,  147,    6,    7,   36,    9,   10,   11,
 /*  7640 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7650 */    22,   23,   24,  147,  147,   27,   28,   29,  147,  147,
 /*  7660 */   147,  147,    4,    5,    6,    7,  147,    9,   10,   11,
 /*  7670 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7680 */    22,   23,   24,   55,   56,   27,   28,   29,  147,  147,
 /*  7690 */     4,  147,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  7700 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  7710 */    24,  147,  147,   27,   28,   29,  147,  147,  147,    4,
 /*  7720 */    34,    6,    7,  147,    9,   10,   11,   12,   13,   14,
 /*  7730 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  7740 */   147,  147,   27,   28,   29,  147,  147,  147,  147,  147,
 /*  7750 */   147,  147,  147,  147,  147,  147,  147,   42,  147,  147,
 /*  7760 */   147,  147,    4,  147,    6,    7,  147,    9,   10,   11,
 /*  7770 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7780 */    22,   23,   24,  147,  147,   27,   28,   29,  147,  147,
 /*  7790 */     4,  147,    6,    7,   36,    9,   10,   11,   12,   13,
 /*  7800 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  7810 */    24,  147,  147,   27,   28,   29,  147,  147,    4,  147,
 /*  7820 */     6,    7,   36,    9,   10,   11,   12,   13,   14,   15,
 /*  7830 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  147,
 /*  7840 */   147,   27,   28,   29,  147,  147,    4,  147,    6,    7,
 /*  7850 */    36,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  7860 */    18,   19,   20,   21,   22,   23,   24,  147,  147,   27,
 /*  7870 */    28,   29,  147,  147,    4,  147,    6,    7,   36,    9,
 /*  7880 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  7890 */    20,   21,   22,   23,   24,  147,  147,   27,   28,   29,
 /*  7900 */   147,  147,    4,  147,    6,    7,   36,    9,   10,   11,
 /*  7910 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  7920 */    22,   23,   24,  147,  147,   27,   28,   29,   30,  147,
 /*  7930 */     4,  147,    6,    7,  147,    9,   10,   11,   12,   13,
 /*  7940 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  7950 */    24,  147,  147,   27,   28,   29,  147,  147,  147,  147,
 /*  7960 */   147,  147,  147,  147,  147,  147,  147,  147,   42,  147,
 /*  7970 */   147,  147,  147,    4,  147,    6,    7,  147,    9,   10,
 /*  7980 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  7990 */    21,   22,   23,   24,    8,  147,   27,   28,   29,  147,
 /*  8000 */   147,  147,  147,  147,  147,  147,   20,   21,  147,  147,
 /*  8010 */   147,   84,   26,   27,   28,  147,   30,   31,  147,  147,
 /*  8020 */   147,   35,  147,  147,  147,   39,  147,   41,  147,  147,
 /*  8030 */    44,  104,  105,  106,   48,   49,   50,   51,   52,    8,
 /*  8040 */    54,   55,   56,  147,  147,  118,  147,  120,  147,  122,
 /*  8050 */   147,   20,   21,  147,  127,  128,  147,   26,   27,   28,
 /*  8060 */    74,   30,   31,  147,  147,  138,   35,  147,  147,  147,
 /*  8070 */    39,  147,   41,  147,  147,   44,  147,  147,  147,   48,
 /*  8080 */    49,   50,   51,   52,    8,   54,   55,   56,  147,  147,
 /*  8090 */   147,  147,  147,  147,  147,  147,   20,   21,  147,  147,
 /*  8100 */   106,  107,   26,   27,   28,   74,  147,   31,  147,  147,
 /*  8110 */   147,   35,  118,  147,  120,   39,  122,   41,  147,  147,
 /*  8120 */    44,  127,  128,  147,   48,   49,   50,   51,   52,    8,
 /*  8130 */    54,   55,   56,  147,  140,  141,  147,  147,  147,  147,
 /*  8140 */   147,   20,   21,  147,  147,  147,  147,   26,   27,   28,
 /*  8150 */    74,  147,   31,  147,  147,  147,   35,   36,  147,  147,
 /*  8160 */   147,  147,   41,  147,  147,   44,    8,  147,  147,   48,
 /*  8170 */    49,   50,   51,   52,  147,  147,   55,   56,   20,   21,
 /*  8180 */   147,  147,  147,  147,   26,   27,   28,  147,  147,   31,
 /*  8190 */   147,  147,  147,   35,   36,   74,  147,  147,  147,   41,
 /*  8200 */   147,  147,   44,    8,  147,  147,   48,   49,   50,   51,
 /*  8210 */    52,  147,  147,   55,   56,   20,   21,  147,  147,  147,
 /*  8220 */   147,   26,   27,   28,  147,  147,   31,  147,  147,  147,
 /*  8230 */    35,   36,   74,  147,  147,  147,   41,  147,  147,   44,
 /*  8240 */     8,   46,  147,   48,   49,   50,   51,   52,  147,  147,
 /*  8250 */   147,  147,   20,   21,  147,  147,  147,  147,   26,   27,
 /*  8260 */    28,  147,  147,   31,  147,  147,  147,   35,  147,   74,
 /*  8270 */   147,  147,  147,   41,  147,  147,   44,  147,    8,  147,
 /*  8280 */    48,   49,   50,   51,   52,  147,  147,   55,   56,  147,
 /*  8290 */    20,   21,  147,  147,  147,  147,   26,   27,   28,  147,
 /*  8300 */   147,   31,  147,  147,  147,   35,   74,  147,  147,  147,
 /*  8310 */   147,   41,   42,  147,   44,    8,  147,  147,   48,   49,
 /*  8320 */    50,   51,   52,  147,  147,  147,  147,   20,   21,  147,
 /*  8330 */   147,  147,  147,   26,   27,   28,  147,  147,   31,  147,
 /*  8340 */   147,  147,   35,  147,   74,  147,  147,  147,   41,  147,
 /*  8350 */   147,   44,  147,   46,  147,   48,   49,   50,   51,   52,
 /*  8360 */     8,  147,  147,  147,  147,  147,  147,  147,  147,  147,
 /*  8370 */   147,  147,   20,   21,  147,  147,  147,  147,   26,   27,
 /*  8380 */    28,   74,   30,   31,  147,  147,  147,   35,  147,  147,
 /*  8390 */   147,  147,  147,   41,  147,  147,   44,  147,  147,   84,
 /*  8400 */    48,   49,   50,   51,   52,    8,  147,  147,  147,  147,
 /*  8410 */   147,  147,  147,  147,  147,  147,  147,   20,   21,  104,
 /*  8420 */   105,  106,  147,   26,   27,   28,   74,  147,   31,  147,
 /*  8430 */   147,  147,   35,  118,  147,  120,  147,  122,   41,  147,
 /*  8440 */   147,   44,  127,  128,  147,   48,   49,   50,   51,   52,
 /*  8450 */     8,  147,  147,  138,  139,  147,  147,  147,  147,  147,
 /*  8460 */   147,  147,   20,   21,  147,  147,  106,  107,   26,   27,
 /*  8470 */    28,   74,  147,   31,  147,  147,  147,   35,  118,  147,
 /*  8480 */   120,  147,  122,   41,  147,  147,   44,  127,  128,  147,
 /*  8490 */    48,   49,   50,   51,   52,    8,  147,  147,  147,  147,
 /*  8500 */   140,  147,  147,  147,  147,  147,  147,   20,   21,  147,
 /*  8510 */   147,  147,  147,   26,   27,   28,   74,  147,   31,  147,
 /*  8520 */   147,  147,   35,  147,  147,  147,  147,  147,   41,  147,
 /*  8530 */   147,   44,  147,  147,  147,   48,   49,   50,   51,   52,
 /*  8540 */    76,  147,  147,   79,   80,   81,   82,   83,   84,   85,
 /*  8550 */    86,   87,  147,  147,  147,   91,  147,  147,   94,  147,
 /*  8560 */   147,   74,  147,   99,  147,  101,
};
#define YY_SHIFT_USE_DFLT (-10)
#define YY_SHIFT_COUNT (366)
#define YY_SHIFT_MIN   (-9)
#define YY_SHIFT_MAX   (8487)
static const short yy_shift_ofst[] = {
 /*     0 */  1445, 6772, 7052, 7052, 7052, 7052, 7052, 7052, 7052, 7052,
 /*    10 */  7052, 6716, 1369, 8031, 8076, 8158, 8232, 8195, 8195, 8195,
 /*    20 */  8195, 8195, 8352, 8307, 8442, 8442, 8442, 8442, 8487, 8442,
 /*    30 */  8442, 8442, 8442, 8442, 2484, 8270, 8442, 8442, 8442, 8442,
 /*    40 */  8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442,
 /*    50 */  8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442,
 /*    60 */  8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442,
 /*    70 */  8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442,
 /*    80 */  8442, 8442, 8442, 8442,   69,   69,   69,  686, 1696, 1696,
 /*    90 */  6660, 6660, 6604, 1707, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   100 */  1577, 1533, 1531,  356,  284,  212,  140,   68,   -4, 2408,
 /*   110 */  2332, 2256, 2180, 2104, 2028, 1952, 1876, 1800, 1724, 1648,
 /*   120 */  1572, 1496, 1420, 1344, 1268, 1192, 1116, 1040,  964,  888,
 /*   130 */   812,  736,  660,  584,  508,  432, 5076, 5004, 4932, 4860,
 /*   140 */  4788, 4716, 4644, 4572, 4500, 4428, 4356, 4284, 4212, 4140,
 /*   150 */  4068, 3996, 3924, 3852, 3780, 3708, 3636, 3564, 3492, 3420,
 /*   160 */  3348, 3276, 3204, 3132, 3060, 2988, 2916, 2844, 2772, 2700,
 /*   170 */  2628, 2556, 5292, 5220, 5148, 5493, 5429, 5365, 6268, 6548,
 /*   180 */  6492, 6436, 6380, 6324, 6996, 6940, 6884, 6828, 7124, 7572,
 /*   190 */  7544, 7516, 7488, 7460, 7432, 7404, 7376, 7348, 7320, 7292,
 /*   200 */  7264, 7236, 7208, 7180, 7658, 7628, 7600, 7926, 7898, 7870,
 /*   210 */  7842, 7814, 7786, 7758, 7715, 7686, 7969, 7986, 8121, 8397,
 /*   220 */  5346, 1293, 1217, 1141, 1065,  989,  913,  837,  761,  685,
 /*   230 */   609,  533,  457,  381, 5249, 5177, 1600, 5614,  610,  534,
 /*   240 */   458,  382, 2583, 2512, 5557, 2436, 2360, 1753, 1677, 1525,
 /*   250 */   840,  792,  764,  366,  688, 1005,   28,  929,  853,  777,
 /*   260 */   273,  612,  536,  460,  384,  319,  247,  339,  267,  168,
 /*   270 */   182,   96,  110,   24,  701,  625,  549,  473,  195,  123,
 /*   280 */    51, 1491, 1450, 1378, 1466, 1455, 1443, 1448, 1442, 1430,
 /*   290 */  1417, 1385, 1374, 1379, 1367, 1375, 1360, 1347, 1315, 1297,
 /*   300 */  1303, 1302, 1291, 1290, 1284, 1274, 1233, 1231, 1226, 1221,
 /*   310 */  1224, 1223, 1202, 1198, 1166, 1143, 1150, 1135, 1139, 1147,
 /*   320 */  1126, 1103, 1090, 1069, 1060, 1074, 1063, 1052, 1059, 1037,
 /*   330 */   984, 1002,  996,  983,  981,  926,  966,  923,  919,  917,
 /*   340 */   916,  891,  848,  847,  843,  841,  772,  689,  603,  537,
 /*   350 */   464,  770,  391,  346,  309,  302,  285,  231,  218,  176,
 /*   360 */   155,  146,  142,  104,   84,   -2,   -9,
};
#define YY_REDUCE_USE_DFLT (-92)
#define YY_REDUCE_COUNT (102)
#define YY_REDUCE_MIN   (-91)
#define YY_REDUCE_MAX   (8464)
static const short yy_reduce_ofst[] = {
 /*     0 */   239, 6061, 5997, 5933, 5869, 5805, 5741, 5677, 5613, 5549,
 /*    10 */  5485, 6125, 8464, 8315, 7927, 7994, 8360,  223,  151,   79,
 /*    20 */     7,  -65, 1439, 2271, 2199, 2123, 2047, 1971, 1511, 1895,
 /*    30 */  1819, 1743, 1667, 1591,  -91,  137, 2640, 2639, 2625, 2568,
 /*    40 */  2567, 2553, 2496, 2481, 2423, 2409, 2347, 2333, 2257, 2196,
 /*    50 */  2181, 2120, 2105, 2044, 2029, 1968, 1953, 1892, 1877, 1816,
 /*    60 */  1801, 1740, 1725, 1649, 1573, 1497, 1421, 1345, 1269, 1193,
 /*    70 */  1117, 1041,  965,  889,  813,  737,  661,  585,  509,  433,
 /*    80 */   357,  281,  209,  137,   88,   16,  -56,  148, 1458,  298,
 /*    90 */  1636, 1625, 1619, 1579, 1575, 1554, 1532, 1530, 1518, 1513,
 /*   100 */  1481, 1456, 1454,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*    10 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*    20 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*    30 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*    40 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*    50 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*    60 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*    70 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*    80 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*    90 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   100 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   110 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   120 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   130 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   140 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   150 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   160 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   170 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   180 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   190 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   200 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   210 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   220 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   230 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   240 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   250 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   260 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   270 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   280 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   290 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   300 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   310 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   320 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   330 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   340 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   350 */   552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
 /*   360 */   552,  552,  552,  552,  552,  552,  552,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

// We always want to have a ParseTrace. ParseTrace is only available on NDEBUG mode, so we explicitly set it.
#ifdef NDEBUG
#undef NDEBUG
#endif



#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static const char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, const char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IFX",           "ELSE",          "ASSIGN",      
  "QMARK",         "COMMA",         "LOR",           "LAND",        
  "LNOT",          "EQ",            "LE",            "LT",          
  "GE",            "GT",            "NE",            "BITOR",       
  "BITXOR",        "BITAND",        "LSHIFT",        "RSHIFT",      
  "PLUS",          "MINUS",         "DIVIDE",        "MULTIPLY",    
  "MOD",           "UNARY",         "BITNOT",        "LPAREN",      
  "LSQBRACKET",    "PERIOD",        "SEMICOLON",     "NAME",        
  "IMPORT",        "AS",            "COLON",         "FUNCTION",    
  "RPAREN",        "OBJECT",        "LBRACKET",      "VAR",         
  "RBRACKET",      "NUMBER",        "RSQBRACKET",    "SUBSCRIPT",   
  "KILLS",         "MEMBER",        "STRING",        "FUNCCALL",    
  "L2V",           "MAPSTRING",     "UNIT",          "SWITCH",      
  "LOCATION",      "STATIC",        "CONST",         "INC",         
  "DEC",           "IADD",          "ISUB",          "IMUL",        
  "IDIV",          "IMOD",          "ILSH",          "IRSH",        
  "IBND",          "IBOR",          "IBXR",          "IF",          
  "WHILE",         "FOR",           "FOREACH",       "CONTINUE",    
  "BREAK",         "RETURN",        "CONDITIONNAME",  "ACTIONNAME",  
  "error",         "program",       "chunks",        "chunk",       
  "import_chunk",  "fdef_chunk",    "fdecl_chunk",   "object_chunk",
  "vdef_stmt",     "vdefAssign_global_stmt",  "cdef_global_stmt",  "blockStmt",   
  "dottedName",    "fdef_rettypes",  "exprList_nonEmpty",  "fdef_header", 
  "typedNameList",  "stmt",          "object_body",   "typedNameList_nonEmpty",
  "method_header",  "method_chunk",  "bodyStmt",      "lbracket",    
  "rbracket",      "blockStmtSub",  "bodyStmtList",  "vdefAssignStatic_stmt",
  "vdefAssign_stmt",  "cdef_stmt",     "assign_stmt",   "funcexprStmt",
  "actionStmt",    "if_stmt",       "while_stmt",    "for_stmt",    
  "foreach_stmt",  "continue_stmt",  "break_stmt",    "return_stmt", 
  "numList_nonEmpty",  "typedName",     "expr",          "nameList_nonEmpty",
  "funcexpr",      "exprList",      "lambdaExprStart",  "fArg",        
  "fArgs_nonEmpty",  "fArgs",         "commaSkippable",  "lvalue",      
  "lvalueList_nonEmpty",  "if_start",      "if_header",     "if_block",    
  "elif_start",    "elif_header",   "else_header",   "while_start", 
  "while_header",  "for_opener",    "for_init_stmt_nonEmpty",  "for_init_stmt",
  "for_action_stmt_nonEmpty",  "for_action_stmt",  "for_header1",   "for_header2", 
  "for_header",    "foreach_opener",  "foreach_header",
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= chunks",
 /*   1 */ "chunks ::=",
 /*   2 */ "chunks ::= chunks chunk",
 /*   3 */ "chunk ::= error SEMICOLON",
 /*   4 */ "chunk ::= import_chunk SEMICOLON",
 /*   5 */ "chunk ::= fdef_chunk",
 /*   6 */ "chunk ::= fdecl_chunk",
 /*   7 */ "chunk ::= object_chunk",
 /*   8 */ "chunk ::= vdef_stmt SEMICOLON",
 /*   9 */ "chunk ::= vdefAssign_global_stmt SEMICOLON",
 /*  10 */ "chunk ::= cdef_global_stmt SEMICOLON",
 /*  11 */ "chunk ::= blockStmt",
 /*  12 */ "dottedName ::= NAME",
 /*  13 */ "dottedName ::= dottedName PERIOD NAME",
 /*  14 */ "import_chunk ::= IMPORT dottedName AS NAME",
 /*  15 */ "import_chunk ::= IMPORT dottedName",
 /*  16 */ "fdef_rettypes ::=",
 /*  17 */ "fdef_rettypes ::= COLON exprList_nonEmpty",
 /*  18 */ "fdef_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes",
 /*  19 */ "fdef_chunk ::= fdef_header stmt",
 /*  20 */ "fdecl_chunk ::= FUNCTION NAME LPAREN typedNameList RPAREN SEMICOLON",
 /*  21 */ "object_body ::= OBJECT NAME LBRACKET",
 /*  22 */ "object_body ::= object_body VAR typedNameList_nonEmpty SEMICOLON",
 /*  23 */ "method_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes",
 /*  24 */ "method_chunk ::= method_header stmt",
 /*  25 */ "object_body ::= object_body method_chunk",
 /*  26 */ "object_chunk ::= object_body RBRACKET SEMICOLON",
 /*  27 */ "stmt ::= error SEMICOLON",
 /*  28 */ "stmt ::= bodyStmt",
 /*  29 */ "lbracket ::= LBRACKET",
 /*  30 */ "rbracket ::= RBRACKET",
 /*  31 */ "blockStmt ::= blockStmtSub rbracket",
 /*  32 */ "blockStmt ::= lbracket error RBRACKET",
 /*  33 */ "blockStmtSub ::= lbracket",
 /*  34 */ "blockStmtSub ::= lbracket bodyStmtList",
 /*  35 */ "bodyStmt ::= blockStmt",
 /*  36 */ "bodyStmt ::= SEMICOLON",
 /*  37 */ "bodyStmt ::= vdef_stmt SEMICOLON",
 /*  38 */ "bodyStmt ::= vdefAssignStatic_stmt SEMICOLON",
 /*  39 */ "bodyStmt ::= vdefAssign_stmt SEMICOLON",
 /*  40 */ "bodyStmt ::= cdef_stmt SEMICOLON",
 /*  41 */ "bodyStmt ::= assign_stmt SEMICOLON",
 /*  42 */ "bodyStmt ::= funcexprStmt SEMICOLON",
 /*  43 */ "bodyStmt ::= actionStmt SEMICOLON",
 /*  44 */ "bodyStmt ::= if_stmt",
 /*  45 */ "bodyStmt ::= while_stmt",
 /*  46 */ "bodyStmt ::= for_stmt",
 /*  47 */ "bodyStmt ::= foreach_stmt",
 /*  48 */ "bodyStmt ::= continue_stmt SEMICOLON",
 /*  49 */ "bodyStmt ::= break_stmt SEMICOLON",
 /*  50 */ "bodyStmt ::= return_stmt SEMICOLON",
 /*  51 */ "bodyStmtList ::= bodyStmt",
 /*  52 */ "bodyStmtList ::= bodyStmtList bodyStmt",
 /*  53 */ "bodyStmtList ::= bodyStmtList error SEMICOLON",
 /*  54 */ "numList_nonEmpty ::= NUMBER",
 /*  55 */ "numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER",
 /*  56 */ "typedName ::= NAME",
 /*  57 */ "typedName ::= NAME COLON expr",
 /*  58 */ "typedNameList_nonEmpty ::= typedName",
 /*  59 */ "typedNameList_nonEmpty ::= typedName COMMA typedNameList_nonEmpty",
 /*  60 */ "typedNameList ::=",
 /*  61 */ "typedNameList ::= typedNameList_nonEmpty",
 /*  62 */ "nameList_nonEmpty ::= NAME",
 /*  63 */ "nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME",
 /*  64 */ "exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET",
 /*  65 */ "expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET",
 /*  66 */ "exprList_nonEmpty ::= expr",
 /*  67 */ "exprList_nonEmpty ::= exprList_nonEmpty COMMA expr",
 /*  68 */ "exprList ::=",
 /*  69 */ "exprList ::= exprList_nonEmpty",
 /*  70 */ "expr ::= NUMBER",
 /*  71 */ "expr ::= KILLS",
 /*  72 */ "expr ::= NAME",
 /*  73 */ "expr ::= expr PERIOD NAME",
 /*  74 */ "expr ::= expr LSQBRACKET expr RSQBRACKET",
 /*  75 */ "lambdaExprStart ::= FUNCTION LPAREN typedNameList RPAREN fdef_rettypes",
 /*  76 */ "expr ::= lambdaExprStart stmt",
 /*  77 */ "fArg ::= expr",
 /*  78 */ "fArg ::= STRING",
 /*  79 */ "fArg ::= NAME ASSIGN expr",
 /*  80 */ "fArgs_nonEmpty ::= fArg",
 /*  81 */ "fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArg",
 /*  82 */ "fArgs ::=",
 /*  83 */ "fArgs ::= fArgs_nonEmpty",
 /*  84 */ "funcexprStmt ::= funcexpr",
 /*  85 */ "funcexpr ::= NAME LPAREN fArgs RPAREN",
 /*  86 */ "funcexpr ::= expr LPAREN fArgs RPAREN",
 /*  87 */ "expr ::= funcexpr",
 /*  88 */ "expr ::= LPAREN expr RPAREN",
 /*  89 */ "commaSkippable ::= COMMA",
 /*  90 */ "commaSkippable ::=",
 /*  91 */ "expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET",
 /*  92 */ "expr ::= L2V LPAREN expr RPAREN",
 /*  93 */ "expr ::= MAPSTRING LPAREN STRING RPAREN",
 /*  94 */ "expr ::= UNIT LPAREN STRING RPAREN",
 /*  95 */ "expr ::= SWITCH LPAREN STRING RPAREN",
 /*  96 */ "expr ::= LOCATION LPAREN STRING RPAREN",
 /*  97 */ "expr ::= expr QMARK expr COLON expr",
 /*  98 */ "expr ::= expr PLUS expr",
 /*  99 */ "expr ::= expr MINUS expr",
 /* 100 */ "expr ::= expr MULTIPLY expr",
 /* 101 */ "expr ::= expr DIVIDE expr",
 /* 102 */ "expr ::= expr MOD expr",
 /* 103 */ "expr ::= expr LSHIFT expr",
 /* 104 */ "expr ::= expr RSHIFT expr",
 /* 105 */ "expr ::= expr BITAND expr",
 /* 106 */ "expr ::= expr BITOR expr",
 /* 107 */ "expr ::= expr BITXOR expr",
 /* 108 */ "expr ::= PLUS expr",
 /* 109 */ "expr ::= MINUS expr",
 /* 110 */ "expr ::= BITNOT expr",
 /* 111 */ "expr ::= expr EQ expr",
 /* 112 */ "expr ::= expr NE expr",
 /* 113 */ "expr ::= expr LE expr",
 /* 114 */ "expr ::= expr GE expr",
 /* 115 */ "expr ::= expr LT expr",
 /* 116 */ "expr ::= expr GT expr",
 /* 117 */ "expr ::= expr LAND expr",
 /* 118 */ "expr ::= expr LOR expr",
 /* 119 */ "expr ::= LNOT expr",
 /* 120 */ "vdef_stmt ::= VAR nameList_nonEmpty",
 /* 121 */ "vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 122 */ "vdefAssignStatic_stmt ::= STATIC VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 123 */ "vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 124 */ "cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 125 */ "cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 126 */ "lvalue ::= NAME",
 /* 127 */ "lvalue ::= expr LSQBRACKET expr RSQBRACKET",
 /* 128 */ "lvalue ::= expr PERIOD NAME",
 /* 129 */ "lvalueList_nonEmpty ::= lvalue",
 /* 130 */ "lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue",
 /* 131 */ "assign_stmt ::= lvalue ASSIGN expr",
 /* 132 */ "assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 133 */ "assign_stmt ::= INC expr",
 /* 134 */ "assign_stmt ::= expr INC",
 /* 135 */ "assign_stmt ::= DEC expr",
 /* 136 */ "assign_stmt ::= expr DEC",
 /* 137 */ "assign_stmt ::= lvalue IADD expr",
 /* 138 */ "assign_stmt ::= lvalue ISUB expr",
 /* 139 */ "assign_stmt ::= lvalue IMUL expr",
 /* 140 */ "assign_stmt ::= lvalue IDIV expr",
 /* 141 */ "assign_stmt ::= lvalue IMOD expr",
 /* 142 */ "assign_stmt ::= lvalue ILSH expr",
 /* 143 */ "assign_stmt ::= lvalue IRSH expr",
 /* 144 */ "assign_stmt ::= lvalue IBND expr",
 /* 145 */ "assign_stmt ::= lvalue IBOR expr",
 /* 146 */ "assign_stmt ::= lvalue IBXR expr",
 /* 147 */ "if_start ::= IF",
 /* 148 */ "if_header ::= if_start LPAREN expr",
 /* 149 */ "if_block ::= if_header RPAREN stmt",
 /* 150 */ "elif_start ::= ELSE IF",
 /* 151 */ "elif_header ::= elif_start LPAREN expr",
 /* 152 */ "if_block ::= if_block elif_header RPAREN stmt",
 /* 153 */ "else_header ::= ELSE",
 /* 154 */ "if_stmt ::= if_block",
 /* 155 */ "if_stmt ::= if_block else_header stmt",
 /* 156 */ "while_start ::= WHILE",
 /* 157 */ "while_header ::= while_start LPAREN expr",
 /* 158 */ "while_stmt ::= while_header RPAREN stmt",
 /* 159 */ "for_opener ::= FOR LPAREN",
 /* 160 */ "for_init_stmt_nonEmpty ::= vdef_stmt",
 /* 161 */ "for_init_stmt_nonEmpty ::= vdefAssign_stmt",
 /* 162 */ "for_init_stmt_nonEmpty ::= cdef_stmt",
 /* 163 */ "for_init_stmt_nonEmpty ::= assign_stmt",
 /* 164 */ "for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty",
 /* 165 */ "for_init_stmt ::= for_init_stmt_nonEmpty",
 /* 166 */ "for_init_stmt ::=",
 /* 167 */ "for_action_stmt_nonEmpty ::= funcexprStmt",
 /* 168 */ "for_action_stmt_nonEmpty ::= assign_stmt",
 /* 169 */ "for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty",
 /* 170 */ "for_action_stmt ::=",
 /* 171 */ "for_action_stmt ::= for_action_stmt_nonEmpty",
 /* 172 */ "for_header1 ::= for_opener for_init_stmt SEMICOLON",
 /* 173 */ "for_header2 ::= for_header1 expr SEMICOLON",
 /* 174 */ "for_header ::= for_header2 for_action_stmt",
 /* 175 */ "for_stmt ::= for_header RPAREN stmt",
 /* 176 */ "foreach_opener ::= FOREACH LPAREN",
 /* 177 */ "foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty",
 /* 178 */ "foreach_stmt ::= foreach_header RPAREN stmt",
 /* 179 */ "continue_stmt ::= CONTINUE",
 /* 180 */ "break_stmt ::= BREAK",
 /* 181 */ "return_stmt ::= RETURN exprList",
 /* 182 */ "expr ::= CONDITIONNAME LPAREN fArgs RPAREN",
 /* 183 */ "expr ::= KILLS LPAREN fArgs RPAREN",
 /* 184 */ "actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* IFX */
    case 2: /* ELSE */
    case 3: /* ASSIGN */
    case 4: /* QMARK */
    case 5: /* COMMA */
    case 6: /* LOR */
    case 7: /* LAND */
    case 8: /* LNOT */
    case 9: /* EQ */
    case 10: /* LE */
    case 11: /* LT */
    case 12: /* GE */
    case 13: /* GT */
    case 14: /* NE */
    case 15: /* BITOR */
    case 16: /* BITXOR */
    case 17: /* BITAND */
    case 18: /* LSHIFT */
    case 19: /* RSHIFT */
    case 20: /* PLUS */
    case 21: /* MINUS */
    case 22: /* DIVIDE */
    case 23: /* MULTIPLY */
    case 24: /* MOD */
    case 25: /* UNARY */
    case 26: /* BITNOT */
    case 27: /* LPAREN */
    case 28: /* LSQBRACKET */
    case 29: /* PERIOD */
    case 30: /* SEMICOLON */
    case 31: /* NAME */
    case 32: /* IMPORT */
    case 33: /* AS */
    case 34: /* COLON */
    case 35: /* FUNCTION */
    case 36: /* RPAREN */
    case 37: /* OBJECT */
    case 38: /* LBRACKET */
    case 39: /* VAR */
    case 40: /* RBRACKET */
    case 41: /* NUMBER */
    case 42: /* RSQBRACKET */
    case 43: /* SUBSCRIPT */
    case 44: /* KILLS */
    case 45: /* MEMBER */
    case 46: /* STRING */
    case 47: /* FUNCCALL */
    case 48: /* L2V */
    case 49: /* MAPSTRING */
    case 50: /* UNIT */
    case 51: /* SWITCH */
    case 52: /* LOCATION */
    case 53: /* STATIC */
    case 54: /* CONST */
    case 55: /* INC */
    case 56: /* DEC */
    case 57: /* IADD */
    case 58: /* ISUB */
    case 59: /* IMUL */
    case 60: /* IDIV */
    case 61: /* IMOD */
    case 62: /* ILSH */
    case 63: /* IRSH */
    case 64: /* IBND */
    case 65: /* IBOR */
    case 66: /* IBXR */
    case 67: /* IF */
    case 68: /* WHILE */
    case 69: /* FOR */
    case 70: /* FOREACH */
    case 71: /* CONTINUE */
    case 72: /* BREAK */
    case 73: /* RETURN */
    case 74: /* CONDITIONNAME */
    case 75: /* ACTIONNAME */
{
 delete (yypminor->yy0); 
}
      break;
      /* Default NON-TERMINAL Destructor */
    case 76: /* error */
    case 77: /* program */
    case 78: /* chunks */
    case 79: /* chunk */
    case 80: /* import_chunk */
    case 81: /* fdef_chunk */
    case 82: /* fdecl_chunk */
    case 83: /* object_chunk */
    case 84: /* vdef_stmt */
    case 85: /* vdefAssign_global_stmt */
    case 86: /* cdef_global_stmt */
    case 87: /* blockStmt */
    case 88: /* dottedName */
    case 89: /* fdef_rettypes */
    case 90: /* exprList_nonEmpty */
    case 91: /* fdef_header */
    case 92: /* typedNameList */
    case 93: /* stmt */
    case 94: /* object_body */
    case 95: /* typedNameList_nonEmpty */
    case 96: /* method_header */
    case 97: /* method_chunk */
    case 98: /* bodyStmt */
    case 99: /* lbracket */
    case 100: /* rbracket */
    case 101: /* blockStmtSub */
    case 102: /* bodyStmtList */
    case 103: /* vdefAssignStatic_stmt */
    case 104: /* vdefAssign_stmt */
    case 105: /* cdef_stmt */
    case 106: /* assign_stmt */
    case 107: /* funcexprStmt */
    case 108: /* actionStmt */
    case 109: /* if_stmt */
    case 110: /* while_stmt */
    case 111: /* for_stmt */
    case 112: /* foreach_stmt */
    case 113: /* continue_stmt */
    case 114: /* break_stmt */
    case 115: /* return_stmt */
    case 116: /* numList_nonEmpty */
    case 117: /* typedName */
    case 118: /* expr */
    case 119: /* nameList_nonEmpty */
    case 120: /* funcexpr */
    case 121: /* exprList */
    case 122: /* lambdaExprStart */
    case 123: /* fArg */
    case 124: /* fArgs_nonEmpty */
    case 125: /* fArgs */
    case 126: /* commaSkippable */
    case 127: /* lvalue */
    case 128: /* lvalueList_nonEmpty */
    case 129: /* if_start */
    case 130: /* if_header */
    case 131: /* if_block */
    case 132: /* elif_start */
    case 133: /* elif_header */
    case 134: /* else_header */
    case 135: /* while_start */
    case 136: /* while_header */
    case 137: /* for_opener */
    case 138: /* for_init_stmt_nonEmpty */
    case 139: /* for_init_stmt */
    case 140: /* for_action_stmt_nonEmpty */
    case 141: /* for_action_stmt */
    case 142: /* for_header1 */
    case 143: /* for_header2 */
    case 144: /* for_header */
    case 145: /* foreach_opener */
    case 146: /* foreach_header */
{
 delete (yypminor->yy0); 
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 77, 1 },
  { 78, 0 },
  { 78, 2 },
  { 79, 2 },
  { 79, 2 },
  { 79, 1 },
  { 79, 1 },
  { 79, 1 },
  { 79, 2 },
  { 79, 2 },
  { 79, 2 },
  { 79, 1 },
  { 88, 1 },
  { 88, 3 },
  { 80, 4 },
  { 80, 2 },
  { 89, 0 },
  { 89, 2 },
  { 91, 6 },
  { 81, 2 },
  { 82, 6 },
  { 94, 3 },
  { 94, 4 },
  { 96, 6 },
  { 97, 2 },
  { 94, 2 },
  { 83, 3 },
  { 93, 2 },
  { 93, 1 },
  { 99, 1 },
  { 100, 1 },
  { 87, 2 },
  { 87, 3 },
  { 101, 1 },
  { 101, 2 },
  { 98, 1 },
  { 98, 1 },
  { 98, 2 },
  { 98, 2 },
  { 98, 2 },
  { 98, 2 },
  { 98, 2 },
  { 98, 2 },
  { 98, 2 },
  { 98, 1 },
  { 98, 1 },
  { 98, 1 },
  { 98, 1 },
  { 98, 2 },
  { 98, 2 },
  { 98, 2 },
  { 102, 1 },
  { 102, 2 },
  { 102, 3 },
  { 116, 1 },
  { 116, 3 },
  { 117, 1 },
  { 117, 3 },
  { 95, 1 },
  { 95, 3 },
  { 92, 0 },
  { 92, 1 },
  { 119, 1 },
  { 119, 3 },
  { 90, 6 },
  { 118, 6 },
  { 90, 1 },
  { 90, 3 },
  { 121, 0 },
  { 121, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 1 },
  { 118, 3 },
  { 118, 4 },
  { 122, 5 },
  { 118, 2 },
  { 123, 1 },
  { 123, 1 },
  { 123, 3 },
  { 124, 1 },
  { 124, 3 },
  { 125, 0 },
  { 125, 1 },
  { 107, 1 },
  { 120, 4 },
  { 120, 4 },
  { 118, 1 },
  { 118, 3 },
  { 126, 1 },
  { 126, 0 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 4 },
  { 118, 5 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 2 },
  { 118, 2 },
  { 118, 2 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 3 },
  { 118, 2 },
  { 84, 2 },
  { 104, 4 },
  { 103, 5 },
  { 85, 4 },
  { 105, 4 },
  { 86, 4 },
  { 127, 1 },
  { 127, 4 },
  { 127, 3 },
  { 128, 1 },
  { 128, 3 },
  { 106, 3 },
  { 106, 3 },
  { 106, 2 },
  { 106, 2 },
  { 106, 2 },
  { 106, 2 },
  { 106, 3 },
  { 106, 3 },
  { 106, 3 },
  { 106, 3 },
  { 106, 3 },
  { 106, 3 },
  { 106, 3 },
  { 106, 3 },
  { 106, 3 },
  { 106, 3 },
  { 129, 1 },
  { 130, 3 },
  { 131, 3 },
  { 132, 2 },
  { 133, 3 },
  { 131, 4 },
  { 134, 1 },
  { 109, 1 },
  { 109, 3 },
  { 135, 1 },
  { 136, 3 },
  { 110, 3 },
  { 137, 2 },
  { 138, 1 },
  { 138, 1 },
  { 138, 1 },
  { 138, 1 },
  { 138, 3 },
  { 139, 1 },
  { 139, 0 },
  { 140, 1 },
  { 140, 1 },
  { 140, 3 },
  { 141, 0 },
  { 141, 1 },
  { 142, 3 },
  { 143, 3 },
  { 144, 2 },
  { 111, 3 },
  { 145, 2 },
  { 146, 4 },
  { 112, 3 },
  { 113, 1 },
  { 114, 1 },
  { 115, 2 },
  { 118, 4 },
  { 118, 4 },
  { 108, 4 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* program ::= chunks */
{
  yy_destructor(yypParser,78,&yymsp[0].minor);
}
        break;
      case 2: /* chunks ::= chunks chunk */
{
  yy_destructor(yypParser,78,&yymsp[-1].minor);
  yy_destructor(yypParser,79,&yymsp[0].minor);
}
        break;
      case 3: /* chunk ::= error SEMICOLON */
{
    throw_error(13494, "Chunk-level error");
  yy_destructor(yypParser,76,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 4: /* chunk ::= import_chunk SEMICOLON */
{
  yy_destructor(yypParser,80,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 5: /* chunk ::= fdef_chunk */
{
  yy_destructor(yypParser,81,&yymsp[0].minor);
}
        break;
      case 6: /* chunk ::= fdecl_chunk */
{
  yy_destructor(yypParser,82,&yymsp[0].minor);
}
        break;
      case 7: /* chunk ::= object_chunk */
{
  yy_destructor(yypParser,83,&yymsp[0].minor);
}
        break;
      case 8: /* chunk ::= vdef_stmt SEMICOLON */
      case 37: /* bodyStmt ::= vdef_stmt SEMICOLON */ yytestcase(yyruleno==37);
{
  yy_destructor(yypParser,84,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 9: /* chunk ::= vdefAssign_global_stmt SEMICOLON */
{
  yy_destructor(yypParser,85,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 10: /* chunk ::= cdef_global_stmt SEMICOLON */
{
  yy_destructor(yypParser,86,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 11: /* chunk ::= blockStmt */
{
    throw_error(48993, "Misplaced block statement");
  yy_destructor(yypParser,87,&yymsp[0].minor);
}
        break;
      case 12: /* dottedName ::= NAME */
      case 54: /* numList_nonEmpty ::= NUMBER */ yytestcase(yyruleno==54);
      case 61: /* typedNameList ::= typedNameList_nonEmpty */ yytestcase(yyruleno==61);
      case 62: /* nameList_nonEmpty ::= NAME */ yytestcase(yyruleno==62);
      case 66: /* exprList_nonEmpty ::= expr */ yytestcase(yyruleno==66);
      case 69: /* exprList ::= exprList_nonEmpty */ yytestcase(yyruleno==69);
      case 70: /* expr ::= NUMBER */ yytestcase(yyruleno==70);
      case 77: /* fArg ::= expr */ yytestcase(yyruleno==77);
      case 78: /* fArg ::= STRING */ yytestcase(yyruleno==78);
      case 80: /* fArgs_nonEmpty ::= fArg */ yytestcase(yyruleno==80);
      case 83: /* fArgs ::= fArgs_nonEmpty */ yytestcase(yyruleno==83);
      case 87: /* expr ::= funcexpr */ yytestcase(yyruleno==87);
      case 129: /* lvalueList_nonEmpty ::= lvalue */ yytestcase(yyruleno==129);
{ yygotominor.yy0 = yymsp[0].minor.yy0; }
        break;
      case 13: /* dottedName ::= dottedName PERIOD NAME */
{
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = yymsp[0].minor.yy0;
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
        break;
      case 14: /* import_chunk ::= IMPORT dottedName AS NAME */
{
    std::string impPath, impModname;
    impPathProcess(yymsp[-2].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(yymsp[0].minor.yy0->data)) {
        throw_error(6754, "Importing already-declared module " + yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << " as " << yymsp[0].minor.yy0->data << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,32,&yymsp[-3].minor);
  yy_destructor(yypParser,33,&yymsp[-1].minor);
}
        break;
      case 15: /* import_chunk ::= IMPORT dottedName */
{
    std::string impPath, impModname;
    impPathProcess(yymsp[0].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(impModname)) {
        throw_error(6754, "Importing already-declared module " + impModname, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << std::endl;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,32,&yymsp[-1].minor);
}
        break;
      case 16: /* fdef_rettypes ::= */
      case 60: /* typedNameList ::= */ yytestcase(yyruleno==60);
{ yygotominor.yy0 = nullptr; }
        break;
      case 17: /* fdef_rettypes ::= COLON exprList_nonEmpty */
{ yygotominor.yy0 = yymsp[0].minor.yy0;   yy_destructor(yypParser,34,&yymsp[-1].minor);
}
        break;
      case 18: /* fdef_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes */
{
    // Preprocess yymsp[-4].minor.yy0
    funcNamePreprocess(yymsp[-4].minor.yy0->data);
    if(!ps->closure.defFunction(yymsp[-4].minor.yy0->data)) {
        throw_error(4495, "Duplicate function " + yymsp[-4].minor.yy0->data, yymsp[-4].minor.yy0->line);
    }

    ps->closure.pushScope();
    currentFunction = yymsp[-4].minor.yy0->data;

    // Register variables.
    // yymsp[-2].minor.yy0->data is a comma-seperated list of (yymsp[-4].minor.yy0, type). To pair names and types,
    // we store varname in odd loops and define variables on even loops.
    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = !!yymsp[0].minor.yy0;

    subTokenListIter(yymsp[-2].minor.yy0, [&](const Token* typedNameToken) {
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(196, ("Redeclaration of variable \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(7714, ("Redeclaration of typed constant \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
    });

    // Add decorator header
    if (!isTypedFunction) {
        if(MAP_DEBUG) ps->gen << "@EUDTracedFunc" << std::endl;
        else ps->gen << "@EUDFunc" << std::endl;
    }
    else {
        if(MAP_DEBUG) ps->gen << "@EUDTracedTypedFunc([";
        else ps->gen << "@EUDTypedFunc([";
        writeStringList(ps->gen, types);
        if(!yymsp[0].minor.yy0) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    // Write argument names
    ps->gen << "def " << yymsp[-4].minor.yy0->data << "(";
    writeStringList(ps->gen, argnames);
    ps->gen << "):" << std::endl;

    ps->gen.indent();

    tmpIndex = 1;
    delete yymsp[-4].minor.yy0;
    delete yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,35,&yymsp[-5].minor);
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
        break;
      case 19: /* fdef_chunk ::= fdef_header stmt */
{
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
  yy_destructor(yypParser,91,&yymsp[-1].minor);
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 20: /* fdecl_chunk ::= FUNCTION NAME LPAREN typedNameList RPAREN SEMICOLON */
{
    // Preprocess yymsp[-4].minor.yy0
    funcNamePreprocess(yymsp[-4].minor.yy0->data);
    if(!ps->closure.declareFunction(yymsp[-4].minor.yy0->data)) {
        throw_error(72461, "Declaring function with non-function yymsp[-4].minor.yy0 " + yymsp[-4].minor.yy0->data, yymsp[-4].minor.yy0->line);
    }
  yy_destructor(yypParser,35,&yymsp[-5].minor);
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,92,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 21: /* object_body ::= OBJECT NAME LBRACKET */
{
    ps->gen << "class " << yymsp[-1].minor.yy0->data << "(EUDStruct):\n";
    ps->gen.indent();

    if(!ps->closure.defConstant(yymsp[-1].minor.yy0->data)) {
        throw_error(8228, "Declaring object with non-function yymsp[-1].minor.yy0 " + yymsp[-1].minor.yy0->data, yymsp[-1].minor.yy0->line);
    }
    ps->closure.pushScope();

    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[-1].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;
  yy_destructor(yypParser,37,&yymsp[-2].minor);
  yy_destructor(yypParser,38,&yymsp[0].minor);
}
        break;
      case 22: /* object_body ::= object_body VAR typedNameList_nonEmpty SEMICOLON */
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;

    // Append to subTokenList
    Token* t = genEmpty();
    t->subToken[0] = yymsp[-1].minor.yy0;
    t->subToken[1] = nullptr;
    subTokenListGetTail(yygotominor.yy0)->subToken[1] = t;
    yygotominor.yy0->line = currentTokenizingLine;
  yy_destructor(yypParser,39,&yymsp[-2].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 23: /* method_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes */
{
    // Method can't be called directly, so we shouldn't have to register it to closure.
    // duplicate method names should be checked at python-compile time.

    ps->closure.pushScope();

    // Register variables.
    std::string _this = "this";  // This may be modified...?
    if(!ps->closure.defConstant(_this)) {
        throw_error(656, ("Redeclaration of variable \'this\'"), yymsp[-2].minor.yy0->line);
    }

    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = !!yymsp[0].minor.yy0;
    subTokenListIter(yymsp[-2].minor.yy0, [&](const Token* typedNameToken) {
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(2656, ("Redeclaration of variable \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(9788, ("Redeclaration of typed constant \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
    });

    // Add decorator header
    if (!isTypedFunction) {
        if(MAP_DEBUG) ps->gen << "@EUDTracedMethod\n";
        else ps->gen << "@EUDMethod\n";
    }
    else {
        if(MAP_DEBUG) ps->gen << "@EUDTracedTypedMethod([";
        else ps->gen << "@EUDTypedMethod([";
        writeStringList(ps->gen, types);
        if(!yymsp[0].minor.yy0) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    // Add default argument 'self'
    ps->gen << "def " << yymsp[-4].minor.yy0->data << "(" << _this;
    if (argnames.empty()) ps->gen << "):" << std::endl;
    else {
        ps->gen << ", ";
        writeStringList(ps->gen, argnames);
        ps->gen << "):" << std::endl;
    }
    ps->gen.indent();

    currentFunction = yymsp[-4].minor.yy0->data;

    tmpIndex = 1;
    delete yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-4].minor.yy0);
  yy_destructor(yypParser,35,&yymsp[-5].minor);
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
        break;
      case 24: /* method_chunk ::= method_header stmt */
{
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
    yygotominor.yy0 = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 25: /* object_body ::= object_body method_chunk */
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    yygotominor.yy0->line = currentTokenizingLine;
  yy_destructor(yypParser,97,&yymsp[0].minor);
}
        break;
      case 26: /* object_chunk ::= object_body RBRACKET SEMICOLON */
{
    ps->gen << "_fields_ = [\n";
    subTokenListIter(yymsp[-2].minor.yy0->subToken[1], [&](const Token* tok) {
        subTokenListIter(tok, [&](const Token* nameType) {
            ps->gen.indent();
            if(nameType->subToken[1]) {
                ps->gen << "('" << nameType->subToken[0]->data << "', " << nameType->subToken[1]->data << "),\n";
            }
            else {
                ps->gen << "'" << nameType->subToken[0]->data << "',\n";
            }
            ps->gen.unindent(false);
        });
    });
    ps->gen << "]\n";
    ps->closure.popScope();
    ps->gen.unindent(true);
    delete yymsp[-2].minor.yy0;
  yy_destructor(yypParser,40,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 27: /* stmt ::= error SEMICOLON */
{ throw_error(6974, "Error while parsing statement", yymsp[0].minor.yy0->line); delete yymsp[0].minor.yy0;   yy_destructor(yypParser,76,&yymsp[-1].minor);
}
        break;
      case 28: /* stmt ::= bodyStmt */
      case 51: /* bodyStmtList ::= bodyStmt */ yytestcase(yyruleno==51);
{
  yy_destructor(yypParser,98,&yymsp[0].minor);
}
        break;
      case 29: /* lbracket ::= LBRACKET */
{ ps->closure.pushScope();   yy_destructor(yypParser,38,&yymsp[0].minor);
}
        break;
      case 30: /* rbracket ::= RBRACKET */
{ ps->closure.popScope();   yy_destructor(yypParser,40,&yymsp[0].minor);
}
        break;
      case 31: /* blockStmt ::= blockStmtSub rbracket */
{
  yy_destructor(yypParser,101,&yymsp[-1].minor);
  yy_destructor(yypParser,100,&yymsp[0].minor);
}
        break;
      case 32: /* blockStmt ::= lbracket error RBRACKET */
{
    throw_error(6298, "Block not terminated properly.", yymsp[0].minor.yy0->line);
    ps->closure.popScope();
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,99,&yymsp[-2].minor);
  yy_destructor(yypParser,76,&yymsp[-1].minor);
}
        break;
      case 33: /* blockStmtSub ::= lbracket */
{
  yy_destructor(yypParser,99,&yymsp[0].minor);
}
        break;
      case 34: /* blockStmtSub ::= lbracket bodyStmtList */
{
  yy_destructor(yypParser,99,&yymsp[-1].minor);
  yy_destructor(yypParser,102,&yymsp[0].minor);
}
        break;
      case 35: /* bodyStmt ::= blockStmt */
{
  yy_destructor(yypParser,87,&yymsp[0].minor);
}
        break;
      case 36: /* bodyStmt ::= SEMICOLON */
{
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 38: /* bodyStmt ::= vdefAssignStatic_stmt SEMICOLON */
{
  yy_destructor(yypParser,103,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 39: /* bodyStmt ::= vdefAssign_stmt SEMICOLON */
{
  yy_destructor(yypParser,104,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 40: /* bodyStmt ::= cdef_stmt SEMICOLON */
{
  yy_destructor(yypParser,105,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 41: /* bodyStmt ::= assign_stmt SEMICOLON */
{
  yy_destructor(yypParser,106,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 42: /* bodyStmt ::= funcexprStmt SEMICOLON */
{
  yy_destructor(yypParser,107,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 43: /* bodyStmt ::= actionStmt SEMICOLON */
{
  yy_destructor(yypParser,108,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 44: /* bodyStmt ::= if_stmt */
{
  yy_destructor(yypParser,109,&yymsp[0].minor);
}
        break;
      case 45: /* bodyStmt ::= while_stmt */
{
  yy_destructor(yypParser,110,&yymsp[0].minor);
}
        break;
      case 46: /* bodyStmt ::= for_stmt */
{
  yy_destructor(yypParser,111,&yymsp[0].minor);
}
        break;
      case 47: /* bodyStmt ::= foreach_stmt */
{
  yy_destructor(yypParser,112,&yymsp[0].minor);
}
        break;
      case 48: /* bodyStmt ::= continue_stmt SEMICOLON */
{
  yy_destructor(yypParser,113,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 49: /* bodyStmt ::= break_stmt SEMICOLON */
{
  yy_destructor(yypParser,114,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 50: /* bodyStmt ::= return_stmt SEMICOLON */
{
  yy_destructor(yypParser,115,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 52: /* bodyStmtList ::= bodyStmtList bodyStmt */
{
  yy_destructor(yypParser,102,&yymsp[-1].minor);
  yy_destructor(yypParser,98,&yymsp[0].minor);
}
        break;
      case 53: /* bodyStmtList ::= bodyStmtList error SEMICOLON */
{
    throw_error(8510, "Incomplete statement. Check if the previous line have ended properly.");
  yy_destructor(yypParser,102,&yymsp[-2].minor);
  yy_destructor(yypParser,76,&yymsp[-1].minor);
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 55: /* numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER */
      case 63: /* nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME */ yytestcase(yyruleno==63);
      case 130: /* lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue */ yytestcase(yyruleno==130);
{ yygotominor.yy0 = commaConcat(yymsp[-2].minor.yy0, yymsp[0].minor.yy0);   yy_destructor(yypParser,5,&yymsp[-1].minor);
}
        break;
      case 56: /* typedName ::= NAME */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;  // Type is null.
}
        break;
      case 57: /* typedName ::= NAME COLON expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
        break;
      case 58: /* typedNameList_nonEmpty ::= typedName */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;
}
        break;
      case 59: /* typedNameList_nonEmpty ::= typedName COMMA typedNameList_nonEmpty */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;
  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
        break;
      case 64: /* exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = "_SRET(" + yymsp[-5].minor.yy0->data + ", [" + yymsp[-2].minor.yy0->data + "])";
    delete yymsp[-5].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
  yy_destructor(yypParser,28,&yymsp[-4].minor);
  yy_destructor(yypParser,28,&yymsp[-3].minor);
  yy_destructor(yypParser,42,&yymsp[-1].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
        break;
      case 65: /* expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = yymsp[-5].minor.yy0->data + "[" + yymsp[-2].minor.yy0->data + "]";
    delete yymsp[-5].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
  yy_destructor(yypParser,28,&yymsp[-4].minor);
  yy_destructor(yypParser,28,&yymsp[-3].minor);
  yy_destructor(yypParser,42,&yymsp[-1].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
        break;
      case 67: /* exprList_nonEmpty ::= exprList_nonEmpty COMMA expr */
{ yygotominor.yy0 = new Token((yymsp[-2].minor.yy0->data) + ", " + (yymsp[0].minor.yy0->data), yymsp[0].minor.yy0->line); delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,5,&yymsp[-1].minor);
}
        break;
      case 68: /* exprList ::= */
      case 82: /* fArgs ::= */ yytestcase(yyruleno==82);
{ yygotominor.yy0 = genEmpty(); }
        break;
      case 71: /* expr ::= KILLS */
{
    yymsp[0].minor.yy0->data = "4";
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 72: /* expr ::= NAME */
{
    checkIsRValue(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 73: /* expr ::= expr PERIOD NAME */
{
    yymsp[-2].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[0].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
        break;
      case 74: /* expr ::= expr LSQBRACKET expr RSQBRACKET */
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "[" + yymsp[-1].minor.yy0->data + "]";
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
  yy_destructor(yypParser,28,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
        break;
      case 75: /* lambdaExprStart ::= FUNCTION LPAREN typedNameList RPAREN fdef_rettypes */
{
    std::string funcname = "_lambda" + std::to_string(++lambdaIndex);
    ps->closure.pushScope();

    // Register variables.
    // we store varname in odd loops and define variables on even loops.
    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = false;

    subTokenListIter(yymsp[-2].minor.yy0, [&](const Token* typedNameToken) {
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(196, ("Redeclaration of variable \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(7714, ("Redeclaration of typed constant \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
    });

    // Add decorator header
    if (!isTypedFunction) {
        if(MAP_DEBUG) ps->gen << "@EUDTracedFunc" << std::endl;
        else ps->gen << "@EUDFunc" << std::endl;
    }
    else {
        if(MAP_DEBUG) ps->gen << "@EUDTracedTypedFunc([";
        else ps->gen << "@EUDTypedFunc([";
        writeStringList(ps->gen, types);
        if(!yymsp[0].minor.yy0) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    // Write argument names
    ps->gen << "def " << funcname << "(";
    writeStringList(ps->gen, argnames);
    ps->gen << "):" << std::endl;

    ps->gen.indent();
    tmpIndex = 1;

    delete yymsp[-2].minor.yy0;

    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->data = funcname;
  yy_destructor(yypParser,35,&yymsp[-4].minor);
  yy_destructor(yypParser,27,&yymsp[-3].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
}
        break;
      case 76: /* expr ::= lambdaExprStart stmt */
{
    ps->gen.unindent(true);
    ps->closure.popScope();
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 79: /* fArg ::= NAME ASSIGN expr */
{  // Keyword argument
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "=" + yymsp[0].minor.yy0->data;
    yymsp[0].minor.yy0->type = TOKEN_TEMP;
    yygotominor.yy0 = yymsp[0].minor.yy0;
    delete yymsp[-2].minor.yy0;
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 81: /* fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArg */
{
    yymsp[-2].minor.yy0->data = yymsp[-2].minor.yy0->data + ", " + yymsp[0].minor.yy0->data;
    yymsp[-2].minor.yy0->type = TOKEN_TEMP;
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,5,&yymsp[-1].minor);
}
        break;
      case 84: /* funcexprStmt ::= funcexpr */
{
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    ps->gen << yymsp[0].minor.yy0->data << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 85: /* funcexpr ::= NAME LPAREN fArgs RPAREN */
{
    // Preprocess yymsp[-3].minor.yy0
    checkIsFunction(yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
    delete yymsp[-1].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 86: /* funcexpr ::= expr LPAREN fArgs RPAREN */
{
    // If calling function imported from another module, add f_ prefix to function yymsp[-3].minor.yy0.
    static std::regex prefixedFuncNameRegex("^[a-z][_a-zA-Z0-9]*");
    std::string& nameStr = yymsp[-3].minor.yy0->data;
    if(std::count(nameStr.begin(), nameStr.end(), '.') == 1) {
        size_t p = nameStr.find('.');
        std::string moduleName = nameStr.substr(0, p);
        std::string funcName = nameStr.substr(p + 1);
        if (closure->isModule(moduleName) && std::regex_match(funcName, prefixedFuncNameRegex)) {
            funcNamePreprocess(funcName);
            yymsp[-3].minor.yy0->data = moduleName + '.' + funcName;
        }
    }

    // Preprocess yymsp[-3].minor.yy0
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
    delete yymsp[-1].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 88: /* expr ::= LPAREN expr RPAREN */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->data = "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0->type = TOKEN_EXPR;
    yygotominor.yy0->subToken[0] = yymsp[-1].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 89: /* commaSkippable ::= COMMA */
{
  yy_destructor(yypParser,5,&yymsp[0].minor);
}
        break;
      case 91: /* expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = "_ARR(FlattenList([" + yymsp[-2].minor.yy0->data + "]))";
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
  yy_destructor(yypParser,28,&yymsp[-3].minor);
  yy_destructor(yypParser,126,&yymsp[-1].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
        break;
      case 92: /* expr ::= L2V LPAREN expr RPAREN */
{
    yymsp[-1].minor.yy0->data = "_L2V(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,48,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 93: /* expr ::= MAPSTRING LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "GetStringIndex(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,49,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 94: /* expr ::= UNIT LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "EncodeUnit(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,50,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 95: /* expr ::= SWITCH LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "EncodeSwitch(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,51,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 96: /* expr ::= LOCATION LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "GetLocationIndex(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
  yy_destructor(yypParser,52,&yymsp[-3].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 97: /* expr ::= expr QMARK expr COLON expr */
{
    std::stringstream ss;
    ss << "EUDTernary";
    applyNegativeOptimization(ss, yymsp[-4].minor.yy0);
    ss << "(" << yymsp[-2].minor.yy0->data << ")(" << yymsp[0].minor.yy0->data << ")";
    yymsp[0].minor.yy0->data = ss.str();
    delete yymsp[-4].minor.yy0;
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
  yy_destructor(yypParser,4,&yymsp[-3].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
        break;
      case 98: /* expr ::= expr PLUS expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "+",  yymsp[0].minor.yy0);   yy_destructor(yypParser,20,&yymsp[-1].minor);
}
        break;
      case 99: /* expr ::= expr MINUS expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "-",  yymsp[0].minor.yy0);   yy_destructor(yypParser,21,&yymsp[-1].minor);
}
        break;
      case 100: /* expr ::= expr MULTIPLY expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "*",  yymsp[0].minor.yy0);   yy_destructor(yypParser,23,&yymsp[-1].minor);
}
        break;
      case 101: /* expr ::= expr DIVIDE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "//", yymsp[0].minor.yy0);   yy_destructor(yypParser,22,&yymsp[-1].minor);
}
        break;
      case 102: /* expr ::= expr MOD expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "%",  yymsp[0].minor.yy0);   yy_destructor(yypParser,24,&yymsp[-1].minor);
}
        break;
      case 103: /* expr ::= expr LSHIFT expr */
{
    yymsp[0].minor.yy0->data = "_LSH(" + yymsp[-2].minor.yy0->data + "," + yymsp[0].minor.yy0->data + ")";
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
  yy_destructor(yypParser,18,&yymsp[-1].minor);
}
        break;
      case 104: /* expr ::= expr RSHIFT expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">>", yymsp[0].minor.yy0);   yy_destructor(yypParser,19,&yymsp[-1].minor);
}
        break;
      case 105: /* expr ::= expr BITAND expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "&",  yymsp[0].minor.yy0);   yy_destructor(yypParser,17,&yymsp[-1].minor);
}
        break;
      case 106: /* expr ::= expr BITOR expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "|",  yymsp[0].minor.yy0);   yy_destructor(yypParser,15,&yymsp[-1].minor);
}
        break;
      case 107: /* expr ::= expr BITXOR expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "^",  yymsp[0].minor.yy0);   yy_destructor(yypParser,16,&yymsp[-1].minor);
}
        break;
      case 108: /* expr ::= PLUS expr */
{ yymsp[0].minor.yy0->data = "+" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);   yy_destructor(yypParser,20,&yymsp[-1].minor);
}
        break;
      case 109: /* expr ::= MINUS expr */
{ yymsp[0].minor.yy0->data = "-" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);   yy_destructor(yypParser,21,&yymsp[-1].minor);
}
        break;
      case 110: /* expr ::= BITNOT expr */
{ yymsp[0].minor.yy0->data = "~" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);   yy_destructor(yypParser,26,&yymsp[-1].minor);
}
        break;
      case 111: /* expr ::= expr EQ expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "==", yymsp[0].minor.yy0);   yy_destructor(yypParser,9,&yymsp[-1].minor);
}
        break;
      case 112: /* expr ::= expr NE expr */
{ yygotominor.yy0 = negate(binopConcat(yymsp[-2].minor.yy0, "==", yymsp[0].minor.yy0));   yy_destructor(yypParser,14,&yymsp[-1].minor);
}
        break;
      case 113: /* expr ::= expr LE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "<=", yymsp[0].minor.yy0);   yy_destructor(yypParser,10,&yymsp[-1].minor);
}
        break;
      case 114: /* expr ::= expr GE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">=", yymsp[0].minor.yy0);   yy_destructor(yypParser,12,&yymsp[-1].minor);
}
        break;
      case 115: /* expr ::= expr LT expr */
{ yygotominor.yy0 = negate(binopConcat(yymsp[-2].minor.yy0, ">=", yymsp[0].minor.yy0));   yy_destructor(yypParser,11,&yymsp[-1].minor);
}
        break;
      case 116: /* expr ::= expr GT expr */
{ yygotominor.yy0 = negate(binopConcat(yymsp[-2].minor.yy0, "<=", yymsp[0].minor.yy0));   yy_destructor(yypParser,13,&yymsp[-1].minor);
}
        break;
      case 117: /* expr ::= expr LAND expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yygotominor.yy0->type = TOKEN_LAND;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCAnd()";
    shortCircuitCondListGetter(ss, yygotominor.yy0, TOKEN_LAND);
    ss << "()";
    yygotominor.yy0->data = ss.str();
  yy_destructor(yypParser,7,&yymsp[-1].minor);
}
        break;
      case 118: /* expr ::= expr LOR expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yygotominor.yy0->type = TOKEN_LOR;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCOr()";
    shortCircuitCondListGetter(ss, yygotominor.yy0, TOKEN_LOR);
    ss << "()";
    yygotominor.yy0->data = ss.str();
  yy_destructor(yypParser,6,&yymsp[-1].minor);
}
        break;
      case 119: /* expr ::= LNOT expr */
{ yygotominor.yy0 = negate(yymsp[0].minor.yy0);   yy_destructor(yypParser,8,&yymsp[-1].minor);
}
        break;
      case 120: /* vdef_stmt ::= VAR nameList_nonEmpty */
{
    std::string& s = yymsp[0].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"), yymsp[0].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
    }
    else {
        ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    }

    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,39,&yymsp[-1].minor);
}
        break;
      case 121: /* vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    writeTraceInfo(ps->gen, yymsp[-3].minor.yy0);
    delete yymsp[-3].minor.yy0;

    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
        ps->gen << s << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    }
    else {
        ps->gen << s << " = _MVAR([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 122: /* vdefAssignStatic_stmt ::= STATIC VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable(" << yymsp[0].minor.yy0->data << ")" << std::endl;
    }
    else {
        ps->gen << s << " = (EUDVariable(x) for x in (" << yymsp[0].minor.yy0->data << "))" << std::endl;
    }

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,53,&yymsp[-4].minor);
  yy_destructor(yypParser,39,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 123: /* vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    ps->gen << "_IGVA([" << s << "], lambda: [" << yymsp[0].minor.yy0->data << "])" << std::endl;

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,39,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 124: /* cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    writeTraceInfo(ps->gen, yymsp[-3].minor.yy0);
    delete yymsp[-3].minor.yy0;

    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = " << yymsp[0].minor.yy0->data << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 125: /* cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = _CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], 1)[0]" << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable(_CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], " << nameCount << "))" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,54,&yymsp[-3].minor);
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 126: /* lvalue ::= NAME */
{
    checkIsVariable(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 127: /* lvalue ::= expr LSQBRACKET expr RSQBRACKET */
{
    yymsp[-1].minor.yy0->data = "_ARRW(" + yymsp[-3].minor.yy0->data + ", " + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
    delete yymsp[-3].minor.yy0;
  yy_destructor(yypParser,28,&yymsp[-2].minor);
  yy_destructor(yypParser,42,&yymsp[0].minor);
}
        break;
      case 128: /* lvalue ::= expr PERIOD NAME */
{
    yymsp[0].minor.yy0->data = "_ATTW(" + yymsp[-2].minor.yy0->data + ", '" + yymsp[0].minor.yy0->data + "')";
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
    delete yymsp[-2].minor.yy0;
  yy_destructor(yypParser,29,&yymsp[-1].minor);
}
        break;
      case 131: /* assign_stmt ::= lvalue ASSIGN expr */
{
    writeTraceInfo(ps->gen, yymsp[-2].minor.yy0);
    ps->gen << yymsp[-2].minor.yy0->data << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 132: /* assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty */
{
    writeTraceInfo(ps->gen, yymsp[-2].minor.yy0);
    ps->gen << "_SV([" << yymsp[-2].minor.yy0->data << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,3,&yymsp[-1].minor);
}
        break;
      case 133: /* assign_stmt ::= INC expr */
{ writeTraceInfo(ps->gen, yymsp[0].minor.yy0); ps->gen << yymsp[0].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,55,&yymsp[-1].minor);
}
        break;
      case 134: /* assign_stmt ::= expr INC */
{ writeTraceInfo(ps->gen, yymsp[-1].minor.yy0); ps->gen << yymsp[-1].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[-1].minor.yy0;   yy_destructor(yypParser,55,&yymsp[0].minor);
}
        break;
      case 135: /* assign_stmt ::= DEC expr */
{ writeTraceInfo(ps->gen, yymsp[0].minor.yy0); ps->gen << yymsp[0].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,56,&yymsp[-1].minor);
}
        break;
      case 136: /* assign_stmt ::= expr DEC */
{ writeTraceInfo(ps->gen, yymsp[-1].minor.yy0); ps->gen << yymsp[-1].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[-1].minor.yy0;   yy_destructor(yypParser,56,&yymsp[0].minor);
}
        break;
      case 137: /* assign_stmt ::= lvalue IADD expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__iadd__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,57,&yymsp[-1].minor);
}
        break;
      case 138: /* assign_stmt ::= lvalue ISUB expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__isub__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,58,&yymsp[-1].minor);
}
        break;
      case 139: /* assign_stmt ::= lvalue IMUL expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__imul__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,59,&yymsp[-1].minor);
}
        break;
      case 140: /* assign_stmt ::= lvalue IDIV expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__ifloordiv__("  << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,60,&yymsp[-1].minor);
}
        break;
      case 141: /* assign_stmt ::= lvalue IMOD expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__imod__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,61,&yymsp[-1].minor);
}
        break;
      case 142: /* assign_stmt ::= lvalue ILSH expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__ilshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,62,&yymsp[-1].minor);
}
        break;
      case 143: /* assign_stmt ::= lvalue IRSH expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__irshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,63,&yymsp[-1].minor);
}
        break;
      case 144: /* assign_stmt ::= lvalue IBND expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__iand__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,64,&yymsp[-1].minor);
}
        break;
      case 145: /* assign_stmt ::= lvalue IBOR expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__ior__("        << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,65,&yymsp[-1].minor);
}
        break;
      case 146: /* assign_stmt ::= lvalue IBXR expr */
{ writeTraceInfo(ps->gen, yymsp[-2].minor.yy0); ps->gen << yymsp[-2].minor.yy0->data << ".__ixor__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;   yy_destructor(yypParser,66,&yymsp[-1].minor);
}
        break;
      case 147: /* if_start ::= IF */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDIf()" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 148: /* if_header ::= if_start LPAREN expr */
      case 151: /* elif_header ::= elif_start LPAREN expr */ yytestcase(yyruleno==151);
{  // RPAREN is at if_block. see (2)
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
        break;
      case 149: /* if_block ::= if_header RPAREN stmt */
{
  yy_destructor(yypParser,130,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 150: /* elif_start ::= ELSE IF */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen.unindent(false);
    ps->gen << yygotominor.yy0->data << " = EUDElseIf()" << std::endl;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,2,&yymsp[-1].minor);
}
        break;
      case 152: /* if_block ::= if_block elif_header RPAREN stmt */
{
  yy_destructor(yypParser,131,&yymsp[-3].minor);
  yy_destructor(yypParser,133,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 153: /* else_header ::= ELSE */
{
    ps->gen.unindent(false);
    ps->gen << "if EUDElse()():" << std::endl;
    ps->gen.indent();
  yy_destructor(yypParser,2,&yymsp[0].minor);
}
        break;
      case 154: /* if_stmt ::= if_block */
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
  yy_destructor(yypParser,131,&yymsp[0].minor);
}
        break;
      case 155: /* if_stmt ::= if_block else_header stmt */
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
  yy_destructor(yypParser,131,&yymsp[-2].minor);
  yy_destructor(yypParser,134,&yymsp[-1].minor);
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 156: /* while_start ::= WHILE */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 157: /* while_header ::= while_start LPAREN expr */
{  // RPAREN is at while_stmt. see (2)
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
        break;
      case 158: /* while_stmt ::= while_header RPAREN stmt */
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
  yy_destructor(yypParser,136,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 159: /* for_opener ::= FOR LPAREN */
{
    ps->closure.pushScope();
    delete yymsp[-1].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[0].minor);
}
        break;
      case 160: /* for_init_stmt_nonEmpty ::= vdef_stmt */
{
  yy_destructor(yypParser,84,&yymsp[0].minor);
}
        break;
      case 161: /* for_init_stmt_nonEmpty ::= vdefAssign_stmt */
{
  yy_destructor(yypParser,104,&yymsp[0].minor);
}
        break;
      case 162: /* for_init_stmt_nonEmpty ::= cdef_stmt */
{
  yy_destructor(yypParser,105,&yymsp[0].minor);
}
        break;
      case 163: /* for_init_stmt_nonEmpty ::= assign_stmt */
      case 168: /* for_action_stmt_nonEmpty ::= assign_stmt */ yytestcase(yyruleno==168);
{
  yy_destructor(yypParser,106,&yymsp[0].minor);
}
        break;
      case 164: /* for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty */
{
  yy_destructor(yypParser,138,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[-1].minor);
  yy_destructor(yypParser,138,&yymsp[0].minor);
}
        break;
      case 165: /* for_init_stmt ::= for_init_stmt_nonEmpty */
{
  yy_destructor(yypParser,138,&yymsp[0].minor);
}
        break;
      case 167: /* for_action_stmt_nonEmpty ::= funcexprStmt */
{
  yy_destructor(yypParser,107,&yymsp[0].minor);
}
        break;
      case 169: /* for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty */
{
  yy_destructor(yypParser,140,&yymsp[-2].minor);
  yy_destructor(yypParser,5,&yymsp[-1].minor);
  yy_destructor(yypParser,140,&yymsp[0].minor);
}
        break;
      case 171: /* for_action_stmt ::= for_action_stmt_nonEmpty */
{
  yy_destructor(yypParser,140,&yymsp[0].minor);
}
        break;
      case 172: /* for_header1 ::= for_opener for_init_stmt SEMICOLON */
{
    // opening for expr
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,137,&yymsp[-2].minor);
  yy_destructor(yypParser,139,&yymsp[-1].minor);
}
        break;
      case 173: /* for_header2 ::= for_header1 expr SEMICOLON */
{
    writeTraceInfo(ps->gen, yymsp[-1].minor.yy0);

    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0;

    // Opening for assign_statement
    yygotominor.yy0 = genTemp(yymsp[-1].minor.yy0);
    delete yymsp[-1].minor.yy0;
    ps->gen << "def " << yygotominor.yy0->data <<"():" << std::endl;
    ps->gen.indent();
  yy_destructor(yypParser,30,&yymsp[0].minor);
}
        break;
      case 174: /* for_header ::= for_header2 for_action_stmt */
{  // RPAREN is at for_stmt. see (2)
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    ps->gen.unindent(false);
  yy_destructor(yypParser,141,&yymsp[0].minor);
}
        break;
      case 175: /* for_stmt ::= for_header RPAREN stmt */
{
    ps->gen << "EUDSetContinuePoint()" << std::endl;
    ps->gen << yymsp[-2].minor.yy0->data << "()" << std::endl;
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
    ps->closure.popScope();
    delete yymsp[-2].minor.yy0;
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 176: /* foreach_opener ::= FOREACH LPAREN */
{
    ps->closure.pushScope();
  yy_destructor(yypParser,70,&yymsp[-1].minor);
  yy_destructor(yypParser,27,&yymsp[0].minor);
}
        break;
      case 177: /* foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty */
{  // RPAREN is at foreach_stmt. see (2)
    commaListIter(yymsp[-2].minor.yy0->data, [&](std::string& s) {
        ps->closure.defVariable(s);
    });
    ps->gen << "for " << yymsp[-2].minor.yy0->data << " in " << yymsp[0].minor.yy0->data << ":" << std::endl;
    ps->gen.indent();
    delete yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
  yy_destructor(yypParser,145,&yymsp[-3].minor);
  yy_destructor(yypParser,34,&yymsp[-1].minor);
}
        break;
      case 178: /* foreach_stmt ::= foreach_header RPAREN stmt */
{
    ps->gen.unindent(true);
    ps->closure.popScope();
  yy_destructor(yypParser,146,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[-1].minor);
  yy_destructor(yypParser,93,&yymsp[0].minor);
}
        break;
      case 179: /* continue_stmt ::= CONTINUE */
{
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    delete yymsp[0].minor.yy0;

    ps->gen << "EUDContinue()" << std::endl;
}
        break;
      case 180: /* break_stmt ::= BREAK */
{
    writeTraceInfo(ps->gen, yymsp[0].minor.yy0);
    delete yymsp[0].minor.yy0;

    ps->gen << "EUDBreak()" << std::endl;
}
        break;
      case 181: /* return_stmt ::= RETURN exprList */
{
    writeTraceInfo(ps->gen, yymsp[-1].minor.yy0);
    delete yymsp[-1].minor.yy0;

    ps->gen << "EUDReturn(" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 182: /* expr ::= CONDITIONNAME LPAREN fArgs RPAREN */
      case 183: /* expr ::= KILLS LPAREN fArgs RPAREN */ yytestcase(yyruleno==183);
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "(" + yymsp[-1].minor.yy0->data + ")";
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      case 184: /* actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN */
{
    writeTraceInfo(ps->gen, yymsp[-3].minor.yy0);
    ps->gen << "DoActions(" << yymsp[-3].minor.yy0->data << "(" << yymsp[-1].minor.yy0->data << "))" << std::endl;
    delete yymsp[-3].minor.yy0; delete yymsp[-1].minor.yy0;
  yy_destructor(yypParser,27,&yymsp[-2].minor);
  yy_destructor(yypParser,36,&yymsp[0].minor);
}
        break;
      default:
      /* (1) chunks ::= */ yytestcase(yyruleno==1);
      /* (90) commaSkippable ::= */ yytestcase(yyruleno==90);
      /* (166) for_init_stmt ::= */ yytestcase(yyruleno==166);
      /* (170) for_action_stmt ::= */ yytestcase(yyruleno==170);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */

    throw_error(-1, "Unrecoverable error");
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}


PyGenerator* pGen;
ClosureManager* closure;


std::string ParseString(const std::string& fname, const std::string& code, bool addComment)
{
    // Module name from fname
    // last \/ ~ first .
    auto lpos = fname.find_last_of("\\/");
    if(lpos == std::string::npos) lpos = 0;
    else lpos++;
    auto rpos = fname.find_first_of(".", lpos);
    if(rpos == std::string::npos) rpos = fname.size();
    currentModule = fname.substr(lpos, rpos - lpos);
    currentFile = fname;

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(stdout, "--");
#endif

    // Main code
    Tokenizer tok(code);
    void* pParser = ParseAlloc (malloc);
    ParserStruct ps;
    Token* token;
    currentTokenizingLine = 0;
    pGen = &ps.gen;
    closure = &ps.closure;
    lambdaIndex = 0;

    if(PARSER_DEBUG) std::cout << "Parsing string [[[\n" << code.c_str() << "\n]]]\n";
    tmpIndex = 1;
    resetParserErrorNum();
    while ((token = tok.getToken()) != nullptr) {
        if (currentTokenizingLine != tok.getCurrentLine()) {
            currentTokenizingLine = tok.getCurrentLine();
            if(addComment) ps.gen << "# (Line " << currentTokenizingLine << ") " << trim(tok.getCurrentLineString()) << std::endl;
            if(PARSER_DEBUG) printf("# reading line %s\n", tok.getCurrentLineString().c_str());
        }
        int newTokType = getConvertedType(token->type);
        if (newTokType != -1) {
            Parse (pParser, newTokType, token, &ps);
        }
        else {
            throw_error(8104, "Invalid token");
        }
    }
    Parse (pParser, 0, nullptr, &ps);
    ParseFree(pParser, free );

    std::string ret = iwCollapse(ps.gen.str());
    if(getParseErrorNum() > 0) {
        ret += "\nraise RuntimeError('Compile error')\n";
    }

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(NULL, "--");
#endif

    return ret;
}
