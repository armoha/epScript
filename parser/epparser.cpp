/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
#include <stdio.h>
/************ Begin %include sections from the grammar ************************/
#line 1 "parser\\epparser.lemon"

#include <stdio.h>
#include <assert.h>
#include <string>
#include <sstream>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <regex>

#include "epparser.h"
#include "generator/pygen.h"
#include "generator/closure.h"
#include "parser.h"
#include "tokenAdapter.h"
#include "parserUtilities.h"

struct ParserStruct {
   PyGenerator gen;
    ClosureManager closure;
};

int currentTokenizingLine;
std::string currentFunction;
std::string currentModule;
bool functionCalledInMultipleActions;
bool PARSER_DEBUG = false;
bool MAP_DEBUG = false;

#line 58 "parser\\epparser.c"
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols
** in a format understandable to "makeheaders".  This section is blank unless
** "lemon" is run with the "-m" command-line option.
***************** Begin makeheaders token definitions *************************/
/**************** End makeheaders token definitions ***************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    ParseTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal 
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYNTOKEN           Number of terminal symbols
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
**    YY_MIN_REDUCE      Minimum value for reduce actions
**    YY_MAX_REDUCE      Maximum value for reduce actions
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/************* Begin control #defines *****************************************/
#define YYCODETYPE unsigned char
#define YYNOCODE 141
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token*
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy281;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL  ParserStruct* ps ;
#define ParseARG_PDECL , ParserStruct* ps 
#define ParseARG_FETCH  ParserStruct* ps  = yypParser->ps 
#define ParseARG_STORE yypParser->ps  = ps 
#define YYERRORSYMBOL 75
#define YYERRSYMDT yy281
#define YYNSTATE             344
#define YYNRULE              174
#define YYNTOKEN             75
#define YY_MAX_SHIFT         343
#define YY_MIN_SHIFTREDUCE   344
#define YY_MAX_SHIFTREDUCE   517
#define YY_ERROR_ACTION      518
#define YY_ACCEPT_ACTION     519
#define YY_NO_ACTION         520
#define YY_MIN_REDUCE        521
#define YY_MAX_REDUCE        694
/************* End control #defines *******************************************/

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X.
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
#define YY_ACTTAB_COUNT (7197)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   291,    8,    4,  606,  560,  606,  560,  560,  299,  560,
 /*    10 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*    20 */   560,  560,  560,  560,  560,  519,   11,  560,  560,  560,
 /*    30 */   227,  343,  225,  224,  223,  342,  341,  340,  219,  229,
 /*    40 */    10,  275,  183,  235,   80,   86,  272,   49,  245,  608,
 /*    50 */     2,  248,  182,  281,  560,  560,  606,  606,  606,  606,
 /*    60 */   606,  606,  606,  606,  606,  606,  607,  559,  607,  559,
 /*    70 */   559,  231,  559,  559,  559,  559,  559,  559,  559,  559,
 /*    80 */   559,  559,  559,  559,  559,  559,  559,  559,  183,  247,
 /*    90 */   559,  559,  559,    3,  232,  523,  523,  244,  182,  523,
 /*   100 */    48,   47,   46,   45,   44,   43,   42,   41,   40,   39,
 /*   110 */   534,  333,  339,  525,  534,  534,  338,  559,  559,  607,
 /*   120 */   607,  607,  607,  607,  607,  607,  607,  607,  607,  605,
 /*   130 */   558,  605,  558,  558,  250,  558,  558,  558,  558,  558,
 /*   140 */   558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
 /*   150 */   558,  263,  238,   19,  558,  558,  176,  533,   26,  229,
 /*   160 */   176,  533,  533,  548,  176,  176,  201,  273,  269,  279,
 /*   170 */   201,  271,  269,  300,  201,  181,  269,  298,  267,  128,
 /*   180 */   558,  558,  605,  605,  605,  605,  605,  605,  605,  605,
 /*   190 */   605,  605,  631,  176,  143,  266,  243,  176,  522,  522,
 /*   200 */   631,  176,  522,  201,  176,  269,  297,  201,   50,  269,
 /*   210 */   296,  202,  631,  631,  203,  176,   32,  334,  631,  631,
 /*   220 */   631,  271,  631,  631,  631,  201,  631,  268,  631,  631,
 /*   230 */   631,  631,  631,  604,   24,  631,  333,  545,  242,  631,
 /*   240 */   631,  631,  631,  631,  183,  631,  631,  631,  540,  125,
 /*   250 */   540,   50,  681,  246,  182,  609,  540,  609,  631,  631,
 /*   260 */   631,  631,  631,  631,  631,  631,  631,  531,  540,  540,
 /*   270 */   127,  531,  531,  545,  540,  540,  540,  692,  540,  540,
 /*   280 */   540,  139,  540,  183,  540,  540,  540,  540,  540,  216,
 /*   290 */   316,  540,  249,  182,   81,  540,  540,  540,  540,  540,
 /*   300 */   183,  540,  540,  540,  632,  138,  632,  692,   50,  237,
 /*   310 */   182,  236,  632,  176,  540,  540,  540,  540,  540,  540,
 /*   320 */   540,  540,  540,  211,  632,  632,  315,  274,  260,  176,
 /*   330 */   632,  632,  632,  602,  632,  632,  632,   15,  632,  204,
 /*   340 */   632,  632,  632,  632,  632,  530,   27,  632,   28,  530,
 /*   350 */   530,  632,  632,  632,  632,  632,  183,  632,  632,  632,
 /*   360 */   649,  276,  649,  691,  333,  262,  182,  694,  649,  544,
 /*   370 */   632,  632,  632,  632,  632,  632,  632,  632,  632,  529,
 /*   380 */   649,  649,   99,  529,  529,  176,  649,  649,  649,  234,
 /*   390 */   649,  649,  649,  691,  649,  205,  649,  649,  649,  649,
 /*   400 */   649,  278,   29,  649,  333,  321,   16,  649,  649,  649,
 /*   410 */   649,  649,  183,  649,  649,  649,  643,  646,  643,  564,
 /*   420 */    50,  264,  182,  645,  643,  176,  649,  649,  649,  649,
 /*   430 */   649,  649,  649,  649,  649,  184,  643,  643,  644,  284,
 /*   440 */   140,  176,  643,  643,  643,  555,  643,  643,  643,  564,
 /*   450 */   643,  185,  643,  643,  643,  643,  643,  641,  214,  643,
 /*   460 */   212,   34,  633,  643,  643,  643,  643,  643,  183,  643,
 /*   470 */   643,  643,  640,   35,  640,   23,  688,   83,  182,  628,
 /*   480 */   640,  176,  643,  643,  643,  643,  643,  643,  643,  643,
 /*   490 */   643,  186,  640,  640,   36,  626,  145,  176,  640,  640,
 /*   500 */   640,  688,  640,  640,  640,  566,  640,  187,  640,  640,
 /*   510 */   640,  640,  640,   95,  176,  640,  146,  148,  147,  640,
 /*   520 */   640,  640,  640,  640,  188,  640,  640,  640,  635,  149,
 /*   530 */   635,  562,   13,   17,  154,  302,  635,  176,  640,  640,
 /*   540 */   640,  640,  640,  640,  640,  640,  640,  189,  635,  635,
 /*   550 */   303,  155,  305,  176,  635,  635,  635,  689,  635,  635,
 /*   560 */   635,  562,  635,  190,  635,  635,  635,  635,  635,  306,
 /*   570 */   176,  635,  156,  309,  308,  635,  635,  635,  635,  635,
 /*   580 */   191,  635,  635,  635,  683,  157,  683,  333,  687,  312,
 /*   590 */   311,   56,  683,  176,  635,  635,  635,  635,  635,  635,
 /*   600 */   635,  635,  635,  192,  683,  683,  230,  265,   90,  176,
 /*   610 */   683,  683,  683,  687,  683,  683,  683,  549,  683,  193,
 /*   620 */   683,  683,  683,  683,  683,  174,  176,  683,  111,  112,
 /*   630 */   179,  683,  683,  683,  683,  683,  194,  683,  683,  683,
 /*   640 */   682,  321,  682,  322,  323,  119,  180,  120,  682,  176,
 /*   650 */   683,  683,  683,  683,  683,  683,  683,  683,  683,  195,
 /*   660 */   682,  682,  121,  122,   91,  176,  682,  682,  682,  228,
 /*   670 */   682,  682,  682,   50,  682,  196,  682,  682,  682,  682,
 /*   680 */   682,   92,  176,  682,  130,  132,  176,  682,  682,  682,
 /*   690 */   682,  682,  206,  682,  682,  682,  150,   82,  611,  520,
 /*   700 */   335,  524,  220,  611,  337,  241,  682,  682,  682,  682,
 /*   710 */   682,  682,  682,  682,  682,  596,  596,  596,  596,  651,
 /*   720 */   596,  596,  596,  596,  596,  596,   66,   65,   67,   69,
 /*   730 */    68,   74,   73,   71,   72,   70,  686,  615,   18,   78,
 /*   740 */   318,  596,  221,  222,  176,  226,  596,  520,  176,  520,
 /*   750 */   520,  651,  596,  651,  151,  651,  651,  651,  152,  520,
 /*   760 */   520,  686,  615,  596,  685,  596,  596,  615,  595,  595,
 /*   770 */   595,  595,  651,  595,  595,  595,  595,  595,  595,   66,
 /*   780 */    65,   67,   69,   68,   74,   73,   71,   72,   70,  685,
 /*   790 */   613,   18,   78,  318,  595,  520,  176,  176,  176,  595,
 /*   800 */   176,  176,  176,  520,  176,  595,  153,  207,  159,  520,
 /*   810 */   160,  105,  106,  520,  107,  613,  595,  684,  595,  595,
 /*   820 */   613,  594,  594,  594,  594,  650,  594,  594,  594,  594,
 /*   830 */   594,  594,   66,   65,   67,   69,   68,   74,   73,   71,
 /*   840 */    72,   70,  684,  176,   18,   78,  318,  594,   50,  520,
 /*   850 */   176,  520,  594,  108,  176,  520,  520,   93,  594,  336,
 /*   860 */   109,  277,  137,   85,  110,  520,  520,  520,  520,  594,
 /*   870 */    50,  594,  594,  603,  593,  593,  593,  593,   84,  593,
 /*   880 */   593,  593,  593,  593,  593,   66,   65,   67,   69,   68,
 /*   890 */    74,   73,   71,   72,   70,  601,  176,   18,   78,  318,
 /*   900 */   593,  520,  176,  176,  176,  593,  161,  176,  176,  520,
 /*   910 */   176,  593,  162,  163,  164,  520,  176,  165,  166,  520,
 /*   920 */   167,  520,  593,  520,  593,  593,  168,  592,  592,  592,
 /*   930 */   592,  535,  592,  592,  592,  592,  592,  592,   66,   65,
 /*   940 */    67,   69,   68,   74,   73,   71,   72,   70,  520,  176,
 /*   950 */    18,   78,  318,  592,  520,  520,  176,  520,  592,  169,
 /*   960 */   176,  520,  520,  535,  592,  535,  170,  535,  535,  535,
 /*   970 */   171,  520,  520,  520,  520,  592,  520,  592,  592,  520,
 /*   980 */   591,  591,  591,  591,  535,  591,  591,  591,  591,  591,
 /*   990 */   591,   66,   65,   67,   69,   68,   74,   73,   71,   72,
 /*  1000 */    70,  520,  520,   18,   78,  318,  591,   25,   30,  333,
 /*  1010 */   333,  591,  677,  176,  677,  520,  176,  591,  520,  176,
 /*  1020 */   677,  520,  520,  208,  520,  520,  209,  520,  591,  210,
 /*  1030 */   591,  591,  677,  677,  600,  600,  520,  176,  677,  677,
 /*  1040 */   677,  520,  677,  677,  677,  520,  677,  200,  677,  677,
 /*  1050 */   677,  677,  677,  520,  520,  677,  520,  520,  520,  677,
 /*  1060 */   677,  677,  677,  677,  520,  677,  677,  677,  676,  520,
 /*  1070 */   676,  520,  520,  520,  520,  520,  676,  520,  677,  677,
 /*  1080 */   677,  677,  677,  677,  677,  677,  677,  520,  676,  676,
 /*  1090 */   520,  520,  520,  520,  676,  676,  676,  520,  676,  676,
 /*  1100 */   676,  520,  676,  520,  676,  676,  676,  676,  676,  520,
 /*  1110 */   520,  676,  520,  520,  520,  676,  676,  676,  676,  676,
 /*  1120 */   520,  676,  676,  676,  675,  520,  675,  520,  520,  520,
 /*  1130 */   520,  520,  675,  520,  676,  676,  676,  676,  676,  676,
 /*  1140 */   676,  676,  676,  520,  675,  675,  520,  520,  520,  520,
 /*  1150 */   675,  675,  675,  520,  675,  675,  675,  520,  675,  520,
 /*  1160 */   675,  675,  675,  675,  675,  520,  520,  675,  520,  520,
 /*  1170 */   520,  675,  675,  675,  675,  675,  520,  675,  675,  675,
 /*  1180 */   674,  520,  674,  520,  520,  520,  520,  520,  674,  520,
 /*  1190 */   675,  675,  675,  675,  675,  675,  675,  675,  675,  520,
 /*  1200 */   674,  674,  520,  520,  520,  520,  674,  674,  674,  520,
 /*  1210 */   674,  674,  674,  520,  674,  520,  674,  674,  674,  674,
 /*  1220 */   674,  520,  520,  674,  520,  520,  520,  674,  674,  674,
 /*  1230 */   674,  674,  520,  674,  674,  674,  673,  520,  673,  520,
 /*  1240 */   520,  520,  520,  520,  673,  520,  674,  674,  674,  674,
 /*  1250 */   674,  674,  674,  674,  674,  520,  673,  673,  520,  520,
 /*  1260 */   520,  520,  673,  673,  673,  520,  673,  673,  673,  520,
 /*  1270 */   673,  520,  673,  673,  673,  673,  673,  520,  520,  673,
 /*  1280 */   520,  520,  520,  673,  673,  673,  673,  673,  520,  673,
 /*  1290 */   673,  673,  672,  520,  672,  520,  520,  520,  520,  520,
 /*  1300 */   672,  520,  673,  673,  673,  673,  673,  673,  673,  673,
 /*  1310 */   673,  520,  672,  672,  520,  520,  520,  520,  672,  672,
 /*  1320 */   672,  520,  672,  672,  672,  520,  672,  520,  672,  672,
 /*  1330 */   672,  672,  672,  520,  520,  672,  520,  520,  520,  672,
 /*  1340 */   672,  672,  672,  672,  520,  672,  672,  672,  671,  520,
 /*  1350 */   671,  520,  520,  520,  520,  520,  671,  520,  672,  672,
 /*  1360 */   672,  672,  672,  672,  672,  672,  672,  520,  671,  671,
 /*  1370 */   520,  520,  520,  520,  671,  671,  671,  520,  671,  671,
 /*  1380 */   671,  520,  671,  520,  671,  671,  671,  671,  671,  520,
 /*  1390 */   520,  671,  520,  520,  520,  671,  671,  671,  671,  671,
 /*  1400 */   520,  671,  671,  671,  541,  520,  541,  520,  520,  520,
 /*  1410 */   520,  520,  541,  520,  671,  671,  671,  671,  671,  671,
 /*  1420 */   671,  671,  671,  520,  541,  541,  520,  520,  520,  520,
 /*  1430 */   541,  541,  541,  520,  541,  541,  541,  520,  541,  520,
 /*  1440 */   541,  541,  541,  541,  541,  520,  520,  541,  520,  520,
 /*  1450 */   520,  541,  541,  541,  541,  541,  520,  541,  541,  541,
 /*  1460 */   670,  520,  670,  520,  520,  520,  520,  520,  670,  520,
 /*  1470 */   541,  541,  541,  541,  541,  541,  541,  541,  541,  520,
 /*  1480 */   670,  670,  520,  520,  520,  520,  670,  670,  670,  520,
 /*  1490 */   670,  670,  670,  520,  670,  520,  670,  670,  670,  670,
 /*  1500 */   670,  520,  520,  670,  520,  520,  520,  670,  670,  670,
 /*  1510 */   670,  670,  520,  670,  670,  670,  669,  520,  669,  520,
 /*  1520 */   520,  520,  520,  520,  669,  520,  670,  670,  670,  670,
 /*  1530 */   670,  670,  670,  670,  670,  520,  669,  669,  520,  520,
 /*  1540 */   520,  520,  669,  669,  669,  520,  669,  669,  669,  520,
 /*  1550 */   669,  520,  669,  669,  669,  669,  669,  520,  520,  669,
 /*  1560 */   520,  520,  520,  669,  669,  669,  669,  669,  520,  669,
 /*  1570 */   669,  669,  668,  520,  668,  520,  520,  520,  520,  520,
 /*  1580 */   668,  520,  669,  669,  669,  669,  669,  669,  669,  669,
 /*  1590 */   669,  520,  668,  668,  520,  520,  520,  520,  668,  668,
 /*  1600 */   668,  520,  668,  668,  668,  520,  668,  520,  668,  668,
 /*  1610 */   668,  668,  668,  520,  520,  668,  520,  520,  520,  668,
 /*  1620 */   668,  668,  668,  668,  520,  668,  668,  668,  667,  520,
 /*  1630 */   667,  520,  520,  520,  520,  520,  667,  520,  668,  668,
 /*  1640 */   668,  668,  668,  668,  668,  668,  668,  520,  667,  667,
 /*  1650 */   520,  520,  520,  520,  667,  667,  667,  520,  667,  667,
 /*  1660 */   667,  520,  667,  520,  667,  667,  667,  667,  667,  520,
 /*  1670 */   520,  667,  520,  520,  520,  667,  667,  667,  667,  667,
 /*  1680 */   520,  667,  667,  667,  666,  520,  666,  520,  520,  520,
 /*  1690 */   520,  520,  666,  520,  667,  667,  667,  667,  667,  667,
 /*  1700 */   667,  667,  667,  520,  666,  666,  520,  520,  520,  520,
 /*  1710 */   666,  666,  666,  520,  666,  666,  666,  520,  666,  520,
 /*  1720 */   666,  666,  666,  666,  666,  520,  520,  666,  520,  520,
 /*  1730 */   520,  666,  666,  666,  666,  666,  520,  666,  666,  666,
 /*  1740 */   665,  520,  665,  520,  520,  520,  520,  520,  665,  520,
 /*  1750 */   666,  666,  666,  666,  666,  666,  666,  666,  666,  520,
 /*  1760 */   665,  665,  520,  520,  520,  520,  665,  665,  665,  520,
 /*  1770 */   665,  665,  665,  520,  665,  520,  665,  665,  665,  665,
 /*  1780 */   665,  520,  520,  665,  520,  520,  520,  665,  665,  665,
 /*  1790 */   665,  665,  520,  665,  665,  665,  664,  520,  664,  520,
 /*  1800 */   520,  520,  520,  520,  664,  520,  665,  665,  665,  665,
 /*  1810 */   665,  665,  665,  665,  665,  520,  664,  664,  520,  520,
 /*  1820 */   520,  520,  664,  664,  664,  520,  664,  664,  664,  520,
 /*  1830 */   664,  520,  664,  664,  664,  664,  664,  520,  520,  664,
 /*  1840 */   520,  520,  520,  664,  664,  664,  664,  664,  520,  664,
 /*  1850 */   664,  664,  663,  520,  663,  520,  520,  520,  520,  520,
 /*  1860 */   663,  520,  664,  664,  664,  664,  664,  664,  664,  664,
 /*  1870 */   664,  520,  663,  663,  520,  520,  520,  520,  663,  663,
 /*  1880 */   663,  520,  663,  663,  663,  520,  663,  520,  663,  663,
 /*  1890 */   663,  663,  663,  520,  520,  663,  520,  520,  520,  663,
 /*  1900 */   663,  663,  663,  663,  520,  663,  663,  663,  662,  520,
 /*  1910 */   662,  520,  520,  520,  520,  520,  662,  520,  663,  663,
 /*  1920 */   663,  663,  663,  663,  663,  663,  663,  520,  662,  662,
 /*  1930 */   520,  520,  520,  520,  662,  662,  662,  520,  662,  662,
 /*  1940 */   662,  520,  662,  520,  662,  662,  662,  662,  662,  520,
 /*  1950 */   520,  662,  520,  520,  520,  662,  662,  662,  662,  662,
 /*  1960 */   520,  662,  662,  662,  538,  520,  538,  520,  520,  520,
 /*  1970 */   520,  520,  538,  520,  662,  662,  662,  662,  662,  662,
 /*  1980 */   662,  662,  662,  520,  538,  538,  520,  520,  520,  520,
 /*  1990 */   538,  538,  538,  520,  538,  538,  538,  520,  538,  520,
 /*  2000 */   538,  538,  538,  538,  538,  520,  520,  538,  520,  520,
 /*  2010 */   520,  538,  538,  538,  538,  538,  520,  538,  538,  538,
 /*  2020 */   539,  520,  539,  520,  520,  520,  520,  520,  539,  520,
 /*  2030 */   538,  538,  538,  538,  538,  538,  538,  538,  538,  520,
 /*  2040 */   539,  539,  520,  520,  520,  520,  539,  539,  539,  520,
 /*  2050 */   539,  539,  539,  520,  539,  520,  539,  539,  539,  539,
 /*  2060 */   539,  520,  520,  539,  520,  520,  520,  539,  539,  539,
 /*  2070 */   539,  539,  520,  539,  539,  539,  661,  520,  661,  520,
 /*  2080 */   520,  520,  520,  520,  661,  520,  539,  539,  539,  539,
 /*  2090 */   539,  539,  539,  539,  539,  520,  661,  661,  520,  520,
 /*  2100 */   520,  520,  661,  661,  661,  520,  661,  661,  661,  520,
 /*  2110 */   661,  520,  661,  661,  661,  661,  661,  520,  520,  661,
 /*  2120 */   520,  520,  520,  661,  661,  661,  661,  661,  520,  661,
 /*  2130 */   661,  661,  660,  520,  660,  520,  520,  520,  520,  520,
 /*  2140 */   660,  520,  661,  661,  661,  661,  661,  661,  661,  661,
 /*  2150 */   661,  520,  660,  660,  520,  520,  520,  520,  660,  660,
 /*  2160 */   660,  520,  660,  660,  660,  520,  660,  520,  660,  660,
 /*  2170 */   660,  660,  660,  520,  520,  660,  520,  520,  520,  660,
 /*  2180 */   660,  660,  660,  660,  520,  660,  660,  660,  536,  520,
 /*  2190 */   536,  520,  520,  520,  520,  520,  536,  520,  660,  660,
 /*  2200 */   660,  660,  660,  660,  660,  660,  660,  520,  536,  536,
 /*  2210 */   520,  520,  520,  520,  536,  536,  536,  520,  536,  536,
 /*  2220 */   536,  520,  536,  520,  536,  536,  536,  536,  536,  520,
 /*  2230 */   520,  536,  259,  520,  520,  536,  536,  536,  536,  536,
 /*  2240 */   520,  536,  536,  536,  520,  550,  520,  520,  520,  520,
 /*  2250 */   258,  257,  256,  176,  536,  536,  536,  536,  536,  536,
 /*  2260 */   536,  536,  536,  199,  135,  520,  520,  520,  215,  261,
 /*  2270 */   550,  520,  520,  328,  520,  550,  124,  520,  520,  255,
 /*  2280 */   287,  550,  520,  520,  520,  520,  136,  329,    2,  126,
 /*  2290 */   520,  327,  326,  325,  198,  117,  116,  115,  114,  113,
 /*  2300 */   320,  319,  520,  520,  199,  253,  176,  520,  520,  215,
 /*  2310 */   261,  293,    9,   22,  520,  520,  199,  289,    7,   12,
 /*  2320 */   520,  215,  261,  520,   33,   14,    6,   87,    5,  520,
 /*  2330 */   134,  520,  520,  520,  252,  286,  520,  520,  520,  328,
 /*  2340 */   520,  520,  124,  520,  520,  520,  520,  520,  520,  520,
 /*  2350 */   520,  520,  133,  330,    2,  520,    1,  327,  326,  325,
 /*  2360 */   198,  117,  116,  115,  114,  113,  320,  319,  520,  520,
 /*  2370 */   199,  520,  520,  520,  520,  215,  261,  293,    9,   22,
 /*  2380 */   547,  520,  547,  289,    7,   12,  332,  520,  520,  520,
 /*  2390 */    33,   14,    6,   87,    5,  328,  520,  520,  124,  520,
 /*  2400 */   520,  520,  233,  520,  520,  520,  520,  547,  131,  331,
 /*  2410 */     2,  520,  547,  327,  326,  325,  198,  117,  116,  115,
 /*  2420 */   114,  113,  320,  319,  520,  520,  199,  253,  176,  547,
 /*  2430 */   520,  215,  261,  293,    9,   22,  520,  520,  199,  289,
 /*  2440 */     7,   12,  332,  215,  261,  520,   33,   14,    6,   87,
 /*  2450 */     5,  328,  520,  520,  124,  520,  251,  520,   98,  520,
 /*  2460 */   520,  520,  520,  520,  131,  331,    2,  520,  520,  327,
 /*  2470 */   326,  325,  198,  117,  116,  115,  114,  113,  320,  319,
 /*  2480 */   520,  520,  199,  520,  520,  520,  520,  215,  261,  293,
 /*  2490 */     9,   22,  546,  520,  546,  289,    7,   12,  332,  520,
 /*  2500 */   520,  520,   33,   14,    6,   87,    5,  328,  520,  520,
 /*  2510 */   124,  520,  520,  520,  100,  520,  520,  520,  520,  546,
 /*  2520 */   131,  331,    2,  520,  546,  327,  326,  325,  198,  117,
 /*  2530 */   116,  115,  114,  113,  320,  319,  520,  520,  199,  520,
 /*  2540 */   520,  546,  520,  215,  261,  293,    9,   22,  520,  520,
 /*  2550 */   520,  289,    7,   12,  332,  520,  520,  520,   33,   14,
 /*  2560 */     6,   87,    5,  328,  520,  520,  124,  520,  520,  520,
 /*  2570 */   101,  520,  520,  520,  520,  520,  131,  331,    2,  520,
 /*  2580 */   520,  327,  326,  325,  198,  117,  116,  115,  114,  113,
 /*  2590 */   320,  319,  520,  520,  199,  520,  520,  520,  520,  215,
 /*  2600 */   261,  293,    9,   22,  520,  520,  520,  289,    7,   12,
 /*  2610 */   332,  520,  520,  520,   33,   14,    6,   87,    5,  328,
 /*  2620 */   520,  520,  124,  520,  520,  520,  102,  520,  520,  520,
 /*  2630 */   520,  520,  131,  331,    2,  520,  520,  327,  326,  325,
 /*  2640 */   198,  117,  116,  115,  114,  113,  320,  319,  520,  520,
 /*  2650 */   199,  520,  520,  520,  520,  215,  261,  293,    9,   22,
 /*  2660 */   520,  520,  520,  289,    7,   12,  332,  520,  520,  520,
 /*  2670 */    33,   14,    6,   87,    5,  328,  520,  520,  124,  520,
 /*  2680 */   520,  520,  103,  520,  520,  520,  520,  520,  131,  331,
 /*  2690 */     2,  520,  520,  327,  326,  325,  198,  117,  116,  115,
 /*  2700 */   114,  113,  320,  319,  520,  520,  199,  520,  520,  520,
 /*  2710 */   520,  215,  261,  293,    9,   22,  520,  520,  520,  289,
 /*  2720 */     7,   12,  332,  520,  520,  520,   33,   14,    6,   87,
 /*  2730 */     5,  328,  520,  520,  124,  520,  520,  520,  104,  520,
 /*  2740 */   520,  520,  520,  520,  131,  331,    2,  520,  520,  327,
 /*  2750 */   326,  325,  198,  117,  116,  115,  114,  113,  320,  319,
 /*  2760 */   520,  520,  199,  520,  520,  520,  520,  215,  261,  293,
 /*  2770 */     9,   22,  520,  520,  520,  289,    7,   12,  332,  520,
 /*  2780 */   520,  520,   33,   14,    6,   87,    5,  328,  520,  520,
 /*  2790 */   124,  520,  520,  520,  217,  520,  520,  520,  520,  520,
 /*  2800 */   131,  331,    2,  520,  520,  327,  326,  325,  198,  117,
 /*  2810 */   116,  115,  114,  113,  320,  319,  520,  520,  199,  520,
 /*  2820 */   520,  520,  520,  215,  261,  293,    9,   22,  520,  520,
 /*  2830 */   520,  289,    7,   12,   52,  520,  520,  520,   33,   14,
 /*  2840 */     6,   87,    5,  520,  520,  520,   55,   54,  520,  520,
 /*  2850 */   520,  520,   53,   77,   31,  520,  123,   96,  520,  520,
 /*  2860 */   520,  520,  520,  137,   89,  128,  178,  520,  520,  177,
 /*  2870 */   520,  520,  520,  314,  313,  310,  307,  304,  520,   88,
 /*  2880 */    38,   37,  520,  520,  520,  520,  520,  520,  520,   52,
 /*  2890 */   520,  520,  294,  290,  288,  285,  283,  282,   21,  301,
 /*  2900 */   280,   55,   54,  520,  520,  520,  520,   53,   77,   31,
 /*  2910 */   520,  123,   96,  520,  520,  520,  520,  520,  137,   89,
 /*  2920 */   129,  178,  520,  520,  177,  520,  520,  520,  314,  313,
 /*  2930 */   310,  307,  304,  520,   88,   38,   37,  520,  520,  520,
 /*  2940 */   520,  520,  520,  520,  678,  520,  520,  294,  290,  288,
 /*  2950 */   285,  283,  282,   21,  301,  280,  678,  678,  520,  520,
 /*  2960 */   520,  520,  678,  678,  678,  520,  678,  678,  520,  520,
 /*  2970 */   520,  520,  520,  678,  678,  678,  678,  520,  520,  678,
 /*  2980 */   520,  520,  520,  678,  678,  678,  678,  678,  520,  678,
 /*  2990 */   678,  678,  520,  520,  520,  520,  520,  520,  520,  542,
 /*  3000 */   520,  520,  678,  678,  678,  678,  678,  678,  678,  678,
 /*  3010 */   678,  542,  542,  520,  520,  520,  520,  542,  542,  542,
 /*  3020 */   520,  542,  542,  520,  520,  520,  520,  520,  542,  542,
 /*  3030 */    97,  542,  520,  520,  542,  520,  520,  520,  542,  542,
 /*  3040 */   542,  542,  542,  520,  542,  542,  542,  520,  520,  520,
 /*  3050 */   520,  520,  520,  520,  543,  520,  520,  542,  542,  542,
 /*  3060 */   542,  542,  542,  542,  542,  542,  543,  543,  520,  520,
 /*  3070 */   520,  520,  543,  543,  543,  520,  543,  543,  520,  520,
 /*  3080 */   520,  520,  520,  543,  543,  543,  543,  520,  520,  543,
 /*  3090 */   520,  520,  520,  543,  543,  543,  543,  543,  520,  543,
 /*  3100 */   543,  543,  520,  520,  520,  520,  520,  520,  520,  679,
 /*  3110 */   520,  520,  543,  543,  543,  543,  543,  543,  543,  543,
 /*  3120 */   543,  679,  679,  520,  520,  520,  520,  679,  679,  679,
 /*  3130 */   520,  679,  679,  520,  520,  520,  520,  520,  679,  679,
 /*  3140 */   679,  679,  520,  520,  679,  520,  520,  520,  679,  679,
 /*  3150 */   679,  679,  679,  520,  679,  679,  679,  520,  520,  520,
 /*  3160 */   520,  520,  520,  520,  537,  520,  520,  679,  679,  679,
 /*  3170 */   679,  679,  679,  679,  679,  679,  537,  537,  520,  520,
 /*  3180 */   520,  520,  537,  537,  537,  520,  537,  537,  520,  520,
 /*  3190 */   520,  520,  520,  537,  537,  537,  537,  520,  520,  537,
 /*  3200 */   520,  520,  520,  537,  537,  537,  537,  537,  520,  537,
 /*  3210 */   537,  537,  520,  520,  520,  520,  520,  520,  520,   52,
 /*  3220 */   520,  520,  537,  537,  537,  537,  537,  537,  537,  537,
 /*  3230 */   537,   55,   54,  520,  520,  520,  520,   53,   77,   31,
 /*  3240 */   520,  123,   96,  520,  520,  520,  520,  520,  137,   89,
 /*  3250 */   520,  178,  520,  520,  177,  520,  520,  520,  314,  313,
 /*  3260 */   310,  307,  304,  520,   88,   38,   37,  520,  520,  520,
 /*  3270 */   520,  520,  520,  520,  532,  520,  520,  294,  290,  288,
 /*  3280 */   285,  283,  282,   21,  301,  280,  532,  532,  520,  520,
 /*  3290 */   520,  520,  532,  532,  532,  520,  532,  532,  520,  520,
 /*  3300 */   520,  520,  520,  532,  532,  520,  532,  520,  520,  532,
 /*  3310 */   520,  520,  520,  532,  532,  532,  532,  532,  520,  532,
 /*  3320 */   532,  532,  520,  520,  520,  520,  520,  520,  520,  642,
 /*  3330 */   520,  520,  532,  532,  532,  532,  532,  532,  532,  532,
 /*  3340 */   532,  642,  642,  520,  520,  520,  520,  642,  642,  642,
 /*  3350 */   520,  642,  642,  520,  520,  520,  520,  520,  642,  642,
 /*  3360 */   520,  642,  520,  520,  642,  520,  520,  520,  642,  642,
 /*  3370 */   642,  642,  642,  520,  642,  642,  642,  520,  520,  520,
 /*  3380 */   520,  520,  520,  520,  639,  520,  520,  642,  642,  642,
 /*  3390 */   642,  642,  642,  642,  642,  642,  639,  639,  520,  520,
 /*  3400 */   520,  520,  639,  639,  639,  520,  639,  639,  520,  520,
 /*  3410 */   520,  520,  520,  639,  639,  520,  639,  520,  520,  639,
 /*  3420 */   520,  520,  520,  639,  639,  639,  639,  639,  520,  639,
 /*  3430 */   639,  639,  520,  520,  520,  520,  520,  520,  520,  634,
 /*  3440 */   520,  520,  639,  639,  639,  639,  639,  639,  639,  639,
 /*  3450 */   639,  634,  634,  520,  520,  520,  520,  634,  634,  634,
 /*  3460 */   520,  634,  634,  520,  520,  520,  520,  520,  634,  634,
 /*  3470 */   520,  634,  520,  520,  634,  520,  520,  520,  634,  634,
 /*  3480 */   634,  634,  634,  520,  634,  634,  634,  520,  520,  520,
 /*  3490 */   520,  520,  520,  520,  629,  520,  520,  634,  634,  634,
 /*  3500 */   634,  634,  634,  634,  634,  634,  629,  629,  520,  520,
 /*  3510 */   520,  520,  629,  629,  629,  520,  629,  629,  520,  520,
 /*  3520 */   520,  520,  520,  629,  629,  520,  629,  520,  520,  629,
 /*  3530 */   520,  520,  520,  629,  629,  629,  629,  629,  520,  629,
 /*  3540 */   629,  629,  520,  520,  520,  520,  520,  520,  520,  630,
 /*  3550 */   520,  520,  629,  629,  629,  629,  629,  629,  629,  629,
 /*  3560 */   629,  630,  630,  520,  520,  520,  520,  630,  630,  630,
 /*  3570 */   520,  630,  630,  520,  520,  520,  520,  520,  630,  630,
 /*  3580 */   520,  630,  520,  520,  630,  520,  520,  520,  630,  630,
 /*  3590 */   630,  630,  630,  520,  630,  630,  630,  520,  520,  520,
 /*  3600 */   520,  520,  520,  520,  627,  520,  520,  292,  630,  630,
 /*  3610 */   630,  630,  630,  630,  630,  630,  627,  627,  520,  520,
 /*  3620 */   520,  520,  627,  627,  627,  520,  627,  627,  520,  520,
 /*  3630 */   520,  520,  520,  627,  627,  520,  627,  520,  520,  627,
 /*  3640 */   520,  520,  520,  627,  627,  627,  627,  627,  520,  627,
 /*  3650 */   627,  627,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  3660 */   520,  520,  627,  627,  627,  627,  627,  627,  627,  627,
 /*  3670 */   627,  648,  648,  648,  648,  527,  648,  648,  648,  648,
 /*  3680 */   648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
 /*  3690 */   648,  648,  520,  520,  648,  648,  648,  648,  520,  520,
 /*  3700 */   520,  520,  648,  520,  520,  520,  520,  527,  648,  527,
 /*  3710 */   520,  527,  527,  527,  520,  520,  520,  520,  520,  648,
 /*  3720 */   520,  648,  648,  520,  567,  567,  567,  567,  527,  567,
 /*  3730 */   567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
 /*  3740 */   567,  567,  567,  567,  567,  520,  520,  567,  567,  567,
 /*  3750 */   567,  520,  520,  520,  520,  567,  520,  520,  520,  520,
 /*  3760 */   520,  567,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  3770 */   520,  520,  567,  520,  567,  567,  520,  568,  568,  568,
 /*  3780 */   568,  528,  568,  568,  568,  568,  568,  568,  568,  568,
 /*  3790 */   568,  568,  568,  568,  568,  568,  568,  568,  520,  520,
 /*  3800 */   568,  568,  568,  568,  520,  520,  520,  520,  568,  520,
 /*  3810 */   520,  520,  520,  528,  568,  528,  520,  528,  528,  528,
 /*  3820 */   520,  520,  520,  520,  520,  568,  520,  568,  568,  520,
 /*  3830 */   571,  571,  571,  571,  528,  571,  571,  571,  571,  571,
 /*  3840 */   571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
 /*  3850 */   571,  520,  520,  571,  571,  571,  571,  520,  520,  520,
 /*  3860 */   520,  571,  520,  520,  520,  520,  520,  571,  520,  520,
 /*  3870 */   520,  520,  520,  520,  520,  520,  520,  520,  571,  520,
 /*  3880 */   571,  571,  520,  647,  647,  647,  647,  521,  647,  647,
 /*  3890 */   647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
 /*  3900 */   647,  647,  647,  647,  520,  520,  647,  647,  647,  647,
 /*  3910 */   520,  520,  520,  520,  647,  520,  520,  520,  520,  521,
 /*  3920 */   647,  521,  520,  521,  521,  521,  520,  520,  520,  520,
 /*  3930 */   520,  647,  520,  647,  647,  520,  599,  599,  599,  599,
 /*  3940 */   521,   64,   62,   61,   60,   59,   63,   66,   65,   67,
 /*  3950 */    69,   68,   74,   73,   71,   72,   70,  520,  520,   18,
 /*  3960 */    78,  318,  599,  520,  520,  520,  520,  599,  520,  520,
 /*  3970 */   520,  520,  520,  599,  520,  520,  520,  520,  520,  520,
 /*  3980 */   520,  520,  520,  520,  599,  520,  599,  599,  520,  590,
 /*  3990 */   590,  590,  590,  659,  590,  590,  590,  590,  590,  590,
 /*  4000 */   590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
 /*  4010 */   520,  520,   18,   78,  318,  590,  520,  520,  520,  520,
 /*  4020 */   590,  520,  520,  520,  520,  659,  590,  659,  520,  659,
 /*  4030 */   659,  659,  520,  520,  520,  520,  520,  590,  520,  590,
 /*  4040 */   590,  520,  589,  589,  589,  589,  659,  589,  589,  589,
 /*  4050 */   589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
 /*  4060 */   589,  589,  589,  520,  520,   18,   78,  318,  589,  520,
 /*  4070 */   520,  520,  520,  589,  520,  520,  520,  520,  520,  589,
 /*  4080 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  4090 */   589,  520,  589,  589,  520,  588,  588,  588,  588,  658,
 /*  4100 */   588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
 /*  4110 */   588,  588,  588,  588,  588,  588,  520,  520,   18,   78,
 /*  4120 */   318,  588,  520,  520,  520,  520,  588,  520,  520,  520,
 /*  4130 */   520,  658,  588,  658,  520,  658,  658,  658,  520,  520,
 /*  4140 */   520,  520,  520,  588,  520,  588,  588,  520,  576,  576,
 /*  4150 */   576,  576,  658,  576,  576,  576,  576,  576,  576,  576,
 /*  4160 */   576,  576,  576,  576,  576,  576,  576,  576,  576,  520,
 /*  4170 */   520,  576,  576,  576,  576,  520,  520,  520,  520,  576,
 /*  4180 */   520,  520,  520,  520,  520,  576,  520,  520,  520,  520,
 /*  4190 */   520,  520,  520,  520,  520,  520,  576,  520,  576,  576,
 /*  4200 */   520,  575,  575,  575,  575,  657,  575,  575,  575,  575,
 /*  4210 */   575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
 /*  4220 */   575,  575,  520,  520,  575,  575,  575,  575,  520,  520,
 /*  4230 */   520,  520,  575,  520,  520,  520,  520,  657,  575,  657,
 /*  4240 */   520,  657,  657,  657,  520,  520,  520,  520,  520,  575,
 /*  4250 */   520,  575,  575,  520,  574,  574,  574,  574,  657,  574,
 /*  4260 */   574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
 /*  4270 */   574,  574,  574,  574,  574,  520,  520,  574,  574,  574,
 /*  4280 */   574,  520,  520,  520,  520,  574,  520,  520,  520,  520,
 /*  4290 */   520,  574,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  4300 */   520,  520,  574,  520,  574,  574,  520,  573,  573,  573,
 /*  4310 */   573,  656,  573,  573,  573,  573,  573,  573,  573,  573,
 /*  4320 */   573,  573,  573,  573,  573,  573,  573,  573,  520,  520,
 /*  4330 */   573,  573,  573,  573,  520,  520,  520,  520,  573,  520,
 /*  4340 */   520,  520,  520,  656,  573,  656,  520,  656,  656,  656,
 /*  4350 */   520,  520,  520,  520,  520,  573,  520,  573,  573,  520,
 /*  4360 */   572,  572,  572,  572,  656,  572,  572,  572,  572,  572,
 /*  4370 */   572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
 /*  4380 */   572,  520,  520,  572,  572,  572,  572,  520,  520,  520,
 /*  4390 */   520,  572,  520,  520,  520,  520,  520,  572,  520,  520,
 /*  4400 */   520,  520,  520,  520,  520,  520,  520,  520,  572,  520,
 /*  4410 */   572,  572,  520,  598,  598,  598,   58,  655,   64,   62,
 /*  4420 */    61,   60,   59,   63,   66,   65,   67,   69,   68,   74,
 /*  4430 */    73,   71,   72,   70,  520,  520,   18,   78,  318,  598,
 /*  4440 */   520,  520,  520,  520,  598,  520,  520,  520,  520,  655,
 /*  4450 */   598,  655,  520,  655,  655,  655,  520,  520,  520,  520,
 /*  4460 */   520,  598,  520,  598,  598,  520,  597,  597,  597,  597,
 /*  4470 */   655,   64,   62,   61,   60,   59,   63,   66,   65,   67,
 /*  4480 */    69,   68,   74,   73,   71,   72,   70,  520,  520,   18,
 /*  4490 */    78,  318,  597,  520,  520,  520,  520,  597,  520,  520,
 /*  4500 */   520,  520,  520,  597,  520,  520,  520,  520,  520,  520,
 /*  4510 */   520,  520,  520,  520,  597,  520,  597,  597,  520,  587,
 /*  4520 */   587,  587,  587,  654,  587,  587,  587,  587,  587,  587,
 /*  4530 */   587,  587,   67,   69,   68,   74,   73,   71,   72,   70,
 /*  4540 */   520,  520,   18,   78,  318,  587,  520,  520,  520,  520,
 /*  4550 */   587,  520,  520,  520,  520,  654,  587,  654,  520,  654,
 /*  4560 */   654,  654,  520,  520,  520,  520,  520,  587,  520,  587,
 /*  4570 */   587,  520,  586,  586,  586,  586,  654,  586,  586,  586,
 /*  4580 */   586,  586,  586,  586,   65,   67,   69,   68,   74,   73,
 /*  4590 */    71,   72,   70,  520,  520,   18,   78,  318,  586,  520,
 /*  4600 */   520,  520,  520,  586,  520,  520,  520,  520,  520,  586,
 /*  4610 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  4620 */   586,  520,  586,  586,  520,  585,  585,  585,  585,  653,
 /*  4630 */   585,  585,  585,  585,  585,  585,  585,  585,  585,   69,
 /*  4640 */    68,   74,   73,   71,   72,   70,  520,  520,   18,   78,
 /*  4650 */   318,  585,  520,  520,  520,  520,  585,  520,  520,  520,
 /*  4660 */   520,  653,  585,  653,  520,  653,  653,  653,  520,  520,
 /*  4670 */   520,  520,  520,  585,  520,  585,  585,  520,  584,  584,
 /*  4680 */   584,  584,  653,  584,  584,  584,  584,  584,  584,  584,
 /*  4690 */   584,  584,  584,  584,   74,   73,   71,   72,   70,  520,
 /*  4700 */   520,   18,   78,  318,  584,  520,  520,  520,  520,  584,
 /*  4710 */   520,  520,  520,  520,  520,  584,  520,  520,  520,  520,
 /*  4720 */   520,  520,  520,  520,  520,  520,  584,  520,  584,  584,
 /*  4730 */   520,  583,  583,  583,  583,  652,  583,  583,  583,  583,
 /*  4740 */   583,  583,  583,  583,  583,  583,  583,   74,   73,   71,
 /*  4750 */    72,   70,  520,  520,   18,   78,  318,  583,  520,  520,
 /*  4760 */   520,  520,  583,  520,  520,  520,  520,  652,  583,  652,
 /*  4770 */   520,  652,  652,  652,  520,  520,  520,  520,  520,  583,
 /*  4780 */   520,  583,  583,  520,  582,  582,  582,  582,  652,  582,
 /*  4790 */   582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
 /*  4800 */   582,  582,  582,  582,  582,  520,  520,   18,   78,  318,
 /*  4810 */   582,  520,  520,  520,  520,  582,  520,  520,  520,  520,
 /*  4820 */   520,  582,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  4830 */   520,  520,  582,  520,  582,  582,  520,  581,  581,  581,
 /*  4840 */   581,  520,  581,  581,  581,  581,  581,  581,  581,  581,
 /*  4850 */   581,  581,  581,  581,  581,  581,  581,  581,  520,  520,
 /*  4860 */    18,   78,  318,  581,  520,  520,  520,  520,  581,  520,
 /*  4870 */   520,  520,  520,  520,  581,  520,  520,  520,  520,  520,
 /*  4880 */   520,  520,  520,  520,  520,  581,  520,  581,  581,  520,
 /*  4890 */   580,  580,  580,  580,  520,  580,  580,  580,  580,  580,
 /*  4900 */   580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
 /*  4910 */   580,  520,  520,   18,   78,  318,  580,  520,  520,  520,
 /*  4920 */   520,  580,  520,  520,  520,  520,  520,  580,  520,  520,
 /*  4930 */   520,  520,  520,  520,  520,  520,  520,  520,  580,  520,
 /*  4940 */   580,  580,  520,  579,  579,  579,  579,  520,  579,  579,
 /*  4950 */   579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
 /*  4960 */   579,   71,   72,   70,  520,  520,   18,   78,  318,  579,
 /*  4970 */   520,  520,  520,  520,  579,  520,  520,  520,  520,  520,
 /*  4980 */   579,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  4990 */   520,  579,  520,  579,  579,  520,  578,  578,  578,  578,
 /*  5000 */   520,  578,  578,  578,  578,  578,  578,  578,  578,  578,
 /*  5010 */   578,  578,  578,  578,   71,   72,   70,  520,  520,   18,
 /*  5020 */    78,  318,  578,  520,  520,  520,  520,  578,  520,  520,
 /*  5030 */   520,  520,  520,  578,  520,  520,  520,  520,  520,  520,
 /*  5040 */   520,  520,  520,  520,  578,  520,  578,  578,  520,   76,
 /*  5050 */   577,   57,   58,  520,   64,   62,   61,   60,   59,   63,
 /*  5060 */    66,   65,   67,   69,   68,   74,   73,   71,   72,   70,
 /*  5070 */   520,  520,   18,   78,  318,  577,  520,  520,  520,  520,
 /*  5080 */   577,  520,  520,  520,  520,  520,  577,  520,  520,  520,
 /*  5090 */   520,  520,  520,  520,  520,  520,  520,  577,  520,  577,
 /*  5100 */   577,  520,  570,  570,  570,  570,  520,  570,  570,  570,
 /*  5110 */   570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
 /*  5120 */   570,  570,  570,  520,  520,  570,  570,  570,  570,  520,
 /*  5130 */   520,  520,  520,  570,  520,  520,  520,  520,  520,  570,
 /*  5140 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  5150 */   570,  520,  570,  570,  520,  560,  560,  560,  560,  520,
 /*  5160 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*  5170 */   560,  560,  560,  560,  560,  560,  520,  520,  560,  560,
 /*  5180 */   560,  560,  520,  520,  520,  520,  560,  520,  520,  520,
 /*  5190 */   520,  520,  560,  520,  520,  520,  520,  520,  520,  520,
 /*  5200 */   520,  520,  520,  560,  520,  560,  560,  520,  559,  559,
 /*  5210 */   559,  559,  520,  559,  559,  559,  559,  559,  559,  559,
 /*  5220 */   559,  559,  559,  559,  559,  559,  559,  559,  559,  520,
 /*  5230 */   520,  559,  559,  559,  559,  520,  520,  520,  520,  559,
 /*  5240 */   520,  520,  520,  520,  520,  559,  520,  520,  520,  520,
 /*  5250 */   520,  520,  520,  520,  520,  520,  559,  520,  559,  559,
 /*  5260 */   520,  558,  558,  558,  558,  520,  558,  558,  558,  558,
 /*  5270 */   558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
 /*  5280 */   558,  558,  520,  520,   19,  558,  558,  558,  520,  520,
 /*  5290 */   520,  520,  558,  520,  520,  520,  520,  520,  558,  520,
 /*  5300 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  558,
 /*  5310 */   520,  558,  558,  520,  569,  569,  569,  569,  520,  569,
 /*  5320 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
 /*  5330 */   569,  569,  569,  569,  569,  520,  520,  569,  324,  569,
 /*  5340 */   569,  520,  520,  520,  520,  569,  520,  520,  520,  520,
 /*  5350 */   520,  569,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  5360 */   520,  520,  569,  520,  569,  569,  520,  557,  557,  557,
 /*  5370 */   557,  520,  557,  557,  557,  557,  557,  557,  557,  557,
 /*  5380 */   557,  557,  557,  557,  557,  557,  557,  557,  520,  520,
 /*  5390 */    20,  557,  557,  557,  520,  520,  520,  520,  557,  520,
 /*  5400 */   520,  520,  520,  520,  557,  520,  520,  520,  520,  520,
 /*  5410 */   520,  520,  520,  520,  520,  557,  520,  557,  557,  520,
 /*  5420 */   556,  556,  556,  556,  520,  556,  556,  556,  556,  556,
 /*  5430 */   556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
 /*  5440 */   556,  520,  520,  556,  556,  556,  556,  520,  520,  520,
 /*  5450 */   520,  556,  520,  520,  520,  520,  520,  556,  520,  520,
 /*  5460 */   520,  520,  520,  520,  520,  520,  520,  520,  556,  520,
 /*  5470 */   556,  556,  520,  551,  551,  551,  551,  520,  551,  551,
 /*  5480 */   551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
 /*  5490 */   551,  551,  551,  551,  520,  520,  551,  551,  551,  551,
 /*  5500 */   520,  520,  520,  520,  551,  520,  520,  526,  520,  520,
 /*  5510 */   551,  520,  520,  520,  520,  520,  520,  520,  520,  526,
 /*  5520 */   526,  551,  520,  551,  551,  526,  526,  526,  520,  218,
 /*  5530 */   526,  520,  520,  520,  520,  520,  526,  526,  520,  526,
 /*  5540 */   520,  520,  526,  520,  520,  520,  526,  526,  526,  526,
 /*  5550 */   526,  520,  526,  526,  526,  520,  520,  520,  520,  520,
 /*  5560 */   520,  520,  520,  520,  520,  526,  526,  526,  526,  526,
 /*  5570 */   526,  526,  526,  526,   76,  553,   57,   58,  520,   64,
 /*  5580 */    62,   61,   60,   59,   63,   66,   65,   67,   69,   68,
 /*  5590 */    74,   73,   71,   72,   70,  520,  520,   18,   78,  318,
 /*  5600 */   553,  520,  520,  520,  520,  553,  520,  520,  520,  520,
 /*  5610 */   520,  553,  520,  520,  520,  520,   76,  552,   57,   58,
 /*  5620 */   520,   64,   62,   61,   60,   59,   63,   66,   65,   67,
 /*  5630 */    69,   68,   74,   73,   71,   72,   70,  520,  520,   18,
 /*  5640 */    78,  318,  552,  520,  520,  520,  520,  552,  520,  520,
 /*  5650 */   520,  520,  520,  552,  520,  520,  520,  520,  569,  569,
 /*  5660 */   569,  569,  520,  569,  569,  569,  569,  569,  569,  569,
 /*  5670 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  520,
 /*  5680 */   520,  569,  317,  569,  569,  520,  520,  520,  520,  569,
 /*  5690 */   520,  520,  520,  520,  520,  569,  520,  520,  520,  520,
 /*  5700 */    76,  614,   57,   58,  520,   64,   62,   61,   60,   59,
 /*  5710 */    63,   66,   65,   67,   69,   68,   74,   73,   71,   72,
 /*  5720 */    70,  520,  520,   18,   78,  318,  614,  520,  520,  520,
 /*  5730 */   520,  614,  520,  520,  520,  520,   76,  612,   57,   58,
 /*  5740 */   520,   64,   62,   61,   60,   59,   63,   66,   65,   67,
 /*  5750 */    69,   68,   74,   73,   71,   72,   70,  520,  520,   18,
 /*  5760 */    78,  318,  612,  520,  520,  520,  520,  612,  520,  520,
 /*  5770 */   520,  520,   76,  625,   57,   58,  520,   64,   62,   61,
 /*  5780 */    60,   59,   63,   66,   65,   67,   69,   68,   74,   73,
 /*  5790 */    71,   72,   70,  520,  520,   18,   78,  318,  625,  520,
 /*  5800 */   520,  520,  520,  625,  520,  520,  520,  520,   76,  624,
 /*  5810 */    57,   58,  520,   64,   62,   61,   60,   59,   63,   66,
 /*  5820 */    65,   67,   69,   68,   74,   73,   71,   72,   70,  520,
 /*  5830 */   520,   18,   78,  318,  624,  520,  520,  520,  520,  624,
 /*  5840 */   520,  520,  520,  520,   76,  623,   57,   58,  520,   64,
 /*  5850 */    62,   61,   60,   59,   63,   66,   65,   67,   69,   68,
 /*  5860 */    74,   73,   71,   72,   70,  520,  520,   18,   78,  318,
 /*  5870 */   623,  520,  520,  520,  520,  623,  520,  520,  520,  520,
 /*  5880 */    76,  622,   57,   58,  520,   64,   62,   61,   60,   59,
 /*  5890 */    63,   66,   65,   67,   69,   68,   74,   73,   71,   72,
 /*  5900 */    70,  520,  520,   18,   78,  318,  622,  520,  520,  520,
 /*  5910 */   520,  622,  520,  520,  520,  520,   76,  621,   57,   58,
 /*  5920 */   520,   64,   62,   61,   60,   59,   63,   66,   65,   67,
 /*  5930 */    69,   68,   74,   73,   71,   72,   70,  520,  520,   18,
 /*  5940 */    78,  318,  621,  520,  520,  520,  520,  621,  520,  520,
 /*  5950 */   520,  520,   76,  620,   57,   58,  520,   64,   62,   61,
 /*  5960 */    60,   59,   63,   66,   65,   67,   69,   68,   74,   73,
 /*  5970 */    71,   72,   70,  520,  520,   18,   78,  318,  620,  520,
 /*  5980 */   520,  520,  520,  620,  520,  520,  520,  520,   76,  619,
 /*  5990 */    57,   58,  520,   64,   62,   61,   60,   59,   63,   66,
 /*  6000 */    65,   67,   69,   68,   74,   73,   71,   72,   70,  520,
 /*  6010 */   520,   18,   78,  318,  619,  520,  520,  520,  520,  619,
 /*  6020 */   520,  520,  520,  520,   76,  618,   57,   58,  520,   64,
 /*  6030 */    62,   61,   60,   59,   63,   66,   65,   67,   69,   68,
 /*  6040 */    74,   73,   71,   72,   70,  520,  520,   18,   78,  318,
 /*  6050 */   618,  520,  520,  520,  520,  618,  520,  520,  520,  520,
 /*  6060 */    76,  617,   57,   58,  520,   64,   62,   61,   60,   59,
 /*  6070 */    63,   66,   65,   67,   69,   68,   74,   73,   71,   72,
 /*  6080 */    70,  520,  520,   18,   78,  318,  617,  520,  520,  520,
 /*  6090 */   520,  617,  520,  520,  520,  520,   76,  616,   57,   58,
 /*  6100 */   520,   64,   62,   61,   60,   59,   63,   66,   65,   67,
 /*  6110 */    69,   68,   74,   73,   71,   72,   70,  520,  520,   18,
 /*  6120 */    78,  318,  616,  520,  520,  520,  520,  616,  520,  520,
 /*  6130 */   520,  520,   76,  610,   57,   58,  520,   64,   62,   61,
 /*  6140 */    60,   59,   63,   66,   65,   67,   69,   68,   74,   73,
 /*  6150 */    71,   72,   70,  520,  520,   18,   78,  318,  610,  520,
 /*  6160 */   520,  520,  520,  610,  520,  520,  520,   79,  558,  558,
 /*  6170 */   558,  558,  520,  558,  558,  558,  558,  558,  558,  558,
 /*  6180 */   558,  558,  558,  558,  558,  558,  558,  558,  558,  520,
 /*  6190 */   520,   19,  558,  558,  520,  520,  520,  520,  569,  558,
 /*  6200 */   569,  569,  520,  569,  569,  569,  569,  569,  569,  569,
 /*  6210 */   569,  569,  569,  569,  569,  569,  569,  569,  569,  520,
 /*  6220 */   520,  569,  324,  569,  118,  520,  520,   76,  520,   57,
 /*  6230 */    58,  520,   64,   62,   61,   60,   59,   63,   66,   65,
 /*  6240 */    67,   69,   68,   74,   73,   71,   72,   70,  569,  569,
 /*  6250 */    18,   51,  295,  520,  520,  520,   76,  563,   57,   58,
 /*  6260 */   520,   64,   62,   61,   60,   59,   63,   66,   65,   67,
 /*  6270 */    69,   68,   74,   73,   71,   72,   70,  240,  239,   18,
 /*  6280 */    78,  318,  520,   76,  561,   57,   58,  563,   64,   62,
 /*  6290 */    61,   60,   59,   63,   66,   65,   67,   69,   68,   74,
 /*  6300 */    73,   71,   72,   70,  520,  520,   18,   78,  318,  520,
 /*  6310 */   520,  520,  520,   76,  561,   57,   58,  520,   64,   62,
 /*  6320 */    61,   60,   59,   63,   66,   65,   67,   69,   68,   74,
 /*  6330 */    73,   71,   72,   70,  520,  520,   18,   78,  318,  213,
 /*  6340 */   520,   76,  520,   57,   58,  520,   64,   62,   61,   60,
 /*  6350 */    59,   63,   66,   65,   67,   69,   68,   74,   73,   71,
 /*  6360 */    72,   70,  520,  520,   18,   78,  318,  520,  520,  520,
 /*  6370 */   520,   76,  141,   57,   58,  520,   64,   62,   61,   60,
 /*  6380 */    59,   63,   66,   65,   67,   69,   68,   74,   73,   71,
 /*  6390 */    72,   70,  520,  520,   18,   78,  318,  520,  520,  520,
 /*  6400 */   520,   76,  142,   57,   58,  520,   64,   62,   61,   60,
 /*  6410 */    59,   63,   66,   65,   67,   69,   68,   74,   73,   71,
 /*  6420 */    72,   70,  520,  520,   18,   78,  318,  520,  520,  520,
 /*  6430 */   520,   76,  144,   57,   58,  520,   64,   62,   61,   60,
 /*  6440 */    59,   63,   66,   65,   67,   69,   68,   74,   73,   71,
 /*  6450 */    72,   70,  520,  520,   18,   78,  318,  520,  520,  520,
 /*  6460 */   520,  520,  520,  520,  520,  520,  520,  520,   94,  520,
 /*  6470 */   520,  520,  520,   76,  520,   57,   58,  520,   64,   62,
 /*  6480 */    61,   60,   59,   63,   66,   65,   67,   69,   68,   74,
 /*  6490 */    73,   71,   72,   70,  520,  520,   18,   78,  318,  520,
 /*  6500 */   520,  520,  520,   76,  158,   57,   58,  520,   64,   62,
 /*  6510 */    61,   60,   59,   63,   66,   65,   67,   69,   68,   74,
 /*  6520 */    73,   71,   72,   70,  520,  520,   18,   78,  318,  520,
 /*  6530 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  6540 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  6550 */   520,   75,  520,  520,  520,  520,   76,  520,   57,   58,
 /*  6560 */   520,   64,   62,   61,   60,   59,   63,   66,   65,   67,
 /*  6570 */    69,   68,   74,   73,   71,   72,   70,  520,  520,   18,
 /*  6580 */    78,  318,  520,  520,  520,  520,   76,  172,   57,   58,
 /*  6590 */   520,   64,   62,   61,   60,   59,   63,   66,   65,   67,
 /*  6600 */    69,   68,   74,   73,   71,   72,   70,  520,  520,   18,
 /*  6610 */    78,  318,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  6620 */   520,  520,  520,  173,  520,  520,  520,  520,   76,  520,
 /*  6630 */    57,   58,  520,   64,   62,   61,   60,   59,   63,   66,
 /*  6640 */    65,   67,   69,   68,   74,   73,   71,   72,   70,   52,
 /*  6650 */   520,   18,   51,  295,  520,  520,  520,  520,  520,  520,
 /*  6660 */   520,   55,   54,  520,  520,  520,  520,   53,   77,   31,
 /*  6670 */   520,  690,   96,  520,  520,  520,  520,  520,  520,   89,
 /*  6680 */   520,  178,  520,  520,  177,  520,  520,  520,  314,  313,
 /*  6690 */   310,  307,  304,  636,   88,   38,   37,  520,  520,  520,
 /*  6700 */   520,  520,  520,  520,  520,  636,  636,  520,  520,  520,
 /*  6710 */   520,  636,  636,  636,  301,  636,  636,  520,  520,  520,
 /*  6720 */   520,  520,  520,  636,  520,  636,  520,  520,  636,  520,
 /*  6730 */   520,  520,  636,  636,  636,  636,  636,   52,  636,  636,
 /*  6740 */   636,  520,  520,  520,  520,  520,  520,  520,  520,   55,
 /*  6750 */    54,  520,  520,  520,  520,   53,   77,   31,  636,  520,
 /*  6760 */    96,  520,  520,  520,  520,  520,  520,   89,  520,  178,
 /*  6770 */   520,  520,  177,  520,  520,  520,  314,  313,  310,  307,
 /*  6780 */   304,   52,   88,   38,   37,  520,  520,  520,  520,  520,
 /*  6790 */   520,  520,  520,   55,   54,  520,  520,  520,  520,   53,
 /*  6800 */    77,   31,  301,  520,   96,  520,  520,  520,  693,  520,
 /*  6810 */   520,  520,  520,  178,  520,  520,  177,  638,  520,  520,
 /*  6820 */   314,  313,  310,  307,  304,  520,  520,   38,   37,  638,
 /*  6830 */   638,  520,  520,  520,  520,  638,  638,  638,  520,  520,
 /*  6840 */   638,  520,  520,  520,  638,  520,  301,  520,  520,  638,
 /*  6850 */   520,  520,  638,   52,  520,  520,  638,  638,  638,  638,
 /*  6860 */   638,  520,  520,  638,  638,   55,   54,  520,  520,  520,
 /*  6870 */   520,   53,   77,   31,  520,  520,   96,  520,  520,  520,
 /*  6880 */   520,  520,  638,  520,  520,  178,  520,  520,  177,  520,
 /*  6890 */   520,  520,  314,  313,  310,  307,  304,   52,  520,   38,
 /*  6900 */    37,  520,  520,  520,  520,  520,  520,  520,  520,   55,
 /*  6910 */    54,  520,  520,  520,  520,   53,   77,   31,  301,  520,
 /*  6920 */   197,  520,  520,  520,  565,  520,  520,  520,  520,  178,
 /*  6930 */   520,  520,  177,   52,  270,  520,  314,  313,  310,  307,
 /*  6940 */   304,  520,  520,  520,  520,   55,   54,  520,  520,  520,
 /*  6950 */   520,   53,   77,   31,  520,  554,  175,  520,  520,  520,
 /*  6960 */   520,  520,  301,  520,  520,  178,  520,  520,  177,  520,
 /*  6970 */   520,   52,  314,  313,  310,  307,  304,  520,  520,  520,
 /*  6980 */   520,  520,  520,   55,   54,  520,  520,  520,  520,   53,
 /*  6990 */    77,   31,  520,  520,  197,  520,  520,  520,  301,  520,
 /*  7000 */   520,  520,  520,  178,  520,  520,  177,   52,  270,  520,
 /*  7010 */   314,  313,  310,  307,  304,  520,  520,  520,  520,   55,
 /*  7020 */    54,  520,  520,  520,  520,   53,   77,   31,  520,  520,
 /*  7030 */   175,  520,  520,  520,  520,  520,  301,  520,  520,  178,
 /*  7040 */   680,  520,  177,  520,  520,   52,  314,  313,  310,  307,
 /*  7050 */   304,  520,  520,  520,  520,  520,  520,   55,   54,  520,
 /*  7060 */   520,  520,  520,   53,   77,   31,  520,  520,  175,  520,
 /*  7070 */   520,  520,  301,  520,  520,  520,  520,  178,  520,  520,
 /*  7080 */   177,   52,  520,  520,  314,  313,  310,  307,  304,  520,
 /*  7090 */   520,  520,  520,   55,   54,  520,  520,  520,  520,   53,
 /*  7100 */    77,   31,  520,  520,   96,  520,  520,  520,  520,  520,
 /*  7110 */   301,  520,  520,  178,  520,  520,  177,  520,  520,  637,
 /*  7120 */   314,  313,  310,  307,  304,  520,  520,  520,  520,  520,
 /*  7130 */   520,  637,  637,  520,  520,  520,  520,  637,  637,  637,
 /*  7140 */   520,  520,  637,  520,  520,  520,  301,  520,  520,  259,
 /*  7150 */   520,  637,  520,  520,  637,  520,  520,  520,  637,  637,
 /*  7160 */   637,  637,  637,  520,  520,  520,  520,  258,  257,  256,
 /*  7170 */   176,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  7180 */   199,  520,  520,  520,  637,  215,  261,  520,  520,  520,
 /*  7190 */   520,  520,  520,  520,  520,  520,  254,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */   125,  126,  127,    3,    4,    5,    6,    7,  119,    9,
 /*    10 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*    20 */    20,   21,   22,   23,   24,   77,   78,   27,   28,   29,
 /*    30 */    79,   80,   81,   82,   83,   84,   85,   86,   87,   31,
 /*    40 */    89,   34,  105,   92,   93,   38,   39,    3,   94,    5,
 /*    50 */    99,  114,  115,  116,   54,   55,   56,   57,   58,   59,
 /*    60 */    60,   61,   62,   63,   64,   65,    3,    4,    5,    6,
 /*    70 */     7,   94,    9,   10,   11,   12,   13,   14,   15,   16,
 /*    80 */    17,   18,   19,   20,   21,   22,   23,   24,  105,   94,
 /*    90 */    27,   28,   29,   95,   96,   29,   30,  114,  115,   33,
 /*   100 */    56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
 /*   110 */    34,    5,   29,   30,   38,   39,   33,   54,   55,   56,
 /*   120 */    57,   58,   59,   60,   61,   62,   63,   64,   65,    3,
 /*   130 */     4,    5,    6,    7,   94,    9,   10,   11,   12,   13,
 /*   140 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*   150 */    24,   94,   94,   27,   28,   29,  105,   34,   52,   31,
 /*   160 */   105,   38,   39,   35,  105,  105,  115,   90,  117,  118,
 /*   170 */   115,   94,  117,  118,  115,  115,  117,  118,   40,   39,
 /*   180 */    54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
 /*   190 */    64,   65,    0,  105,    2,  113,   31,  105,   29,   30,
 /*   200 */     8,  105,   33,  115,  105,  117,  118,  115,    5,  117,
 /*   210 */   118,  115,   20,   21,  115,  105,    5,   90,   26,   27,
 /*   220 */    28,   94,   30,   31,   32,  115,   34,  117,   36,   37,
 /*   230 */    38,   39,   40,   30,    3,   43,    5,    5,   88,   47,
 /*   240 */    48,   49,   50,   51,  105,   53,   54,   55,    0,  100,
 /*   250 */     2,    5,   41,  114,  115,    3,    8,    5,   66,   67,
 /*   260 */    68,   69,   70,   71,   72,   73,   74,   34,   20,   21,
 /*   270 */   100,   38,   39,   41,   26,   27,   28,    5,   30,   31,
 /*   280 */    32,   35,   34,  105,   36,   37,   38,   39,   40,   30,
 /*   290 */     5,   43,  114,  115,   27,   47,   48,   49,   50,   51,
 /*   300 */   105,   53,   54,   55,    0,   35,    2,   35,    5,  114,
 /*   310 */   115,   37,    8,  105,   66,   67,   68,   69,   70,   71,
 /*   320 */    72,   73,   74,  115,   20,   21,   41,   31,  120,  105,
 /*   330 */    26,   27,   28,   30,   30,   31,   32,    5,   34,  115,
 /*   340 */    36,   37,   38,   39,   40,   34,    3,   43,    5,   38,
 /*   350 */    39,   47,   48,   49,   50,   51,  105,   53,   54,   55,
 /*   360 */     0,   31,    2,    5,    5,  114,  115,   35,    8,    5,
 /*   370 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   34,
 /*   380 */    20,   21,   30,   38,   39,  105,   26,   27,   28,   30,
 /*   390 */    30,   31,   32,   35,   34,  115,   36,   37,   38,   39,
 /*   400 */    40,   35,    3,   43,    5,   41,   27,   47,   48,   49,
 /*   410 */    50,   51,  105,   53,   54,   55,    0,   30,    2,    5,
 /*   420 */     5,  114,  115,   30,    8,  105,   66,   67,   68,   69,
 /*   430 */    70,   71,   72,   73,   74,  115,   20,   21,   30,   27,
 /*   440 */    35,  105,   26,   27,   28,   30,   30,   31,   32,   35,
 /*   450 */    34,  115,   36,   37,   38,   39,   40,   31,   30,   43,
 /*   460 */    27,   27,   27,   47,   48,   49,   50,   51,  105,   53,
 /*   470 */    54,   55,    0,   27,    2,    5,    5,  114,  115,   27,
 /*   480 */     8,  105,   66,   67,   68,   69,   70,   71,   72,   73,
 /*   490 */    74,  115,   20,   21,   27,   27,   35,  105,   26,   27,
 /*   500 */    28,   30,   30,   31,   32,   35,   34,  115,   36,   37,
 /*   510 */    38,   39,   40,   31,  105,   43,   35,   41,   35,   47,
 /*   520 */    48,   49,   50,   51,  115,   53,   54,   55,    0,   35,
 /*   530 */     2,    5,    5,   27,   35,   45,    8,  105,   66,   67,
 /*   540 */    68,   69,   70,   71,   72,   73,   74,  115,   20,   21,
 /*   550 */    27,   35,   45,  105,   26,   27,   28,   30,   30,   31,
 /*   560 */    32,   35,   34,  115,   36,   37,   38,   39,   40,   27,
 /*   570 */   105,   43,   35,   27,   45,   47,   48,   49,   50,   51,
 /*   580 */   115,   53,   54,   55,    0,   35,    2,    5,    5,   27,
 /*   590 */    45,   27,    8,  105,   66,   67,   68,   69,   70,   71,
 /*   600 */    72,   73,   74,  115,   20,   21,   41,   40,   28,  105,
 /*   610 */    26,   27,   28,   30,   30,   31,   32,   35,   34,  115,
 /*   620 */    36,   37,   38,   39,   40,   31,  105,   43,   30,   30,
 /*   630 */    41,   47,   48,   49,   50,   51,  115,   53,   54,   55,
 /*   640 */     0,   41,    2,   40,   28,   30,   35,   30,    8,  105,
 /*   650 */    66,   67,   68,   69,   70,   71,   72,   73,   74,  115,
 /*   660 */    20,   21,   30,   30,   30,  105,   26,   27,   28,   31,
 /*   670 */    30,   31,   32,    5,   34,  115,   36,   37,   38,   39,
 /*   680 */    40,   30,  105,   43,   30,   30,  105,   47,   48,   49,
 /*   690 */    50,   51,  115,   53,   54,   55,  115,   27,   30,  140,
 /*   700 */    31,   30,   30,   35,   31,   31,   66,   67,   68,   69,
 /*   710 */    70,   71,   72,   73,   74,    4,    5,    6,    7,    0,
 /*   720 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   730 */    19,   20,   21,   22,   23,   24,    5,    5,   27,   28,
 /*   740 */    29,   30,   30,   30,  105,   30,   35,  140,  105,  140,
 /*   750 */   140,   32,   41,   34,  115,   36,   37,   38,  115,  140,
 /*   760 */   140,   30,   30,   52,    5,   54,   55,   35,    4,    5,
 /*   770 */     6,    7,   53,    9,   10,   11,   12,   13,   14,   15,
 /*   780 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   30,
 /*   790 */     5,   27,   28,   29,   30,  140,  105,  105,  105,   35,
 /*   800 */   105,  105,  105,  140,  105,   41,  115,  115,  115,  140,
 /*   810 */   115,  115,  115,  140,  115,   30,   52,    5,   54,   55,
 /*   820 */    35,    4,    5,    6,    7,    0,    9,   10,   11,   12,
 /*   830 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*   840 */    23,   24,   30,  105,   27,   28,   29,   30,    5,  140,
 /*   850 */   105,  140,   35,  115,  105,  140,  140,   32,   41,   34,
 /*   860 */   115,   36,   37,   38,  115,  140,  140,  140,  140,   52,
 /*   870 */     5,   54,   55,   30,    4,    5,    6,    7,   53,    9,
 /*   880 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   890 */    20,   21,   22,   23,   24,   30,  105,   27,   28,   29,
 /*   900 */    30,  140,  105,  105,  105,   35,  115,  105,  105,  140,
 /*   910 */   105,   41,  115,  115,  115,  140,  105,  115,  115,  140,
 /*   920 */   115,  140,   52,  140,   54,   55,  115,    4,    5,    6,
 /*   930 */     7,    0,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   940 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  105,
 /*   950 */    27,   28,   29,   30,  140,  140,  105,  140,   35,  115,
 /*   960 */   105,  140,  140,   32,   41,   34,  115,   36,   37,   38,
 /*   970 */   115,  140,  140,  140,  140,   52,  140,   54,   55,  140,
 /*   980 */     4,    5,    6,    7,   53,    9,   10,   11,   12,   13,
 /*   990 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  1000 */    24,  140,  140,   27,   28,   29,   30,    3,    3,    5,
 /*  1010 */     5,   35,    0,  105,    2,  140,  105,   41,  140,  105,
 /*  1020 */     8,  140,  140,  115,  140,  140,  115,  140,   52,  115,
 /*  1030 */    54,   55,   20,   21,   30,   30,  140,  105,   26,   27,
 /*  1040 */    28,  140,   30,   31,   32,  140,   34,  115,   36,   37,
 /*  1050 */    38,   39,   40,  140,  140,   43,  140,  140,  140,   47,
 /*  1060 */    48,   49,   50,   51,  140,   53,   54,   55,    0,  140,
 /*  1070 */     2,  140,  140,  140,  140,  140,    8,  140,   66,   67,
 /*  1080 */    68,   69,   70,   71,   72,   73,   74,  140,   20,   21,
 /*  1090 */   140,  140,  140,  140,   26,   27,   28,  140,   30,   31,
 /*  1100 */    32,  140,   34,  140,   36,   37,   38,   39,   40,  140,
 /*  1110 */   140,   43,  140,  140,  140,   47,   48,   49,   50,   51,
 /*  1120 */   140,   53,   54,   55,    0,  140,    2,  140,  140,  140,
 /*  1130 */   140,  140,    8,  140,   66,   67,   68,   69,   70,   71,
 /*  1140 */    72,   73,   74,  140,   20,   21,  140,  140,  140,  140,
 /*  1150 */    26,   27,   28,  140,   30,   31,   32,  140,   34,  140,
 /*  1160 */    36,   37,   38,   39,   40,  140,  140,   43,  140,  140,
 /*  1170 */   140,   47,   48,   49,   50,   51,  140,   53,   54,   55,
 /*  1180 */     0,  140,    2,  140,  140,  140,  140,  140,    8,  140,
 /*  1190 */    66,   67,   68,   69,   70,   71,   72,   73,   74,  140,
 /*  1200 */    20,   21,  140,  140,  140,  140,   26,   27,   28,  140,
 /*  1210 */    30,   31,   32,  140,   34,  140,   36,   37,   38,   39,
 /*  1220 */    40,  140,  140,   43,  140,  140,  140,   47,   48,   49,
 /*  1230 */    50,   51,  140,   53,   54,   55,    0,  140,    2,  140,
 /*  1240 */   140,  140,  140,  140,    8,  140,   66,   67,   68,   69,
 /*  1250 */    70,   71,   72,   73,   74,  140,   20,   21,  140,  140,
 /*  1260 */   140,  140,   26,   27,   28,  140,   30,   31,   32,  140,
 /*  1270 */    34,  140,   36,   37,   38,   39,   40,  140,  140,   43,
 /*  1280 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  1290 */    54,   55,    0,  140,    2,  140,  140,  140,  140,  140,
 /*  1300 */     8,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  1310 */    74,  140,   20,   21,  140,  140,  140,  140,   26,   27,
 /*  1320 */    28,  140,   30,   31,   32,  140,   34,  140,   36,   37,
 /*  1330 */    38,   39,   40,  140,  140,   43,  140,  140,  140,   47,
 /*  1340 */    48,   49,   50,   51,  140,   53,   54,   55,    0,  140,
 /*  1350 */     2,  140,  140,  140,  140,  140,    8,  140,   66,   67,
 /*  1360 */    68,   69,   70,   71,   72,   73,   74,  140,   20,   21,
 /*  1370 */   140,  140,  140,  140,   26,   27,   28,  140,   30,   31,
 /*  1380 */    32,  140,   34,  140,   36,   37,   38,   39,   40,  140,
 /*  1390 */   140,   43,  140,  140,  140,   47,   48,   49,   50,   51,
 /*  1400 */   140,   53,   54,   55,    0,  140,    2,  140,  140,  140,
 /*  1410 */   140,  140,    8,  140,   66,   67,   68,   69,   70,   71,
 /*  1420 */    72,   73,   74,  140,   20,   21,  140,  140,  140,  140,
 /*  1430 */    26,   27,   28,  140,   30,   31,   32,  140,   34,  140,
 /*  1440 */    36,   37,   38,   39,   40,  140,  140,   43,  140,  140,
 /*  1450 */   140,   47,   48,   49,   50,   51,  140,   53,   54,   55,
 /*  1460 */     0,  140,    2,  140,  140,  140,  140,  140,    8,  140,
 /*  1470 */    66,   67,   68,   69,   70,   71,   72,   73,   74,  140,
 /*  1480 */    20,   21,  140,  140,  140,  140,   26,   27,   28,  140,
 /*  1490 */    30,   31,   32,  140,   34,  140,   36,   37,   38,   39,
 /*  1500 */    40,  140,  140,   43,  140,  140,  140,   47,   48,   49,
 /*  1510 */    50,   51,  140,   53,   54,   55,    0,  140,    2,  140,
 /*  1520 */   140,  140,  140,  140,    8,  140,   66,   67,   68,   69,
 /*  1530 */    70,   71,   72,   73,   74,  140,   20,   21,  140,  140,
 /*  1540 */   140,  140,   26,   27,   28,  140,   30,   31,   32,  140,
 /*  1550 */    34,  140,   36,   37,   38,   39,   40,  140,  140,   43,
 /*  1560 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  1570 */    54,   55,    0,  140,    2,  140,  140,  140,  140,  140,
 /*  1580 */     8,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  1590 */    74,  140,   20,   21,  140,  140,  140,  140,   26,   27,
 /*  1600 */    28,  140,   30,   31,   32,  140,   34,  140,   36,   37,
 /*  1610 */    38,   39,   40,  140,  140,   43,  140,  140,  140,   47,
 /*  1620 */    48,   49,   50,   51,  140,   53,   54,   55,    0,  140,
 /*  1630 */     2,  140,  140,  140,  140,  140,    8,  140,   66,   67,
 /*  1640 */    68,   69,   70,   71,   72,   73,   74,  140,   20,   21,
 /*  1650 */   140,  140,  140,  140,   26,   27,   28,  140,   30,   31,
 /*  1660 */    32,  140,   34,  140,   36,   37,   38,   39,   40,  140,
 /*  1670 */   140,   43,  140,  140,  140,   47,   48,   49,   50,   51,
 /*  1680 */   140,   53,   54,   55,    0,  140,    2,  140,  140,  140,
 /*  1690 */   140,  140,    8,  140,   66,   67,   68,   69,   70,   71,
 /*  1700 */    72,   73,   74,  140,   20,   21,  140,  140,  140,  140,
 /*  1710 */    26,   27,   28,  140,   30,   31,   32,  140,   34,  140,
 /*  1720 */    36,   37,   38,   39,   40,  140,  140,   43,  140,  140,
 /*  1730 */   140,   47,   48,   49,   50,   51,  140,   53,   54,   55,
 /*  1740 */     0,  140,    2,  140,  140,  140,  140,  140,    8,  140,
 /*  1750 */    66,   67,   68,   69,   70,   71,   72,   73,   74,  140,
 /*  1760 */    20,   21,  140,  140,  140,  140,   26,   27,   28,  140,
 /*  1770 */    30,   31,   32,  140,   34,  140,   36,   37,   38,   39,
 /*  1780 */    40,  140,  140,   43,  140,  140,  140,   47,   48,   49,
 /*  1790 */    50,   51,  140,   53,   54,   55,    0,  140,    2,  140,
 /*  1800 */   140,  140,  140,  140,    8,  140,   66,   67,   68,   69,
 /*  1810 */    70,   71,   72,   73,   74,  140,   20,   21,  140,  140,
 /*  1820 */   140,  140,   26,   27,   28,  140,   30,   31,   32,  140,
 /*  1830 */    34,  140,   36,   37,   38,   39,   40,  140,  140,   43,
 /*  1840 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  1850 */    54,   55,    0,  140,    2,  140,  140,  140,  140,  140,
 /*  1860 */     8,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  1870 */    74,  140,   20,   21,  140,  140,  140,  140,   26,   27,
 /*  1880 */    28,  140,   30,   31,   32,  140,   34,  140,   36,   37,
 /*  1890 */    38,   39,   40,  140,  140,   43,  140,  140,  140,   47,
 /*  1900 */    48,   49,   50,   51,  140,   53,   54,   55,    0,  140,
 /*  1910 */     2,  140,  140,  140,  140,  140,    8,  140,   66,   67,
 /*  1920 */    68,   69,   70,   71,   72,   73,   74,  140,   20,   21,
 /*  1930 */   140,  140,  140,  140,   26,   27,   28,  140,   30,   31,
 /*  1940 */    32,  140,   34,  140,   36,   37,   38,   39,   40,  140,
 /*  1950 */   140,   43,  140,  140,  140,   47,   48,   49,   50,   51,
 /*  1960 */   140,   53,   54,   55,    0,  140,    2,  140,  140,  140,
 /*  1970 */   140,  140,    8,  140,   66,   67,   68,   69,   70,   71,
 /*  1980 */    72,   73,   74,  140,   20,   21,  140,  140,  140,  140,
 /*  1990 */    26,   27,   28,  140,   30,   31,   32,  140,   34,  140,
 /*  2000 */    36,   37,   38,   39,   40,  140,  140,   43,  140,  140,
 /*  2010 */   140,   47,   48,   49,   50,   51,  140,   53,   54,   55,
 /*  2020 */     0,  140,    2,  140,  140,  140,  140,  140,    8,  140,
 /*  2030 */    66,   67,   68,   69,   70,   71,   72,   73,   74,  140,
 /*  2040 */    20,   21,  140,  140,  140,  140,   26,   27,   28,  140,
 /*  2050 */    30,   31,   32,  140,   34,  140,   36,   37,   38,   39,
 /*  2060 */    40,  140,  140,   43,  140,  140,  140,   47,   48,   49,
 /*  2070 */    50,   51,  140,   53,   54,   55,    0,  140,    2,  140,
 /*  2080 */   140,  140,  140,  140,    8,  140,   66,   67,   68,   69,
 /*  2090 */    70,   71,   72,   73,   74,  140,   20,   21,  140,  140,
 /*  2100 */   140,  140,   26,   27,   28,  140,   30,   31,   32,  140,
 /*  2110 */    34,  140,   36,   37,   38,   39,   40,  140,  140,   43,
 /*  2120 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  2130 */    54,   55,    0,  140,    2,  140,  140,  140,  140,  140,
 /*  2140 */     8,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  2150 */    74,  140,   20,   21,  140,  140,  140,  140,   26,   27,
 /*  2160 */    28,  140,   30,   31,   32,  140,   34,  140,   36,   37,
 /*  2170 */    38,   39,   40,  140,  140,   43,  140,  140,  140,   47,
 /*  2180 */    48,   49,   50,   51,  140,   53,   54,   55,    0,  140,
 /*  2190 */     2,  140,  140,  140,  140,  140,    8,  140,   66,   67,
 /*  2200 */    68,   69,   70,   71,   72,   73,   74,  140,   20,   21,
 /*  2210 */   140,  140,  140,  140,   26,   27,   28,  140,   30,   31,
 /*  2220 */    32,  140,   34,  140,   36,   37,   38,   39,   40,  140,
 /*  2230 */   140,   43,   84,  140,  140,   47,   48,   49,   50,   51,
 /*  2240 */   140,   53,   54,   55,  140,    5,  140,  140,  140,  140,
 /*  2250 */   102,  103,  104,  105,   66,   67,   68,   69,   70,   71,
 /*  2260 */    72,   73,   74,  115,   75,  140,  140,  140,  120,  121,
 /*  2270 */    30,  140,  140,   84,  140,   35,   87,  140,  140,  131,
 /*  2280 */   132,   41,  140,  140,  140,  140,   97,   98,   99,  100,
 /*  2290 */   140,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2300 */   111,  112,  140,  140,  115,  104,  105,  140,  140,  120,
 /*  2310 */   121,  122,  123,  124,  140,  140,  115,  128,  129,  130,
 /*  2320 */   140,  120,  121,  140,  135,  136,  137,  138,  139,  140,
 /*  2330 */    75,  140,  140,  140,  133,  134,  140,  140,  140,   84,
 /*  2340 */   140,  140,   87,  140,  140,  140,  140,  140,  140,  140,
 /*  2350 */   140,  140,   97,   98,   99,  140,  101,  102,  103,  104,
 /*  2360 */   105,  106,  107,  108,  109,  110,  111,  112,  140,  140,
 /*  2370 */   115,  140,  140,  140,  140,  120,  121,  122,  123,  124,
 /*  2380 */     3,  140,    5,  128,  129,  130,   75,  140,  140,  140,
 /*  2390 */   135,  136,  137,  138,  139,   84,  140,  140,   87,  140,
 /*  2400 */   140,  140,   91,  140,  140,  140,  140,   30,   97,   98,
 /*  2410 */    99,  140,   35,  102,  103,  104,  105,  106,  107,  108,
 /*  2420 */   109,  110,  111,  112,  140,  140,  115,  104,  105,   52,
 /*  2430 */   140,  120,  121,  122,  123,  124,  140,  140,  115,  128,
 /*  2440 */   129,  130,   75,  120,  121,  140,  135,  136,  137,  138,
 /*  2450 */   139,   84,  140,  140,   87,  140,  133,  140,   91,  140,
 /*  2460 */   140,  140,  140,  140,   97,   98,   99,  140,  140,  102,
 /*  2470 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2480 */   140,  140,  115,  140,  140,  140,  140,  120,  121,  122,
 /*  2490 */   123,  124,    3,  140,    5,  128,  129,  130,   75,  140,
 /*  2500 */   140,  140,  135,  136,  137,  138,  139,   84,  140,  140,
 /*  2510 */    87,  140,  140,  140,   91,  140,  140,  140,  140,   30,
 /*  2520 */    97,   98,   99,  140,   35,  102,  103,  104,  105,  106,
 /*  2530 */   107,  108,  109,  110,  111,  112,  140,  140,  115,  140,
 /*  2540 */   140,   52,  140,  120,  121,  122,  123,  124,  140,  140,
 /*  2550 */   140,  128,  129,  130,   75,  140,  140,  140,  135,  136,
 /*  2560 */   137,  138,  139,   84,  140,  140,   87,  140,  140,  140,
 /*  2570 */    91,  140,  140,  140,  140,  140,   97,   98,   99,  140,
 /*  2580 */   140,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2590 */   111,  112,  140,  140,  115,  140,  140,  140,  140,  120,
 /*  2600 */   121,  122,  123,  124,  140,  140,  140,  128,  129,  130,
 /*  2610 */    75,  140,  140,  140,  135,  136,  137,  138,  139,   84,
 /*  2620 */   140,  140,   87,  140,  140,  140,   91,  140,  140,  140,
 /*  2630 */   140,  140,   97,   98,   99,  140,  140,  102,  103,  104,
 /*  2640 */   105,  106,  107,  108,  109,  110,  111,  112,  140,  140,
 /*  2650 */   115,  140,  140,  140,  140,  120,  121,  122,  123,  124,
 /*  2660 */   140,  140,  140,  128,  129,  130,   75,  140,  140,  140,
 /*  2670 */   135,  136,  137,  138,  139,   84,  140,  140,   87,  140,
 /*  2680 */   140,  140,   91,  140,  140,  140,  140,  140,   97,   98,
 /*  2690 */    99,  140,  140,  102,  103,  104,  105,  106,  107,  108,
 /*  2700 */   109,  110,  111,  112,  140,  140,  115,  140,  140,  140,
 /*  2710 */   140,  120,  121,  122,  123,  124,  140,  140,  140,  128,
 /*  2720 */   129,  130,   75,  140,  140,  140,  135,  136,  137,  138,
 /*  2730 */   139,   84,  140,  140,   87,  140,  140,  140,   91,  140,
 /*  2740 */   140,  140,  140,  140,   97,   98,   99,  140,  140,  102,
 /*  2750 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2760 */   140,  140,  115,  140,  140,  140,  140,  120,  121,  122,
 /*  2770 */   123,  124,  140,  140,  140,  128,  129,  130,   75,  140,
 /*  2780 */   140,  140,  135,  136,  137,  138,  139,   84,  140,  140,
 /*  2790 */    87,  140,  140,  140,   91,  140,  140,  140,  140,  140,
 /*  2800 */    97,   98,   99,  140,  140,  102,  103,  104,  105,  106,
 /*  2810 */   107,  108,  109,  110,  111,  112,  140,  140,  115,  140,
 /*  2820 */   140,  140,  140,  120,  121,  122,  123,  124,  140,  140,
 /*  2830 */   140,  128,  129,  130,    8,  140,  140,  140,  135,  136,
 /*  2840 */   137,  138,  139,  140,  140,  140,   20,   21,  140,  140,
 /*  2850 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  2860 */   140,  140,  140,   37,   38,   39,   40,  140,  140,   43,
 /*  2870 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  2880 */    54,   55,  140,  140,  140,  140,  140,  140,  140,    8,
 /*  2890 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  2900 */    74,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  2910 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  2920 */    39,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  2930 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  2940 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  2950 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  2960 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  2970 */   140,  140,  140,   37,   38,   39,   40,  140,  140,   43,
 /*  2980 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  2990 */    54,   55,  140,  140,  140,  140,  140,  140,  140,    8,
 /*  3000 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  3010 */    74,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  3020 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  3030 */    39,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  3040 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  3050 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  3060 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  3070 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  3080 */   140,  140,  140,   37,   38,   39,   40,  140,  140,   43,
 /*  3090 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  3100 */    54,   55,  140,  140,  140,  140,  140,  140,  140,    8,
 /*  3110 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  3120 */    74,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  3130 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  3140 */    39,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  3150 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  3160 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  3170 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  3180 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  3190 */   140,  140,  140,   37,   38,   39,   40,  140,  140,   43,
 /*  3200 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  3210 */    54,   55,  140,  140,  140,  140,  140,  140,  140,    8,
 /*  3220 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  3230 */    74,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  3240 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  3250 */   140,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  3260 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  3270 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  3280 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  3290 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  3300 */   140,  140,  140,   37,   38,  140,   40,  140,  140,   43,
 /*  3310 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  3320 */    54,   55,  140,  140,  140,  140,  140,  140,  140,    8,
 /*  3330 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  3340 */    74,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  3350 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  3360 */   140,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  3370 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  3380 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  3390 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  3400 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  3410 */   140,  140,  140,   37,   38,  140,   40,  140,  140,   43,
 /*  3420 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  3430 */    54,   55,  140,  140,  140,  140,  140,  140,  140,    8,
 /*  3440 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  3450 */    74,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  3460 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  3470 */   140,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  3480 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  3490 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  3500 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  3510 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  3520 */   140,  140,  140,   37,   38,  140,   40,  140,  140,   43,
 /*  3530 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  3540 */    54,   55,  140,  140,  140,  140,  140,  140,  140,    8,
 /*  3550 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  3560 */    74,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  3570 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  3580 */   140,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  3590 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  3600 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  3610 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  3620 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  3630 */   140,  140,  140,   37,   38,  140,   40,  140,  140,   43,
 /*  3640 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  3650 */    54,   55,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  3660 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  3670 */    74,    4,    5,    6,    7,    0,    9,   10,   11,   12,
 /*  3680 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  3690 */    23,   24,  140,  140,   27,   28,   29,   30,  140,  140,
 /*  3700 */   140,  140,   35,  140,  140,  140,  140,   32,   41,   34,
 /*  3710 */   140,   36,   37,   38,  140,  140,  140,  140,  140,   52,
 /*  3720 */   140,   54,   55,  140,    4,    5,    6,    7,   53,    9,
 /*  3730 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  3740 */    20,   21,   22,   23,   24,  140,  140,   27,   28,   29,
 /*  3750 */    30,  140,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  3760 */   140,   41,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  3770 */   140,  140,   52,  140,   54,   55,  140,    4,    5,    6,
 /*  3780 */     7,    0,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  3790 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  3800 */    27,   28,   29,   30,  140,  140,  140,  140,   35,  140,
 /*  3810 */   140,  140,  140,   32,   41,   34,  140,   36,   37,   38,
 /*  3820 */   140,  140,  140,  140,  140,   52,  140,   54,   55,  140,
 /*  3830 */     4,    5,    6,    7,   53,    9,   10,   11,   12,   13,
 /*  3840 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  3850 */    24,  140,  140,   27,   28,   29,   30,  140,  140,  140,
 /*  3860 */   140,   35,  140,  140,  140,  140,  140,   41,  140,  140,
 /*  3870 */   140,  140,  140,  140,  140,  140,  140,  140,   52,  140,
 /*  3880 */    54,   55,  140,    4,    5,    6,    7,    0,    9,   10,
 /*  3890 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  3900 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  3910 */   140,  140,  140,  140,   35,  140,  140,  140,  140,   32,
 /*  3920 */    41,   34,  140,   36,   37,   38,  140,  140,  140,  140,
 /*  3930 */   140,   52,  140,   54,   55,  140,    4,    5,    6,    7,
 /*  3940 */    53,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  3950 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  3960 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  3970 */   140,  140,  140,   41,  140,  140,  140,  140,  140,  140,
 /*  3980 */   140,  140,  140,  140,   52,  140,   54,   55,  140,    4,
 /*  3990 */     5,    6,    7,    0,    9,   10,   11,   12,   13,   14,
 /*  4000 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  4010 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  4020 */    35,  140,  140,  140,  140,   32,   41,   34,  140,   36,
 /*  4030 */    37,   38,  140,  140,  140,  140,  140,   52,  140,   54,
 /*  4040 */    55,  140,    4,    5,    6,    7,   53,    9,   10,   11,
 /*  4050 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  4060 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  4070 */   140,  140,  140,   35,  140,  140,  140,  140,  140,   41,
 /*  4080 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  4090 */    52,  140,   54,   55,  140,    4,    5,    6,    7,    0,
 /*  4100 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  4110 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  4120 */    29,   30,  140,  140,  140,  140,   35,  140,  140,  140,
 /*  4130 */   140,   32,   41,   34,  140,   36,   37,   38,  140,  140,
 /*  4140 */   140,  140,  140,   52,  140,   54,   55,  140,    4,    5,
 /*  4150 */     6,    7,   53,    9,   10,   11,   12,   13,   14,   15,
 /*  4160 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  4170 */   140,   27,   28,   29,   30,  140,  140,  140,  140,   35,
 /*  4180 */   140,  140,  140,  140,  140,   41,  140,  140,  140,  140,
 /*  4190 */   140,  140,  140,  140,  140,  140,   52,  140,   54,   55,
 /*  4200 */   140,    4,    5,    6,    7,    0,    9,   10,   11,   12,
 /*  4210 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  4220 */    23,   24,  140,  140,   27,   28,   29,   30,  140,  140,
 /*  4230 */   140,  140,   35,  140,  140,  140,  140,   32,   41,   34,
 /*  4240 */   140,   36,   37,   38,  140,  140,  140,  140,  140,   52,
 /*  4250 */   140,   54,   55,  140,    4,    5,    6,    7,   53,    9,
 /*  4260 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  4270 */    20,   21,   22,   23,   24,  140,  140,   27,   28,   29,
 /*  4280 */    30,  140,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  4290 */   140,   41,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  4300 */   140,  140,   52,  140,   54,   55,  140,    4,    5,    6,
 /*  4310 */     7,    0,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  4320 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  4330 */    27,   28,   29,   30,  140,  140,  140,  140,   35,  140,
 /*  4340 */   140,  140,  140,   32,   41,   34,  140,   36,   37,   38,
 /*  4350 */   140,  140,  140,  140,  140,   52,  140,   54,   55,  140,
 /*  4360 */     4,    5,    6,    7,   53,    9,   10,   11,   12,   13,
 /*  4370 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  4380 */    24,  140,  140,   27,   28,   29,   30,  140,  140,  140,
 /*  4390 */   140,   35,  140,  140,  140,  140,  140,   41,  140,  140,
 /*  4400 */   140,  140,  140,  140,  140,  140,  140,  140,   52,  140,
 /*  4410 */    54,   55,  140,    4,    5,    6,    7,    0,    9,   10,
 /*  4420 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  4430 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  4440 */   140,  140,  140,  140,   35,  140,  140,  140,  140,   32,
 /*  4450 */    41,   34,  140,   36,   37,   38,  140,  140,  140,  140,
 /*  4460 */   140,   52,  140,   54,   55,  140,    4,    5,    6,    7,
 /*  4470 */    53,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  4480 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  4490 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  4500 */   140,  140,  140,   41,  140,  140,  140,  140,  140,  140,
 /*  4510 */   140,  140,  140,  140,   52,  140,   54,   55,  140,    4,
 /*  4520 */     5,    6,    7,    0,    9,   10,   11,   12,   13,   14,
 /*  4530 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  4540 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  4550 */    35,  140,  140,  140,  140,   32,   41,   34,  140,   36,
 /*  4560 */    37,   38,  140,  140,  140,  140,  140,   52,  140,   54,
 /*  4570 */    55,  140,    4,    5,    6,    7,   53,    9,   10,   11,
 /*  4580 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  4590 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  4600 */   140,  140,  140,   35,  140,  140,  140,  140,  140,   41,
 /*  4610 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  4620 */    52,  140,   54,   55,  140,    4,    5,    6,    7,    0,
 /*  4630 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  4640 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  4650 */    29,   30,  140,  140,  140,  140,   35,  140,  140,  140,
 /*  4660 */   140,   32,   41,   34,  140,   36,   37,   38,  140,  140,
 /*  4670 */   140,  140,  140,   52,  140,   54,   55,  140,    4,    5,
 /*  4680 */     6,    7,   53,    9,   10,   11,   12,   13,   14,   15,
 /*  4690 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  4700 */   140,   27,   28,   29,   30,  140,  140,  140,  140,   35,
 /*  4710 */   140,  140,  140,  140,  140,   41,  140,  140,  140,  140,
 /*  4720 */   140,  140,  140,  140,  140,  140,   52,  140,   54,   55,
 /*  4730 */   140,    4,    5,    6,    7,    0,    9,   10,   11,   12,
 /*  4740 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  4750 */    23,   24,  140,  140,   27,   28,   29,   30,  140,  140,
 /*  4760 */   140,  140,   35,  140,  140,  140,  140,   32,   41,   34,
 /*  4770 */   140,   36,   37,   38,  140,  140,  140,  140,  140,   52,
 /*  4780 */   140,   54,   55,  140,    4,    5,    6,    7,   53,    9,
 /*  4790 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  4800 */    20,   21,   22,   23,   24,  140,  140,   27,   28,   29,
 /*  4810 */    30,  140,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  4820 */   140,   41,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  4830 */   140,  140,   52,  140,   54,   55,  140,    4,    5,    6,
 /*  4840 */     7,  140,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  4850 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  4860 */    27,   28,   29,   30,  140,  140,  140,  140,   35,  140,
 /*  4870 */   140,  140,  140,  140,   41,  140,  140,  140,  140,  140,
 /*  4880 */   140,  140,  140,  140,  140,   52,  140,   54,   55,  140,
 /*  4890 */     4,    5,    6,    7,  140,    9,   10,   11,   12,   13,
 /*  4900 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  4910 */    24,  140,  140,   27,   28,   29,   30,  140,  140,  140,
 /*  4920 */   140,   35,  140,  140,  140,  140,  140,   41,  140,  140,
 /*  4930 */   140,  140,  140,  140,  140,  140,  140,  140,   52,  140,
 /*  4940 */    54,   55,  140,    4,    5,    6,    7,  140,    9,   10,
 /*  4950 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  4960 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  4970 */   140,  140,  140,  140,   35,  140,  140,  140,  140,  140,
 /*  4980 */    41,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  4990 */   140,   52,  140,   54,   55,  140,    4,    5,    6,    7,
 /*  5000 */   140,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  5010 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  5020 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  5030 */   140,  140,  140,   41,  140,  140,  140,  140,  140,  140,
 /*  5040 */   140,  140,  140,  140,   52,  140,   54,   55,  140,    4,
 /*  5050 */     5,    6,    7,  140,    9,   10,   11,   12,   13,   14,
 /*  5060 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  5070 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  5080 */    35,  140,  140,  140,  140,  140,   41,  140,  140,  140,
 /*  5090 */   140,  140,  140,  140,  140,  140,  140,   52,  140,   54,
 /*  5100 */    55,  140,    4,    5,    6,    7,  140,    9,   10,   11,
 /*  5110 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  5120 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  5130 */   140,  140,  140,   35,  140,  140,  140,  140,  140,   41,
 /*  5140 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  5150 */    52,  140,   54,   55,  140,    4,    5,    6,    7,  140,
 /*  5160 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  5170 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  5180 */    29,   30,  140,  140,  140,  140,   35,  140,  140,  140,
 /*  5190 */   140,  140,   41,  140,  140,  140,  140,  140,  140,  140,
 /*  5200 */   140,  140,  140,   52,  140,   54,   55,  140,    4,    5,
 /*  5210 */     6,    7,  140,    9,   10,   11,   12,   13,   14,   15,
 /*  5220 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  5230 */   140,   27,   28,   29,   30,  140,  140,  140,  140,   35,
 /*  5240 */   140,  140,  140,  140,  140,   41,  140,  140,  140,  140,
 /*  5250 */   140,  140,  140,  140,  140,  140,   52,  140,   54,   55,
 /*  5260 */   140,    4,    5,    6,    7,  140,    9,   10,   11,   12,
 /*  5270 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  5280 */    23,   24,  140,  140,   27,   28,   29,   30,  140,  140,
 /*  5290 */   140,  140,   35,  140,  140,  140,  140,  140,   41,  140,
 /*  5300 */   140,  140,  140,  140,  140,  140,  140,  140,  140,   52,
 /*  5310 */   140,   54,   55,  140,    4,    5,    6,    7,  140,    9,
 /*  5320 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  5330 */    20,   21,   22,   23,   24,  140,  140,   27,   28,   29,
 /*  5340 */    30,  140,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  5350 */   140,   41,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  5360 */   140,  140,   52,  140,   54,   55,  140,    4,    5,    6,
 /*  5370 */     7,  140,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  5380 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  5390 */    27,   28,   29,   30,  140,  140,  140,  140,   35,  140,
 /*  5400 */   140,  140,  140,  140,   41,  140,  140,  140,  140,  140,
 /*  5410 */   140,  140,  140,  140,  140,   52,  140,   54,   55,  140,
 /*  5420 */     4,    5,    6,    7,  140,    9,   10,   11,   12,   13,
 /*  5430 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  5440 */    24,  140,  140,   27,   28,   29,   30,  140,  140,  140,
 /*  5450 */   140,   35,  140,  140,  140,  140,  140,   41,  140,  140,
 /*  5460 */   140,  140,  140,  140,  140,  140,  140,  140,   52,  140,
 /*  5470 */    54,   55,  140,    4,    5,    6,    7,  140,    9,   10,
 /*  5480 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  5490 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  5500 */   140,  140,  140,  140,   35,  140,  140,    8,  140,  140,
 /*  5510 */    41,  140,  140,  140,  140,  140,  140,  140,  140,   20,
 /*  5520 */    21,   52,  140,   54,   55,   26,   27,   28,  140,   30,
 /*  5530 */    31,  140,  140,  140,  140,  140,   37,   38,  140,   40,
 /*  5540 */   140,  140,   43,  140,  140,  140,   47,   48,   49,   50,
 /*  5550 */    51,  140,   53,   54,   55,  140,  140,  140,  140,  140,
 /*  5560 */   140,  140,  140,  140,  140,   66,   67,   68,   69,   70,
 /*  5570 */    71,   72,   73,   74,    4,    5,    6,    7,  140,    9,
 /*  5580 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  5590 */    20,   21,   22,   23,   24,  140,  140,   27,   28,   29,
 /*  5600 */    30,  140,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  5610 */   140,   41,  140,  140,  140,  140,    4,    5,    6,    7,
 /*  5620 */   140,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  5630 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  5640 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  5650 */   140,  140,  140,   41,  140,  140,  140,  140,    4,    5,
 /*  5660 */     6,    7,  140,    9,   10,   11,   12,   13,   14,   15,
 /*  5670 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  5680 */   140,   27,   28,   29,   30,  140,  140,  140,  140,   35,
 /*  5690 */   140,  140,  140,  140,  140,   41,  140,  140,  140,  140,
 /*  5700 */     4,    5,    6,    7,  140,    9,   10,   11,   12,   13,
 /*  5710 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  5720 */    24,  140,  140,   27,   28,   29,   30,  140,  140,  140,
 /*  5730 */   140,   35,  140,  140,  140,  140,    4,    5,    6,    7,
 /*  5740 */   140,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  5750 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  5760 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  5770 */   140,  140,    4,    5,    6,    7,  140,    9,   10,   11,
 /*  5780 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  5790 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  5800 */   140,  140,  140,   35,  140,  140,  140,  140,    4,    5,
 /*  5810 */     6,    7,  140,    9,   10,   11,   12,   13,   14,   15,
 /*  5820 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  5830 */   140,   27,   28,   29,   30,  140,  140,  140,  140,   35,
 /*  5840 */   140,  140,  140,  140,    4,    5,    6,    7,  140,    9,
 /*  5850 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  5860 */    20,   21,   22,   23,   24,  140,  140,   27,   28,   29,
 /*  5870 */    30,  140,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  5880 */     4,    5,    6,    7,  140,    9,   10,   11,   12,   13,
 /*  5890 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  5900 */    24,  140,  140,   27,   28,   29,   30,  140,  140,  140,
 /*  5910 */   140,   35,  140,  140,  140,  140,    4,    5,    6,    7,
 /*  5920 */   140,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  5930 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  5940 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  5950 */   140,  140,    4,    5,    6,    7,  140,    9,   10,   11,
 /*  5960 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  5970 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  5980 */   140,  140,  140,   35,  140,  140,  140,  140,    4,    5,
 /*  5990 */     6,    7,  140,    9,   10,   11,   12,   13,   14,   15,
 /*  6000 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  6010 */   140,   27,   28,   29,   30,  140,  140,  140,  140,   35,
 /*  6020 */   140,  140,  140,  140,    4,    5,    6,    7,  140,    9,
 /*  6030 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  6040 */    20,   21,   22,   23,   24,  140,  140,   27,   28,   29,
 /*  6050 */    30,  140,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  6060 */     4,    5,    6,    7,  140,    9,   10,   11,   12,   13,
 /*  6070 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  6080 */    24,  140,  140,   27,   28,   29,   30,  140,  140,  140,
 /*  6090 */   140,   35,  140,  140,  140,  140,    4,    5,    6,    7,
 /*  6100 */   140,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  6110 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  6120 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  6130 */   140,  140,    4,    5,    6,    7,  140,    9,   10,   11,
 /*  6140 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  6150 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  6160 */   140,  140,  140,   35,  140,  140,  140,    3,    4,    5,
 /*  6170 */     6,    7,  140,    9,   10,   11,   12,   13,   14,   15,
 /*  6180 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  6190 */   140,   27,   28,   29,  140,  140,  140,  140,    4,   35,
 /*  6200 */     6,    7,  140,    9,   10,   11,   12,   13,   14,   15,
 /*  6210 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  6220 */   140,   27,   28,   29,   30,  140,  140,    4,  140,    6,
 /*  6230 */     7,  140,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  6240 */    17,   18,   19,   20,   21,   22,   23,   24,   54,   55,
 /*  6250 */    27,   28,   29,  140,  140,  140,    4,    5,    6,    7,
 /*  6260 */   140,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  6270 */    18,   19,   20,   21,   22,   23,   24,   54,   55,   27,
 /*  6280 */    28,   29,  140,    4,    5,    6,    7,   35,    9,   10,
 /*  6290 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  6300 */    21,   22,   23,   24,  140,  140,   27,   28,   29,  140,
 /*  6310 */   140,  140,  140,    4,   35,    6,    7,  140,    9,   10,
 /*  6320 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  6330 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  6340 */   140,    4,  140,    6,    7,  140,    9,   10,   11,   12,
 /*  6350 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  6360 */    23,   24,  140,  140,   27,   28,   29,  140,  140,  140,
 /*  6370 */   140,    4,   35,    6,    7,  140,    9,   10,   11,   12,
 /*  6380 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  6390 */    23,   24,  140,  140,   27,   28,   29,  140,  140,  140,
 /*  6400 */   140,    4,   35,    6,    7,  140,    9,   10,   11,   12,
 /*  6410 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  6420 */    23,   24,  140,  140,   27,   28,   29,  140,  140,  140,
 /*  6430 */   140,    4,   35,    6,    7,  140,    9,   10,   11,   12,
 /*  6440 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  6450 */    23,   24,  140,  140,   27,   28,   29,  140,  140,  140,
 /*  6460 */   140,  140,  140,  140,  140,  140,  140,  140,   41,  140,
 /*  6470 */   140,  140,  140,    4,  140,    6,    7,  140,    9,   10,
 /*  6480 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  6490 */    21,   22,   23,   24,  140,  140,   27,   28,   29,  140,
 /*  6500 */   140,  140,  140,    4,   35,    6,    7,  140,    9,   10,
 /*  6510 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  6520 */    21,   22,   23,   24,  140,  140,   27,   28,   29,  140,
 /*  6530 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  6540 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  6550 */   140,   52,  140,  140,  140,  140,    4,  140,    6,    7,
 /*  6560 */   140,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  6570 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  6580 */    28,   29,  140,  140,  140,  140,    4,   35,    6,    7,
 /*  6590 */   140,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  6600 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  6610 */    28,   29,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  6620 */   140,  140,  140,   41,  140,  140,  140,  140,    4,  140,
 /*  6630 */     6,    7,  140,    9,   10,   11,   12,   13,   14,   15,
 /*  6640 */    16,   17,   18,   19,   20,   21,   22,   23,   24,    8,
 /*  6650 */   140,   27,   28,   29,  140,  140,  140,  140,  140,  140,
 /*  6660 */   140,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  6670 */   140,   30,   31,  140,  140,  140,  140,  140,  140,   38,
 /*  6680 */   140,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  6690 */    49,   50,   51,    8,   53,   54,   55,  140,  140,  140,
 /*  6700 */   140,  140,  140,  140,  140,   20,   21,  140,  140,  140,
 /*  6710 */   140,   26,   27,   28,   73,   30,   31,  140,  140,  140,
 /*  6720 */   140,  140,  140,   38,  140,   40,  140,  140,   43,  140,
 /*  6730 */   140,  140,   47,   48,   49,   50,   51,    8,   53,   54,
 /*  6740 */    55,  140,  140,  140,  140,  140,  140,  140,  140,   20,
 /*  6750 */    21,  140,  140,  140,  140,   26,   27,   28,   73,  140,
 /*  6760 */    31,  140,  140,  140,  140,  140,  140,   38,  140,   40,
 /*  6770 */   140,  140,   43,  140,  140,  140,   47,   48,   49,   50,
 /*  6780 */    51,    8,   53,   54,   55,  140,  140,  140,  140,  140,
 /*  6790 */   140,  140,  140,   20,   21,  140,  140,  140,  140,   26,
 /*  6800 */    27,   28,   73,  140,   31,  140,  140,  140,   35,  140,
 /*  6810 */   140,  140,  140,   40,  140,  140,   43,    8,  140,  140,
 /*  6820 */    47,   48,   49,   50,   51,  140,  140,   54,   55,   20,
 /*  6830 */    21,  140,  140,  140,  140,   26,   27,   28,  140,  140,
 /*  6840 */    31,  140,  140,  140,   35,  140,   73,  140,  140,   40,
 /*  6850 */   140,  140,   43,    8,  140,  140,   47,   48,   49,   50,
 /*  6860 */    51,  140,  140,   54,   55,   20,   21,  140,  140,  140,
 /*  6870 */   140,   26,   27,   28,  140,  140,   31,  140,  140,  140,
 /*  6880 */   140,  140,   73,  140,  140,   40,  140,  140,   43,  140,
 /*  6890 */   140,  140,   47,   48,   49,   50,   51,    8,  140,   54,
 /*  6900 */    55,  140,  140,  140,  140,  140,  140,  140,  140,   20,
 /*  6910 */    21,  140,  140,  140,  140,   26,   27,   28,   73,  140,
 /*  6920 */    31,  140,  140,  140,   35,  140,  140,  140,  140,   40,
 /*  6930 */   140,  140,   43,    8,   45,  140,   47,   48,   49,   50,
 /*  6940 */    51,  140,  140,  140,  140,   20,   21,  140,  140,  140,
 /*  6950 */   140,   26,   27,   28,  140,   30,   31,  140,  140,  140,
 /*  6960 */   140,  140,   73,  140,  140,   40,  140,  140,   43,  140,
 /*  6970 */   140,    8,   47,   48,   49,   50,   51,  140,  140,  140,
 /*  6980 */   140,  140,  140,   20,   21,  140,  140,  140,  140,   26,
 /*  6990 */    27,   28,  140,  140,   31,  140,  140,  140,   73,  140,
 /*  7000 */   140,  140,  140,   40,  140,  140,   43,    8,   45,  140,
 /*  7010 */    47,   48,   49,   50,   51,  140,  140,  140,  140,   20,
 /*  7020 */    21,  140,  140,  140,  140,   26,   27,   28,  140,  140,
 /*  7030 */    31,  140,  140,  140,  140,  140,   73,  140,  140,   40,
 /*  7040 */    41,  140,   43,  140,  140,    8,   47,   48,   49,   50,
 /*  7050 */    51,  140,  140,  140,  140,  140,  140,   20,   21,  140,
 /*  7060 */   140,  140,  140,   26,   27,   28,  140,  140,   31,  140,
 /*  7070 */   140,  140,   73,  140,  140,  140,  140,   40,  140,  140,
 /*  7080 */    43,    8,  140,  140,   47,   48,   49,   50,   51,  140,
 /*  7090 */   140,  140,  140,   20,   21,  140,  140,  140,  140,   26,
 /*  7100 */    27,   28,  140,  140,   31,  140,  140,  140,  140,  140,
 /*  7110 */    73,  140,  140,   40,  140,  140,   43,  140,  140,    8,
 /*  7120 */    47,   48,   49,   50,   51,  140,  140,  140,  140,  140,
 /*  7130 */   140,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  7140 */   140,  140,   31,  140,  140,  140,   73,  140,  140,   84,
 /*  7150 */   140,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  7160 */    49,   50,   51,  140,  140,  140,  140,  102,  103,  104,
 /*  7170 */   105,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  7180 */   115,  140,  140,  140,   73,  120,  121,  140,  140,  140,
 /*  7190 */   140,  140,  140,  140,  140,  140,  131,
};
#define YY_SHIFT_COUNT    (343)
#define YY_SHIFT_MIN      (0)
#define YY_SHIFT_MAX      (7111)
static const unsigned short int yy_shift_ofst[] = {
 /*     0 */   719, 2826, 2881, 3211, 3211, 3211, 3211, 3211, 3211, 3211,
 /*    10 */  3211,  825, 6641, 6729, 6773, 6845, 6889, 6889, 6889, 6889,
 /*    20 */  6889, 6925,  192, 6963, 7037, 7037, 7037, 7037, 7073, 7037,
 /*    30 */  7037, 7037, 6999, 7037, 7037, 7037, 7037, 7037, 7037, 7037,
 /*    40 */  7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037,
 /*    50 */  7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037,
 /*    60 */  7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037,
 /*    70 */  7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037, 7037,
 /*    80 */     7,  128,  128,  211,    8,    8,    8,    8,    8,    8,
 /*    90 */   138,  140,  140,  165,    0,   63,  126,  248,  304,  360,
 /*   100 */   416,  472,  528,  584,  640,  711,  764,  817,  870,  923,
 /*   110 */   976, 1012, 1068, 1124, 1180, 1236, 1292, 1348, 1404, 1460,
 /*   120 */  1516, 1572, 1628, 1684, 1740, 1796, 1852, 1908, 1964, 2020,
 /*   130 */  2076, 2132, 2188, 2936, 2991, 3046, 3101, 3156, 3266, 3321,
 /*   140 */  3376, 3431, 3486, 3541, 3596, 3667, 3720, 3773, 3826, 3879,
 /*   150 */  3932, 3985, 4038, 4091, 4144, 4197, 4250, 4303, 4356, 4409,
 /*   160 */  4462, 4515, 4568, 4621, 4674, 4727, 4780, 4833, 4886, 4939,
 /*   170 */  4992, 5045, 5098, 5151, 5204, 5257, 5310, 5363, 5416, 5469,
 /*   180 */  5499, 5570, 5612, 5654, 5696, 5732, 5768, 5804, 5840, 5876,
 /*   190 */  5912, 5948, 5984, 6020, 6056, 6092, 6128, 6164, 6194, 6223,
 /*   200 */  6252, 6279, 6309, 6337, 6367, 6397, 6427, 6469, 6499, 6552,
 /*   210 */  6582, 6624, 6685, 6809, 7111,   44,  931, 3675, 3781, 3887,
 /*   220 */  3993, 4099, 4205, 4311, 4417, 4523, 4629, 4735, 2377, 2489,
 /*   230 */  2240, 1004,   76,  123,  233,  311,  345,  668, 1005,  732,
 /*   240 */   785,   66,   83,  169,  203,  231,  303,  359,  415,  246,
 /*   250 */   106,  272,  332,  358,  471,  527,  583,  731,  759,  812,
 /*   260 */   252,  343,  843,  399,  865,  232,  285,  364,  414,  470,
 /*   270 */   526,  582,  259,  270,  267,  296,  274,  330,  352,  366,
 /*   280 */   379,  387,  393,  408,  426,  412,  405,  428,  433,  434,
 /*   290 */   435,  446,  452,  467,  468,  482,  461,  481,  483,  476,
 /*   300 */   494,  506,  499,  490,  523,  516,  507,  542,  537,  529,
 /*   310 */   546,  550,  545,  562,  564,  565,  567,  580,  594,  598,
 /*   320 */   599,  589,  600,  603,  616,  615,  617,  632,  633,  634,
 /*   330 */   651,  654,  655,  638,  611,  670,  669,  671,  673,  674,
 /*   340 */   672,  712,  713,  715,
};
#define YY_REDUCE_COUNT (93)
#define YY_REDUCE_MIN   (-125)
#define YY_REDUCE_MAX   (7065)
static const short yy_reduce_ofst[] = {
 /*     0 */   -52, 2189, 2255, 2311, 2367, 2423, 2479, 2535, 2591, 2647,
 /*    10 */  2703,  -49, 2148, 7065, 2201, 2323,   51,   55,   59,   88,
 /*    20 */    92,  -63, -125,  110,  -17,  139,  178,  195,  208,  251,
 /*    30 */   307,  363,   60,   96,   99,  224,  280,  320,  336,  376,
 /*    40 */   392,  409,  432,  448,  465,  488,  504,  521,  544,  560,
 /*    50 */    60,  577,  581,  639,  643,  691,  692,  693,  695,  696,
 /*    60 */   697,  699,  738,  745,  749,  791,  797,  798,  799,  802,
 /*    70 */   803,  805,  811,  844,  851,  855,  908,  911,  914,  932,
 /*    80 */    -2,   77,  127, -111,  -46,  -23,   -5,   40,   57,   58,
 /*    90 */    82,  149,  170,  150,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    10 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    20 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    30 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    40 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    50 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    60 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    70 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    80 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    90 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   100 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   110 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   120 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   130 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   140 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   150 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   160 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   170 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   180 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   190 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   200 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   210 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   220 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   230 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   240 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   250 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   260 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   270 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   280 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   290 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   300 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   310 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   320 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   330 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   340 */   518,  518,  518,  518,
};
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.  
** If a construct like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  yyStackEntry *yytos;          /* Pointer to top element of the stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyhwm;                    /* High-water mark of the stack */
#endif
#ifndef YYNOERRORRECOVERY
  int yyerrcnt;                 /* Shifts left before out of the error */
#endif
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
  yyStackEntry yystk0;          /* First stack entry */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
  yyStackEntry *yystackEnd;            /* Last entry in the stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#if defined(YYCOVERAGE) || !defined(NDEBUG)
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  /*    0 */ "$",
  /*    1 */ "IFX",
  /*    2 */ "ELSE",
  /*    3 */ "ASSIGN",
  /*    4 */ "QMARK",
  /*    5 */ "COMMA",
  /*    6 */ "LOR",
  /*    7 */ "LAND",
  /*    8 */ "LNOT",
  /*    9 */ "EQ",
  /*   10 */ "LE",
  /*   11 */ "LT",
  /*   12 */ "GE",
  /*   13 */ "GT",
  /*   14 */ "NE",
  /*   15 */ "BITOR",
  /*   16 */ "BITXOR",
  /*   17 */ "BITAND",
  /*   18 */ "LSHIFT",
  /*   19 */ "RSHIFT",
  /*   20 */ "PLUS",
  /*   21 */ "MINUS",
  /*   22 */ "DIVIDE",
  /*   23 */ "MULTIPLY",
  /*   24 */ "MOD",
  /*   25 */ "UNARY",
  /*   26 */ "BITNOT",
  /*   27 */ "LPAREN",
  /*   28 */ "LSQBRACKET",
  /*   29 */ "PERIOD",
  /*   30 */ "SEMICOLON",
  /*   31 */ "NAME",
  /*   32 */ "IMPORT",
  /*   33 */ "AS",
  /*   34 */ "FUNCTION",
  /*   35 */ "RPAREN",
  /*   36 */ "OBJECT",
  /*   37 */ "LBRACKET",
  /*   38 */ "VAR",
  /*   39 */ "RBRACKET",
  /*   40 */ "NUMBER",
  /*   41 */ "RSQBRACKET",
  /*   42 */ "SUBSCRIPT",
  /*   43 */ "KILLS",
  /*   44 */ "MEMBER",
  /*   45 */ "STRING",
  /*   46 */ "FUNCCALL",
  /*   47 */ "L2V",
  /*   48 */ "MAPSTRING",
  /*   49 */ "UNIT",
  /*   50 */ "SWITCH",
  /*   51 */ "LOCATION",
  /*   52 */ "COLON",
  /*   53 */ "CONST",
  /*   54 */ "INC",
  /*   55 */ "DEC",
  /*   56 */ "IADD",
  /*   57 */ "ISUB",
  /*   58 */ "IMUL",
  /*   59 */ "IDIV",
  /*   60 */ "IMOD",
  /*   61 */ "ILSH",
  /*   62 */ "IRSH",
  /*   63 */ "IBND",
  /*   64 */ "IBOR",
  /*   65 */ "IBXR",
  /*   66 */ "IF",
  /*   67 */ "WHILE",
  /*   68 */ "FOR",
  /*   69 */ "FOREACH",
  /*   70 */ "CONTINUE",
  /*   71 */ "BREAK",
  /*   72 */ "RETURN",
  /*   73 */ "CONDITIONNAME",
  /*   74 */ "ACTIONNAME",
  /*   75 */ "error",
  /*   76 */ "nt",
  /*   77 */ "program",
  /*   78 */ "chunks",
  /*   79 */ "chunk",
  /*   80 */ "import_chunk",
  /*   81 */ "fdef_chunk",
  /*   82 */ "fdecl_chunk",
  /*   83 */ "object_chunk",
  /*   84 */ "vdef_stmt",
  /*   85 */ "vdefAssign_global_stmt",
  /*   86 */ "cdef_global_stmt",
  /*   87 */ "blockStmt",
  /*   88 */ "dottedName",
  /*   89 */ "fdef_header",
  /*   90 */ "nameList",
  /*   91 */ "stmt",
  /*   92 */ "object_header",
  /*   93 */ "object_body",
  /*   94 */ "nameList_nonEmpty",
  /*   95 */ "method_header",
  /*   96 */ "method_chunk",
  /*   97 */ "bodyStmt",
  /*   98 */ "return_stmt",
  /*   99 */ "lbracket",
  /*  100 */ "rbracket",
  /*  101 */ "bodyStmtList",
  /*  102 */ "vdefAssign_stmt",
  /*  103 */ "cdef_stmt",
  /*  104 */ "assign_stmt",
  /*  105 */ "funcexpr",
  /*  106 */ "actionStmt",
  /*  107 */ "if_stmt",
  /*  108 */ "while_stmt",
  /*  109 */ "for_stmt",
  /*  110 */ "foreach_stmt",
  /*  111 */ "continue_stmt",
  /*  112 */ "break_stmt",
  /*  113 */ "numList_nonEmpty",
  /*  114 */ "exprList_nonEmpty",
  /*  115 */ "expr",
  /*  116 */ "exprList",
  /*  117 */ "fArgs_nonEmpty",
  /*  118 */ "fArgs",
  /*  119 */ "commaSkippable",
  /*  120 */ "lvalue",
  /*  121 */ "lvalueList_nonEmpty",
  /*  122 */ "if_start",
  /*  123 */ "if_header",
  /*  124 */ "if_block",
  /*  125 */ "elif_start",
  /*  126 */ "elif_header",
  /*  127 */ "else_header",
  /*  128 */ "while_start",
  /*  129 */ "while_header",
  /*  130 */ "for_opener",
  /*  131 */ "for_init_stmt_nonEmpty",
  /*  132 */ "for_init_stmt",
  /*  133 */ "for_action_stmt_nonEmpty",
  /*  134 */ "for_action_stmt",
  /*  135 */ "for_header1",
  /*  136 */ "for_header2",
  /*  137 */ "for_header",
  /*  138 */ "foreach_opener",
  /*  139 */ "foreach_header",
};
#endif /* defined(YYCOVERAGE) || !defined(NDEBUG) */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "chunk ::= blockStmt",
 /*   1 */ "dottedName ::= NAME",
 /*   2 */ "dottedName ::= dottedName PERIOD NAME",
 /*   3 */ "import_chunk ::= IMPORT dottedName AS NAME",
 /*   4 */ "import_chunk ::= IMPORT dottedName",
 /*   5 */ "fdef_header ::= FUNCTION NAME LPAREN nameList RPAREN",
 /*   6 */ "fdef_chunk ::= fdef_header stmt",
 /*   7 */ "fdecl_chunk ::= FUNCTION NAME LPAREN nameList RPAREN SEMICOLON",
 /*   8 */ "object_header ::= OBJECT NAME LBRACKET",
 /*   9 */ "object_body ::= object_header",
 /*  10 */ "object_body ::= object_body VAR nameList_nonEmpty SEMICOLON",
 /*  11 */ "method_header ::= FUNCTION NAME LPAREN nameList RPAREN",
 /*  12 */ "method_chunk ::= method_header stmt",
 /*  13 */ "object_body ::= object_body method_chunk",
 /*  14 */ "object_chunk ::= object_body RBRACKET SEMICOLON",
 /*  15 */ "stmt ::= error SEMICOLON",
 /*  16 */ "lbracket ::= LBRACKET",
 /*  17 */ "rbracket ::= RBRACKET",
 /*  18 */ "blockStmt ::= lbracket RBRACKET",
 /*  19 */ "blockStmt ::= lbracket error RBRACKET",
 /*  20 */ "bodyStmt ::= funcexpr SEMICOLON",
 /*  21 */ "bodyStmtList ::= error",
 /*  22 */ "bodyStmtList ::= bodyStmtList error",
 /*  23 */ "numList_nonEmpty ::= NUMBER",
 /*  24 */ "numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER",
 /*  25 */ "nameList_nonEmpty ::= NAME",
 /*  26 */ "nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME",
 /*  27 */ "nameList ::=",
 /*  28 */ "nameList ::= nameList_nonEmpty",
 /*  29 */ "exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET",
 /*  30 */ "expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET",
 /*  31 */ "exprList_nonEmpty ::= expr",
 /*  32 */ "exprList_nonEmpty ::= exprList_nonEmpty COMMA expr",
 /*  33 */ "exprList ::=",
 /*  34 */ "exprList ::= exprList_nonEmpty",
 /*  35 */ "expr ::= NUMBER",
 /*  36 */ "expr ::= KILLS",
 /*  37 */ "expr ::= NAME",
 /*  38 */ "expr ::= expr PERIOD NAME",
 /*  39 */ "expr ::= expr LSQBRACKET expr RSQBRACKET",
 /*  40 */ "fArgs_nonEmpty ::= expr",
 /*  41 */ "fArgs_nonEmpty ::= STRING",
 /*  42 */ "fArgs_nonEmpty ::= NAME ASSIGN expr",
 /*  43 */ "fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArgs_nonEmpty",
 /*  44 */ "fArgs ::=",
 /*  45 */ "fArgs ::= fArgs_nonEmpty",
 /*  46 */ "funcexpr ::= NAME LPAREN fArgs RPAREN",
 /*  47 */ "funcexpr ::= expr LPAREN fArgs RPAREN",
 /*  48 */ "expr ::= funcexpr",
 /*  49 */ "expr ::= LPAREN expr RPAREN",
 /*  50 */ "expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET",
 /*  51 */ "expr ::= L2V LPAREN expr RPAREN",
 /*  52 */ "expr ::= MAPSTRING LPAREN STRING RPAREN",
 /*  53 */ "expr ::= UNIT LPAREN STRING RPAREN",
 /*  54 */ "expr ::= SWITCH LPAREN STRING RPAREN",
 /*  55 */ "expr ::= LOCATION LPAREN STRING RPAREN",
 /*  56 */ "expr ::= expr QMARK expr COLON expr",
 /*  57 */ "expr ::= expr PLUS expr",
 /*  58 */ "expr ::= expr MINUS expr",
 /*  59 */ "expr ::= expr MULTIPLY expr",
 /*  60 */ "expr ::= expr DIVIDE expr",
 /*  61 */ "expr ::= expr MOD expr",
 /*  62 */ "expr ::= expr LSHIFT expr",
 /*  63 */ "expr ::= expr RSHIFT expr",
 /*  64 */ "expr ::= expr BITAND expr",
 /*  65 */ "expr ::= expr BITOR expr",
 /*  66 */ "expr ::= expr BITXOR expr",
 /*  67 */ "expr ::= PLUS expr",
 /*  68 */ "expr ::= MINUS expr",
 /*  69 */ "expr ::= BITNOT expr",
 /*  70 */ "expr ::= expr EQ expr",
 /*  71 */ "expr ::= expr NE expr",
 /*  72 */ "expr ::= expr LE expr",
 /*  73 */ "expr ::= expr LT expr",
 /*  74 */ "expr ::= expr GE expr",
 /*  75 */ "expr ::= expr GT expr",
 /*  76 */ "expr ::= expr LAND expr",
 /*  77 */ "expr ::= expr LOR expr",
 /*  78 */ "expr ::= LNOT expr",
 /*  79 */ "vdef_stmt ::= VAR nameList_nonEmpty",
 /*  80 */ "vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /*  81 */ "vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /*  82 */ "cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /*  83 */ "cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /*  84 */ "lvalue ::= NAME",
 /*  85 */ "lvalue ::= expr LSQBRACKET expr RSQBRACKET",
 /*  86 */ "lvalue ::= expr PERIOD NAME",
 /*  87 */ "lvalueList_nonEmpty ::= lvalue",
 /*  88 */ "lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue",
 /*  89 */ "assign_stmt ::= lvalue ASSIGN expr",
 /*  90 */ "assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty",
 /*  91 */ "assign_stmt ::= INC expr",
 /*  92 */ "assign_stmt ::= expr INC",
 /*  93 */ "assign_stmt ::= DEC expr",
 /*  94 */ "assign_stmt ::= expr DEC",
 /*  95 */ "assign_stmt ::= lvalue IADD expr",
 /*  96 */ "assign_stmt ::= lvalue ISUB expr",
 /*  97 */ "assign_stmt ::= lvalue IMUL expr",
 /*  98 */ "assign_stmt ::= lvalue IDIV expr",
 /*  99 */ "assign_stmt ::= lvalue IMOD expr",
 /* 100 */ "assign_stmt ::= lvalue ILSH expr",
 /* 101 */ "assign_stmt ::= lvalue IRSH expr",
 /* 102 */ "assign_stmt ::= lvalue IBND expr",
 /* 103 */ "assign_stmt ::= lvalue IBOR expr",
 /* 104 */ "assign_stmt ::= lvalue IBXR expr",
 /* 105 */ "if_start ::= IF",
 /* 106 */ "if_header ::= if_start LPAREN expr RPAREN",
 /* 107 */ "elif_start ::= ELSE IF",
 /* 108 */ "elif_header ::= elif_start LPAREN expr RPAREN",
 /* 109 */ "else_header ::= ELSE",
 /* 110 */ "if_stmt ::= if_block",
 /* 111 */ "if_stmt ::= if_block else_header stmt",
 /* 112 */ "while_start ::= WHILE",
 /* 113 */ "while_header ::= while_start LPAREN expr RPAREN",
 /* 114 */ "while_stmt ::= while_header stmt",
 /* 115 */ "for_opener ::= FOR LPAREN",
 /* 116 */ "for_header1 ::= for_opener for_init_stmt SEMICOLON",
 /* 117 */ "for_header2 ::= for_header1 expr SEMICOLON",
 /* 118 */ "for_header ::= for_header2 for_action_stmt RPAREN",
 /* 119 */ "for_stmt ::= for_header stmt",
 /* 120 */ "foreach_opener ::= FOREACH LPAREN",
 /* 121 */ "foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty RPAREN",
 /* 122 */ "foreach_stmt ::= foreach_header stmt",
 /* 123 */ "continue_stmt ::= CONTINUE",
 /* 124 */ "break_stmt ::= BREAK",
 /* 125 */ "return_stmt ::= RETURN exprList",
 /* 126 */ "expr ::= CONDITIONNAME LPAREN fArgs RPAREN",
 /* 127 */ "expr ::= KILLS LPAREN fArgs RPAREN",
 /* 128 */ "actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN SEMICOLON",
 /* 129 */ "program ::= chunks",
 /* 130 */ "chunks ::=",
 /* 131 */ "chunks ::= chunks chunk",
 /* 132 */ "chunk ::= import_chunk SEMICOLON",
 /* 133 */ "chunk ::= fdef_chunk",
 /* 134 */ "chunk ::= fdecl_chunk",
 /* 135 */ "chunk ::= object_chunk",
 /* 136 */ "chunk ::= vdef_stmt SEMICOLON",
 /* 137 */ "chunk ::= vdefAssign_global_stmt SEMICOLON",
 /* 138 */ "chunk ::= cdef_global_stmt SEMICOLON",
 /* 139 */ "stmt ::= bodyStmt",
 /* 140 */ "stmt ::= return_stmt SEMICOLON",
 /* 141 */ "blockStmt ::= lbracket return_stmt SEMICOLON rbracket",
 /* 142 */ "blockStmt ::= lbracket bodyStmtList rbracket",
 /* 143 */ "blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket",
 /* 144 */ "bodyStmt ::= blockStmt",
 /* 145 */ "bodyStmt ::= SEMICOLON",
 /* 146 */ "bodyStmt ::= vdef_stmt SEMICOLON",
 /* 147 */ "bodyStmt ::= vdefAssign_stmt SEMICOLON",
 /* 148 */ "bodyStmt ::= cdef_stmt SEMICOLON",
 /* 149 */ "bodyStmt ::= assign_stmt SEMICOLON",
 /* 150 */ "bodyStmt ::= actionStmt",
 /* 151 */ "bodyStmt ::= if_stmt",
 /* 152 */ "bodyStmt ::= while_stmt",
 /* 153 */ "bodyStmt ::= for_stmt",
 /* 154 */ "bodyStmt ::= foreach_stmt",
 /* 155 */ "bodyStmt ::= continue_stmt SEMICOLON",
 /* 156 */ "bodyStmt ::= break_stmt SEMICOLON",
 /* 157 */ "bodyStmtList ::= bodyStmt",
 /* 158 */ "bodyStmtList ::= bodyStmtList bodyStmt",
 /* 159 */ "commaSkippable ::= COMMA",
 /* 160 */ "commaSkippable ::=",
 /* 161 */ "if_block ::= if_header stmt",
 /* 162 */ "if_block ::= if_block elif_header stmt",
 /* 163 */ "for_init_stmt_nonEmpty ::= vdef_stmt",
 /* 164 */ "for_init_stmt_nonEmpty ::= vdefAssign_stmt",
 /* 165 */ "for_init_stmt_nonEmpty ::= cdef_stmt",
 /* 166 */ "for_init_stmt_nonEmpty ::= assign_stmt",
 /* 167 */ "for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty",
 /* 168 */ "for_init_stmt ::= for_init_stmt_nonEmpty",
 /* 169 */ "for_init_stmt ::=",
 /* 170 */ "for_action_stmt_nonEmpty ::= assign_stmt",
 /* 171 */ "for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty",
 /* 172 */ "for_action_stmt ::=",
 /* 173 */ "for_action_stmt ::= for_action_stmt_nonEmpty",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
static int yyGrowStack(yyParser *p){
  int newSize;
  int idx;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  idx = p->yytos ? (int)(p->yytos - p->yystack) : 0;
  if( p->yystack==&p->yystk0 ){
    pNew = malloc(newSize*sizeof(pNew[0]));
    if( pNew ) pNew[0] = p->yystk0;
  }else{
    pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  }
  if( pNew ){
    p->yystack = pNew;
    p->yytos = &p->yystack[idx];
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
              yyTracePrompt, p->yystksz, newSize);
    }
#endif
    p->yystksz = newSize;
  }
  return pNew==0; 
}
#endif

/* Datatype of the argument to the memory allocated passed as the
** second argument to ParseAlloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
*/
#ifndef YYMALLOCARGTYPE
# define YYMALLOCARGTYPE size_t
#endif

/* Initialize a new parser that has already been allocated.
*/
void ParseInit(void *yypParser){
  yyParser *pParser = (yyParser*)yypParser;
#ifdef YYTRACKMAXSTACKDEPTH
  pParser->yyhwm = 0;
#endif
#if YYSTACKDEPTH<=0
  pParser->yytos = NULL;
  pParser->yystack = NULL;
  pParser->yystksz = 0;
  if( yyGrowStack(pParser) ){
    pParser->yystack = &pParser->yystk0;
    pParser->yystksz = 1;
  }
#endif
#ifndef YYNOERRORRECOVERY
  pParser->yyerrcnt = -1;
#endif
  pParser->yytos = pParser->yystack;
  pParser->yystack[0].stateno = 0;
  pParser->yystack[0].major = 0;
#if YYSTACKDEPTH>0
  pParser->yystackEnd = &pParser->yystack[YYSTACKDEPTH-1];
#endif
}

#ifndef Parse_ENGINEALWAYSONSTACK
/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(YYMALLOCARGTYPE)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser) );
  if( pParser ) ParseInit(pParser);
  return pParser;
}
#endif /* Parse_ENGINEALWAYSONSTACK */


/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the 
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are *not* used
    ** inside the C code.
    */
/********* Begin destructor definitions ***************************************/
    case 76: /* nt */
{
#line 40 "parser\\epparser.lemon"
 delete (yypminor->yy0); 
#line 2299 "parser\\epparser.c"
}
      break;
/********* End destructor definitions *****************************************/
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
static void yy_pop_parser_stack(yyParser *pParser){
  yyStackEntry *yytos;
  assert( pParser->yytos!=0 );
  assert( pParser->yytos > pParser->yystack );
  yytos = pParser->yytos--;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yy_destructor(pParser, yytos->major, &yytos->minor);
}

/*
** Clear all secondary memory allocations from the parser
*/
void ParseFinalize(void *p){
  yyParser *pParser = (yyParser*)p;
  while( pParser->yytos>pParser->yystack ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  if( pParser->yystack!=&pParser->yystk0 ) free(pParser->yystack);
#endif
}

#ifndef Parse_ENGINEALWAYSONSTACK
/* 
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
#ifndef YYPARSEFREENEVERNULL
  if( p==0 ) return;
#endif
  ParseFinalize(p);
  (*freeProc)(p);
}
#endif /* Parse_ENGINEALWAYSONSTACK */

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyhwm;
}
#endif

/* This array of booleans keeps track of the parser statement
** coverage.  The element yycoverage[X][Y] is set when the parser
** is in state X and has a lookahead token Y.  In a well-tested
** systems, every element of this matrix should end up being set.
*/
#if defined(YYCOVERAGE)
static unsigned char yycoverage[YYNSTATE][YYNTOKEN];
#endif

/*
** Write into out a description of every state/lookahead combination that
**
**   (1)  has not been used by the parser, and
**   (2)  is not a syntax error.
**
** Return the number of missed state/lookahead combinations.
*/
#if defined(YYCOVERAGE)
int ParseCoverage(FILE *out){
  int stateno, iLookAhead, i;
  int nMissed = 0;
  for(stateno=0; stateno<YYNSTATE; stateno++){
    i = yy_shift_ofst[stateno];
    for(iLookAhead=0; iLookAhead<YYNTOKEN; iLookAhead++){
      if( yy_lookahead[i+iLookAhead]!=iLookAhead ) continue;
      if( yycoverage[stateno][iLookAhead]==0 ) nMissed++;
      if( out ){
        fprintf(out,"State %d lookahead %s %s\n", stateno,
                yyTokenName[iLookAhead],
                yycoverage[stateno][iLookAhead] ? "ok" : "missed");
      }
    }
  }
  return nMissed;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
static unsigned int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yytos->stateno;
 
  if( stateno>YY_MAX_SHIFT ) return stateno;
  assert( stateno <= YY_SHIFT_COUNT );
#if defined(YYCOVERAGE)
  yycoverage[stateno][iLookAhead] = 1;
#endif
  do{
    i = yy_shift_ofst[stateno];
    assert( i>=0 && i+YYNTOKEN<=sizeof(yy_lookahead)/sizeof(yy_lookahead[0]) );
    assert( iLookAhead!=YYNOCODE );
    assert( iLookAhead < YYNTOKEN );
    i += iLookAhead;
    if( yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        assert( yyFallback[iFallback]==0 ); /* Fallback loop must terminate */
        iLookAhead = iFallback;
        continue;
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD && iLookAhead>0
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead],
               yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
      return yy_default[stateno];
    }else{
      return yy_action[i];
    }
  }while(1);
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser){
   ParseARG_FETCH;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/
/******** End %stack_overflow code ********************************************/
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Print tracing information for a SHIFT action
*/
#ifndef NDEBUG
static void yyTraceShift(yyParser *yypParser, int yyNewState, const char *zTag){
  if( yyTraceFILE ){
    if( yyNewState<YYNSTATE ){
      fprintf(yyTraceFILE,"%s%s '%s', go to state %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState);
    }else{
      fprintf(yyTraceFILE,"%s%s '%s', pending reduce %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState - YY_MIN_REDUCE);
    }
  }
}
#else
# define yyTraceShift(X,Y,Z)
#endif

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  ParseTOKENTYPE yyMinor        /* The minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yytos++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
    yypParser->yyhwm++;
    assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack) );
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yytos>yypParser->yystackEnd ){
    yypParser->yytos--;
    yyStackOverflow(yypParser);
    return;
  }
#else
  if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz] ){
    if( yyGrowStack(yypParser) ){
      yypParser->yytos--;
      yyStackOverflow(yypParser);
      return;
    }
  }
#endif
  if( yyNewState > YY_MAX_SHIFT ){
    yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
  }
  yytos = yypParser->yytos;
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor.yy0 = yyMinor;
  yyTraceShift(yypParser, yyNewState, "Shift");
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;       /* Symbol on the left-hand side of the rule */
  signed char nrhs;     /* Negative of the number of RHS symbols in the rule */
} yyRuleInfo[] = {
  {   79,   -1 }, /* (0) chunk ::= blockStmt */
  {   88,   -1 }, /* (1) dottedName ::= NAME */
  {   88,   -3 }, /* (2) dottedName ::= dottedName PERIOD NAME */
  {   80,   -4 }, /* (3) import_chunk ::= IMPORT dottedName AS NAME */
  {   80,   -2 }, /* (4) import_chunk ::= IMPORT dottedName */
  {   89,   -5 }, /* (5) fdef_header ::= FUNCTION NAME LPAREN nameList RPAREN */
  {   81,   -2 }, /* (6) fdef_chunk ::= fdef_header stmt */
  {   82,   -6 }, /* (7) fdecl_chunk ::= FUNCTION NAME LPAREN nameList RPAREN SEMICOLON */
  {   92,   -3 }, /* (8) object_header ::= OBJECT NAME LBRACKET */
  {   93,   -1 }, /* (9) object_body ::= object_header */
  {   93,   -4 }, /* (10) object_body ::= object_body VAR nameList_nonEmpty SEMICOLON */
  {   95,   -5 }, /* (11) method_header ::= FUNCTION NAME LPAREN nameList RPAREN */
  {   96,   -2 }, /* (12) method_chunk ::= method_header stmt */
  {   93,   -2 }, /* (13) object_body ::= object_body method_chunk */
  {   83,   -3 }, /* (14) object_chunk ::= object_body RBRACKET SEMICOLON */
  {   91,   -2 }, /* (15) stmt ::= error SEMICOLON */
  {   99,   -1 }, /* (16) lbracket ::= LBRACKET */
  {  100,   -1 }, /* (17) rbracket ::= RBRACKET */
  {   87,   -2 }, /* (18) blockStmt ::= lbracket RBRACKET */
  {   87,   -3 }, /* (19) blockStmt ::= lbracket error RBRACKET */
  {   97,   -2 }, /* (20) bodyStmt ::= funcexpr SEMICOLON */
  {  101,   -1 }, /* (21) bodyStmtList ::= error */
  {  101,   -2 }, /* (22) bodyStmtList ::= bodyStmtList error */
  {  113,   -1 }, /* (23) numList_nonEmpty ::= NUMBER */
  {  113,   -3 }, /* (24) numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER */
  {   94,   -1 }, /* (25) nameList_nonEmpty ::= NAME */
  {   94,   -3 }, /* (26) nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME */
  {   90,    0 }, /* (27) nameList ::= */
  {   90,   -1 }, /* (28) nameList ::= nameList_nonEmpty */
  {  114,   -6 }, /* (29) exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET */
  {  115,   -6 }, /* (30) expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET */
  {  114,   -1 }, /* (31) exprList_nonEmpty ::= expr */
  {  114,   -3 }, /* (32) exprList_nonEmpty ::= exprList_nonEmpty COMMA expr */
  {  116,    0 }, /* (33) exprList ::= */
  {  116,   -1 }, /* (34) exprList ::= exprList_nonEmpty */
  {  115,   -1 }, /* (35) expr ::= NUMBER */
  {  115,   -1 }, /* (36) expr ::= KILLS */
  {  115,   -1 }, /* (37) expr ::= NAME */
  {  115,   -3 }, /* (38) expr ::= expr PERIOD NAME */
  {  115,   -4 }, /* (39) expr ::= expr LSQBRACKET expr RSQBRACKET */
  {  117,   -1 }, /* (40) fArgs_nonEmpty ::= expr */
  {  117,   -1 }, /* (41) fArgs_nonEmpty ::= STRING */
  {  117,   -3 }, /* (42) fArgs_nonEmpty ::= NAME ASSIGN expr */
  {  117,   -3 }, /* (43) fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArgs_nonEmpty */
  {  118,    0 }, /* (44) fArgs ::= */
  {  118,   -1 }, /* (45) fArgs ::= fArgs_nonEmpty */
  {  105,   -4 }, /* (46) funcexpr ::= NAME LPAREN fArgs RPAREN */
  {  105,   -4 }, /* (47) funcexpr ::= expr LPAREN fArgs RPAREN */
  {  115,   -1 }, /* (48) expr ::= funcexpr */
  {  115,   -3 }, /* (49) expr ::= LPAREN expr RPAREN */
  {  115,   -4 }, /* (50) expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET */
  {  115,   -4 }, /* (51) expr ::= L2V LPAREN expr RPAREN */
  {  115,   -4 }, /* (52) expr ::= MAPSTRING LPAREN STRING RPAREN */
  {  115,   -4 }, /* (53) expr ::= UNIT LPAREN STRING RPAREN */
  {  115,   -4 }, /* (54) expr ::= SWITCH LPAREN STRING RPAREN */
  {  115,   -4 }, /* (55) expr ::= LOCATION LPAREN STRING RPAREN */
  {  115,   -5 }, /* (56) expr ::= expr QMARK expr COLON expr */
  {  115,   -3 }, /* (57) expr ::= expr PLUS expr */
  {  115,   -3 }, /* (58) expr ::= expr MINUS expr */
  {  115,   -3 }, /* (59) expr ::= expr MULTIPLY expr */
  {  115,   -3 }, /* (60) expr ::= expr DIVIDE expr */
  {  115,   -3 }, /* (61) expr ::= expr MOD expr */
  {  115,   -3 }, /* (62) expr ::= expr LSHIFT expr */
  {  115,   -3 }, /* (63) expr ::= expr RSHIFT expr */
  {  115,   -3 }, /* (64) expr ::= expr BITAND expr */
  {  115,   -3 }, /* (65) expr ::= expr BITOR expr */
  {  115,   -3 }, /* (66) expr ::= expr BITXOR expr */
  {  115,   -2 }, /* (67) expr ::= PLUS expr */
  {  115,   -2 }, /* (68) expr ::= MINUS expr */
  {  115,   -2 }, /* (69) expr ::= BITNOT expr */
  {  115,   -3 }, /* (70) expr ::= expr EQ expr */
  {  115,   -3 }, /* (71) expr ::= expr NE expr */
  {  115,   -3 }, /* (72) expr ::= expr LE expr */
  {  115,   -3 }, /* (73) expr ::= expr LT expr */
  {  115,   -3 }, /* (74) expr ::= expr GE expr */
  {  115,   -3 }, /* (75) expr ::= expr GT expr */
  {  115,   -3 }, /* (76) expr ::= expr LAND expr */
  {  115,   -3 }, /* (77) expr ::= expr LOR expr */
  {  115,   -2 }, /* (78) expr ::= LNOT expr */
  {   84,   -2 }, /* (79) vdef_stmt ::= VAR nameList_nonEmpty */
  {  102,   -4 }, /* (80) vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
  {   85,   -4 }, /* (81) vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
  {  103,   -4 }, /* (82) cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
  {   86,   -4 }, /* (83) cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
  {  120,   -1 }, /* (84) lvalue ::= NAME */
  {  120,   -4 }, /* (85) lvalue ::= expr LSQBRACKET expr RSQBRACKET */
  {  120,   -3 }, /* (86) lvalue ::= expr PERIOD NAME */
  {  121,   -1 }, /* (87) lvalueList_nonEmpty ::= lvalue */
  {  121,   -3 }, /* (88) lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue */
  {  104,   -3 }, /* (89) assign_stmt ::= lvalue ASSIGN expr */
  {  104,   -3 }, /* (90) assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty */
  {  104,   -2 }, /* (91) assign_stmt ::= INC expr */
  {  104,   -2 }, /* (92) assign_stmt ::= expr INC */
  {  104,   -2 }, /* (93) assign_stmt ::= DEC expr */
  {  104,   -2 }, /* (94) assign_stmt ::= expr DEC */
  {  104,   -3 }, /* (95) assign_stmt ::= lvalue IADD expr */
  {  104,   -3 }, /* (96) assign_stmt ::= lvalue ISUB expr */
  {  104,   -3 }, /* (97) assign_stmt ::= lvalue IMUL expr */
  {  104,   -3 }, /* (98) assign_stmt ::= lvalue IDIV expr */
  {  104,   -3 }, /* (99) assign_stmt ::= lvalue IMOD expr */
  {  104,   -3 }, /* (100) assign_stmt ::= lvalue ILSH expr */
  {  104,   -3 }, /* (101) assign_stmt ::= lvalue IRSH expr */
  {  104,   -3 }, /* (102) assign_stmt ::= lvalue IBND expr */
  {  104,   -3 }, /* (103) assign_stmt ::= lvalue IBOR expr */
  {  104,   -3 }, /* (104) assign_stmt ::= lvalue IBXR expr */
  {  122,   -1 }, /* (105) if_start ::= IF */
  {  123,   -4 }, /* (106) if_header ::= if_start LPAREN expr RPAREN */
  {  125,   -2 }, /* (107) elif_start ::= ELSE IF */
  {  126,   -4 }, /* (108) elif_header ::= elif_start LPAREN expr RPAREN */
  {  127,   -1 }, /* (109) else_header ::= ELSE */
  {  107,   -1 }, /* (110) if_stmt ::= if_block */
  {  107,   -3 }, /* (111) if_stmt ::= if_block else_header stmt */
  {  128,   -1 }, /* (112) while_start ::= WHILE */
  {  129,   -4 }, /* (113) while_header ::= while_start LPAREN expr RPAREN */
  {  108,   -2 }, /* (114) while_stmt ::= while_header stmt */
  {  130,   -2 }, /* (115) for_opener ::= FOR LPAREN */
  {  135,   -3 }, /* (116) for_header1 ::= for_opener for_init_stmt SEMICOLON */
  {  136,   -3 }, /* (117) for_header2 ::= for_header1 expr SEMICOLON */
  {  137,   -3 }, /* (118) for_header ::= for_header2 for_action_stmt RPAREN */
  {  109,   -2 }, /* (119) for_stmt ::= for_header stmt */
  {  138,   -2 }, /* (120) foreach_opener ::= FOREACH LPAREN */
  {  139,   -5 }, /* (121) foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty RPAREN */
  {  110,   -2 }, /* (122) foreach_stmt ::= foreach_header stmt */
  {  111,   -1 }, /* (123) continue_stmt ::= CONTINUE */
  {  112,   -1 }, /* (124) break_stmt ::= BREAK */
  {   98,   -2 }, /* (125) return_stmt ::= RETURN exprList */
  {  115,   -4 }, /* (126) expr ::= CONDITIONNAME LPAREN fArgs RPAREN */
  {  115,   -4 }, /* (127) expr ::= KILLS LPAREN fArgs RPAREN */
  {  106,   -5 }, /* (128) actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN SEMICOLON */
  {   77,   -1 }, /* (129) program ::= chunks */
  {   78,    0 }, /* (130) chunks ::= */
  {   78,   -2 }, /* (131) chunks ::= chunks chunk */
  {   79,   -2 }, /* (132) chunk ::= import_chunk SEMICOLON */
  {   79,   -1 }, /* (133) chunk ::= fdef_chunk */
  {   79,   -1 }, /* (134) chunk ::= fdecl_chunk */
  {   79,   -1 }, /* (135) chunk ::= object_chunk */
  {   79,   -2 }, /* (136) chunk ::= vdef_stmt SEMICOLON */
  {   79,   -2 }, /* (137) chunk ::= vdefAssign_global_stmt SEMICOLON */
  {   79,   -2 }, /* (138) chunk ::= cdef_global_stmt SEMICOLON */
  {   91,   -1 }, /* (139) stmt ::= bodyStmt */
  {   91,   -2 }, /* (140) stmt ::= return_stmt SEMICOLON */
  {   87,   -4 }, /* (141) blockStmt ::= lbracket return_stmt SEMICOLON rbracket */
  {   87,   -3 }, /* (142) blockStmt ::= lbracket bodyStmtList rbracket */
  {   87,   -5 }, /* (143) blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket */
  {   97,   -1 }, /* (144) bodyStmt ::= blockStmt */
  {   97,   -1 }, /* (145) bodyStmt ::= SEMICOLON */
  {   97,   -2 }, /* (146) bodyStmt ::= vdef_stmt SEMICOLON */
  {   97,   -2 }, /* (147) bodyStmt ::= vdefAssign_stmt SEMICOLON */
  {   97,   -2 }, /* (148) bodyStmt ::= cdef_stmt SEMICOLON */
  {   97,   -2 }, /* (149) bodyStmt ::= assign_stmt SEMICOLON */
  {   97,   -1 }, /* (150) bodyStmt ::= actionStmt */
  {   97,   -1 }, /* (151) bodyStmt ::= if_stmt */
  {   97,   -1 }, /* (152) bodyStmt ::= while_stmt */
  {   97,   -1 }, /* (153) bodyStmt ::= for_stmt */
  {   97,   -1 }, /* (154) bodyStmt ::= foreach_stmt */
  {   97,   -2 }, /* (155) bodyStmt ::= continue_stmt SEMICOLON */
  {   97,   -2 }, /* (156) bodyStmt ::= break_stmt SEMICOLON */
  {  101,   -1 }, /* (157) bodyStmtList ::= bodyStmt */
  {  101,   -2 }, /* (158) bodyStmtList ::= bodyStmtList bodyStmt */
  {  119,   -1 }, /* (159) commaSkippable ::= COMMA */
  {  119,    0 }, /* (160) commaSkippable ::= */
  {  124,   -2 }, /* (161) if_block ::= if_header stmt */
  {  124,   -3 }, /* (162) if_block ::= if_block elif_header stmt */
  {  131,   -1 }, /* (163) for_init_stmt_nonEmpty ::= vdef_stmt */
  {  131,   -1 }, /* (164) for_init_stmt_nonEmpty ::= vdefAssign_stmt */
  {  131,   -1 }, /* (165) for_init_stmt_nonEmpty ::= cdef_stmt */
  {  131,   -1 }, /* (166) for_init_stmt_nonEmpty ::= assign_stmt */
  {  131,   -3 }, /* (167) for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty */
  {  132,   -1 }, /* (168) for_init_stmt ::= for_init_stmt_nonEmpty */
  {  132,    0 }, /* (169) for_init_stmt ::= */
  {  133,   -1 }, /* (170) for_action_stmt_nonEmpty ::= assign_stmt */
  {  133,   -3 }, /* (171) for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty */
  {  134,    0 }, /* (172) for_action_stmt ::= */
  {  134,   -1 }, /* (173) for_action_stmt ::= for_action_stmt_nonEmpty */
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
**
** The yyLookahead and yyLookaheadToken parameters provide reduce actions
** access to the lookahead token (if any).  The yyLookahead will be YYNOCODE
** if the lookahead token has already been consumed.  As this procedure is
** only called from one place, optimizing compilers will in-line it, which
** means that the extra parameters have no performance impact.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  unsigned int yyruleno,       /* Number of the rule by which to reduce */
  int yyLookahead,             /* Lookahead token, or YYNOCODE if none */
  ParseTOKENTYPE yyLookaheadToken  /* Value of the lookahead token */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = yypParser->yytos;
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    yysize = yyRuleInfo[yyruleno].nrhs;
    if( yysize ){
      fprintf(yyTraceFILE, "%sReduce %d [%s], go to state %d.\n",
        yyTracePrompt,
        yyruleno, yyRuleName[yyruleno], yymsp[yysize].stateno);
    }else{
      fprintf(yyTraceFILE, "%sReduce %d [%s].\n",
        yyTracePrompt, yyruleno, yyRuleName[yyruleno]);
    }
  }
#endif /* NDEBUG */

  /* Check that the stack is large enough to grow by a single entry
  ** if the RHS of the rule is empty.  This ensures that there is room
  ** enough on the stack to push the LHS value */
  if( yyRuleInfo[yyruleno].nrhs==0 ){
#ifdef YYTRACKMAXSTACKDEPTH
    if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
      yypParser->yyhwm++;
      assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack));
    }
#endif
#if YYSTACKDEPTH>0 
    if( yypParser->yytos>=yypParser->yystackEnd ){
      yyStackOverflow(yypParser);
      return;
    }
#else
    if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz-1] ){
      if( yyGrowStack(yypParser) ){
        yyStackOverflow(yypParser);
        return;
      }
      yymsp = yypParser->yytos;
    }
#endif
  }

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
        YYMINORTYPE yylhsminor;
      case 0: /* chunk ::= blockStmt */
#line 77 "parser\\epparser.lemon"
{
    throw_error(48993, "Misplaced block statement");
}
#line 2849 "parser\\epparser.c"
        break;
      case 1: /* dottedName ::= NAME */
      case 23: /* numList_nonEmpty ::= NUMBER */ yytestcase(yyruleno==23);
      case 25: /* nameList_nonEmpty ::= NAME */ yytestcase(yyruleno==25);
      case 28: /* nameList ::= nameList_nonEmpty */ yytestcase(yyruleno==28);
      case 31: /* exprList_nonEmpty ::= expr */ yytestcase(yyruleno==31);
      case 34: /* exprList ::= exprList_nonEmpty */ yytestcase(yyruleno==34);
      case 35: /* expr ::= NUMBER */ yytestcase(yyruleno==35);
      case 40: /* fArgs_nonEmpty ::= expr */ yytestcase(yyruleno==40);
      case 41: /* fArgs_nonEmpty ::= STRING */ yytestcase(yyruleno==41);
      case 45: /* fArgs ::= fArgs_nonEmpty */ yytestcase(yyruleno==45);
      case 48: /* expr ::= funcexpr */ yytestcase(yyruleno==48);
      case 87: /* lvalueList_nonEmpty ::= lvalue */ yytestcase(yyruleno==87);
#line 83 "parser\\epparser.lemon"
{ yylhsminor.yy0 = yymsp[0].minor.yy0; }
#line 2865 "parser\\epparser.c"
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 2: /* dottedName ::= dottedName PERIOD NAME */
#line 84 "parser\\epparser.lemon"
{
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[-2].minor.yy0;
    yylhsminor.yy0 = yymsp[0].minor.yy0;
}
#line 2875 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 3: /* import_chunk ::= IMPORT dottedName AS NAME */
#line 90 "parser\\epparser.lemon"
{
    std::string impPath, impModname;
    impPathProcess(yymsp[-2].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(yymsp[0].minor.yy0->data)) {
        throw_error(6754, "Importing already-declared module " + yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << " as " << yymsp[0].minor.yy0->data << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 2892 "parser\\epparser.c"
        break;
      case 4: /* import_chunk ::= IMPORT dottedName */
#line 103 "parser\\epparser.lemon"
{
    std::string impPath, impModname;
    impPathProcess(yymsp[0].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(impModname)) {
        throw_error(6754, "Importing already-declared module " + impModname, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << std::endl;
    delete yymsp[0].minor.yy0;
}
#line 2908 "parser\\epparser.c"
        break;
      case 5: /* fdef_header ::= FUNCTION NAME LPAREN nameList RPAREN */
#line 117 "parser\\epparser.lemon"
{
    // Preprocess yymsp[-3].minor.yy0
    funcNamePreprocess(yymsp[-3].minor.yy0->data);
    if(!ps->closure.defFunction(yymsp[-3].minor.yy0->data)) {
        throw_error(4495, "Duplicate function " + yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    }

    ps->gen << "@EUDFunc" << std::endl;
    ps->gen << "def " << yymsp[-3].minor.yy0->data << "(" << yymsp[-1].minor.yy0->data << "):" << std::endl;
    ps->gen.indent();

    ps->closure.pushScope();
    currentFunction = yymsp[-3].minor.yy0->data;

    if(MAP_DEBUG) {
         ps->gen << "MDBG_PUSHF(\'" << currentFunction << "\', \'" << currentModule << "\')" << std::endl;
    }

    // Register variables.
    commaListIter(yymsp[-1].minor.yy0->data, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-1].minor.yy0->line);
        }
    });

    tmpIndex = 1;
    delete yymsp[-3].minor.yy0;
    delete yymsp[-1].minor.yy0;
}
#line 2941 "parser\\epparser.c"
        break;
      case 6: /* fdef_chunk ::= fdef_header stmt */
#line 147 "parser\\epparser.lemon"
{
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
}
#line 2953 "parser\\epparser.c"
        break;
      case 7: /* fdecl_chunk ::= FUNCTION NAME LPAREN nameList RPAREN SEMICOLON */
#line 156 "parser\\epparser.lemon"
{
    // Preprocess yymsp[-4].minor.yy0
    funcNamePreprocess(yymsp[-4].minor.yy0->data);
    if(!ps->closure.declareFunction(yymsp[-4].minor.yy0->data)) {
        throw_error(72461, "Declaring function with non-function yymsp[-4].minor.yy0 " + yymsp[-4].minor.yy0->data, yymsp[-4].minor.yy0->line);
    }
}
#line 2964 "parser\\epparser.c"
        break;
      case 8: /* object_header ::= OBJECT NAME LBRACKET */
#line 167 "parser\\epparser.lemon"
{
    ps->gen << "class " << yymsp[-1].minor.yy0->data << "(EUDStruct):\n";
    ps->gen.indent();

    funcNamePreprocess(yymsp[-1].minor.yy0->data);
    if(!ps->closure.declareFunction(yymsp[-1].minor.yy0->data)) {
        throw_error(8228, "Declaring object with non-function yymsp[-1].minor.yy0 " + yymsp[-1].minor.yy0->data, yymsp[-1].minor.yy0->line);
    }
    ps->closure.pushScope();

    yylhsminor.yy0 = yymsp[-2].minor.yy0;
    yylhsminor.yy0->data = yymsp[-1].minor.yy0->data;  // Add object yymsp[-1].minor.yy0
    delete yymsp[-1].minor.yy0;
}
#line 2982 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 9: /* object_body ::= object_header */
#line 182 "parser\\epparser.lemon"
{
    yylhsminor.yy0 = yymsp[0].minor.yy0;
}
#line 2990 "parser\\epparser.c"
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 10: /* object_body ::= object_body VAR nameList_nonEmpty SEMICOLON */
#line 186 "parser\\epparser.lemon"
{
    yylhsminor.yy0 = yymsp[-3].minor.yy0;
    yylhsminor.yy0->line = yymsp[-1].minor.yy0->line;
    yylhsminor.yy0->data += ", " + yymsp[-1].minor.yy0->data;
    delete yymsp[-1].minor.yy0;
}
#line 3001 "parser\\epparser.c"
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 11: /* method_header ::= FUNCTION NAME LPAREN nameList RPAREN */
#line 193 "parser\\epparser.lemon"
{
    // Method can't be called directly, so we shouldn't have to register it to closure.
    // duplicate method names should be checked at python-compile time.

    ps->gen << "@EUDMethod" << std::endl;

    ps->closure.pushScope();
    // Register variables.
    std::string _this = "this";  // This may be modified...?
    if(!ps->closure.defConstant(_this)) {
        throw_error(656, ("Redeclaration of variable \'this\'"), yymsp[-1].minor.yy0->line);
    }
    commaListIter(yymsp[-1].minor.yy0->data, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(2656, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-1].minor.yy0->line);
        }
    });

    // Add default argument 'self'
    if (yymsp[-1].minor.yy0->data.size() != 0) {
        ps->gen << "def " << yymsp[-3].minor.yy0->data << "(" << _this << ", " << yymsp[-1].minor.yy0->data << "):" << std::endl;
    } else {
        ps->gen << "def " << yymsp[-3].minor.yy0->data << "(" << _this << "):" << std::endl;
    }
    ps->gen.indent();

    currentFunction = yymsp[-3].minor.yy0->data;

    if(MAP_DEBUG) {
         ps->gen << "MDBG_PUSHF(\'" << currentFunction << "\', \'" << currentModule << "\')" << std::endl;
    }

    tmpIndex = 1;
    delete yymsp[-1].minor.yy0;
    yymsp[-4].minor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
#line 3042 "parser\\epparser.c"
        break;
      case 12: /* method_chunk ::= method_header stmt */
#line 230 "parser\\epparser.lemon"
{
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
    yylhsminor.yy0 = yymsp[-1].minor.yy0;
}
#line 3055 "parser\\epparser.c"
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 13: /* object_body ::= object_body method_chunk */
#line 240 "parser\\epparser.lemon"
{
    yylhsminor.yy0 = yymsp[-1].minor.yy0;
    yylhsminor.yy0->line = yymsp[0].minor.yy0->line;
    delete yymsp[0].minor.yy0;
}
#line 3065 "parser\\epparser.c"
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 14: /* object_chunk ::= object_body RBRACKET SEMICOLON */
#line 246 "parser\\epparser.lemon"
{
    ps->gen << "_fields_ = [";
    bool isFirst = true;
    commaListIter(yymsp[-2].minor.yy0->data, [&](std::string& varname) {
        if (isFirst) {
            isFirst = false;
            return;
        }
        ps->gen << "'" << varname << "', ";
    });
    ps->gen << "]\n";
    ps->gen.unindent(true);
    ps->closure.popScope();
    delete yymsp[-2].minor.yy0;
}
#line 3085 "parser\\epparser.c"
        break;
      case 15: /* stmt ::= error SEMICOLON */
#line 263 "parser\\epparser.lemon"
{ throw_error(6974, "Error while parsing statement", yymsp[0].minor.yy0->line); delete yymsp[0].minor.yy0; }
#line 3090 "parser\\epparser.c"
        break;
      case 16: /* lbracket ::= LBRACKET */
#line 269 "parser\\epparser.lemon"
{ ps->closure.pushScope(); }
#line 3095 "parser\\epparser.c"
        break;
      case 17: /* rbracket ::= RBRACKET */
#line 270 "parser\\epparser.lemon"
{ ps->closure.popScope(); }
#line 3100 "parser\\epparser.c"
        break;
      case 18: /* blockStmt ::= lbracket RBRACKET */
#line 272 "parser\\epparser.lemon"
{
    ps->closure.popScope();
}
#line 3107 "parser\\epparser.c"
        break;
      case 19: /* blockStmt ::= lbracket error RBRACKET */
#line 278 "parser\\epparser.lemon"
{
    throw_error(6298, "Block not terminated properly.", yymsp[0].minor.yy0->line);
    ps->closure.popScope();
    delete yymsp[0].minor.yy0;
}
#line 3116 "parser\\epparser.c"
        break;
      case 20: /* bodyStmt ::= funcexpr SEMICOLON */
#line 290 "parser\\epparser.lemon"
{ ps->gen << yymsp[-1].minor.yy0->data << std::endl; }
#line 3121 "parser\\epparser.c"
        break;
      case 21: /* bodyStmtList ::= error */
      case 22: /* bodyStmtList ::= bodyStmtList error */ yytestcase(yyruleno==22);
#line 300 "parser\\epparser.lemon"
{
    throw_error(8510, "Incomplete statement");
}
#line 3129 "parser\\epparser.c"
        break;
      case 24: /* numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER */
      case 26: /* nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME */ yytestcase(yyruleno==26);
      case 88: /* lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue */ yytestcase(yyruleno==88);
#line 313 "parser\\epparser.lemon"
{ yylhsminor.yy0 = commaConcat(yymsp[-2].minor.yy0, yymsp[0].minor.yy0); }
#line 3136 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 27: /* nameList ::= */
      case 33: /* exprList ::= */ yytestcase(yyruleno==33);
      case 44: /* fArgs ::= */ yytestcase(yyruleno==44);
#line 316 "parser\\epparser.lemon"
{ yymsp[1].minor.yy0 = genEmpty(); }
#line 3144 "parser\\epparser.c"
        break;
      case 29: /* exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET */
#line 319 "parser\\epparser.lemon"
{
    yymsp[-2].minor.yy0->data = "_SRET(" + yymsp[-5].minor.yy0->data + ", [" + yymsp[-2].minor.yy0->data + "])";
    delete yymsp[-5].minor.yy0;
    yylhsminor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
#line 3153 "parser\\epparser.c"
  yymsp[-5].minor.yy0 = yylhsminor.yy0;
        break;
      case 30: /* expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET */
#line 326 "parser\\epparser.lemon"
{
    yymsp[-2].minor.yy0->data = yymsp[-5].minor.yy0->data + "[" + yymsp[-2].minor.yy0->data + "]";
    delete yymsp[-5].minor.yy0;
    yylhsminor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
#line 3163 "parser\\epparser.c"
  yymsp[-5].minor.yy0 = yylhsminor.yy0;
        break;
      case 32: /* exprList_nonEmpty ::= exprList_nonEmpty COMMA expr */
#line 334 "parser\\epparser.lemon"
{ yylhsminor.yy0 = new Token((yymsp[-2].minor.yy0->data) + ", " + (yymsp[0].minor.yy0->data), yymsp[0].minor.yy0); delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3169 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 36: /* expr ::= KILLS */
#line 341 "parser\\epparser.lemon"
{
    yymsp[0].minor.yy0->data = "4";
    yylhsminor.yy0 = yymsp[0].minor.yy0;
}
#line 3178 "parser\\epparser.c"
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 37: /* expr ::= NAME */
#line 346 "parser\\epparser.lemon"
{
    checkIsRValue(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yylhsminor.yy0 = yymsp[0].minor.yy0;
}
#line 3187 "parser\\epparser.c"
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 38: /* expr ::= expr PERIOD NAME */
#line 351 "parser\\epparser.lemon"
{
    yymsp[-2].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[0].minor.yy0;
    yylhsminor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
#line 3197 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 39: /* expr ::= expr LSQBRACKET expr RSQBRACKET */
#line 357 "parser\\epparser.lemon"
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "[" + yymsp[-1].minor.yy0->data + "]";
    delete yymsp[-1].minor.yy0;
    yylhsminor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
#line 3207 "parser\\epparser.c"
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 42: /* fArgs_nonEmpty ::= NAME ASSIGN expr */
#line 366 "parser\\epparser.lemon"
{  // Keyword argument
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "=" + yymsp[0].minor.yy0->data;
    yymsp[0].minor.yy0->type = TOKEN_TEMP;
    yylhsminor.yy0 = yymsp[0].minor.yy0;
    delete yymsp[-2].minor.yy0;
}
#line 3218 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 43: /* fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArgs_nonEmpty */
#line 373 "parser\\epparser.lemon"
{
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + ", " + yymsp[0].minor.yy0->data;
    yymsp[0].minor.yy0->type = TOKEN_TEMP;
    yylhsminor.yy0 = yymsp[0].minor.yy0;
    delete yymsp[-2].minor.yy0;
}
#line 3229 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 46: /* funcexpr ::= NAME LPAREN fArgs RPAREN */
#line 383 "parser\\epparser.lemon"
{
    functionCalledInMultipleActions = true;

    // Preprocess yymsp[-3].minor.yy0
    funcNamePreprocess(yymsp[-3].minor.yy0->data);
    checkIsFunction(yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yylhsminor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
#line 3243 "parser\\epparser.c"
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 47: /* funcexpr ::= expr LPAREN fArgs RPAREN */
#line 393 "parser\\epparser.lemon"
{
    functionCalledInMultipleActions = true;

    // If calling function imported from another module, add f_ prefix to function yymsp[-3].minor.yy0.
    static std::regex prefixedFuncNameRegex("^[a-z][_a-zA-Z0-9]*");
    std::string& nameStr = yymsp[-3].minor.yy0->data;
    if(std::count(nameStr.begin(), nameStr.end(), '.') == 1) {
        size_t p = nameStr.find('.');
        std::string moduleName = nameStr.substr(0, p);
        std::string funcName = nameStr.substr(p + 1);
        if (closure->isModule(moduleName) && std::regex_match(funcName, prefixedFuncNameRegex)) {
            funcNamePreprocess(funcName);
            yymsp[-3].minor.yy0->data = moduleName + '.' + funcName;
        }
    }

    // Preprocess yymsp[-3].minor.yy0
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yylhsminor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
#line 3268 "parser\\epparser.c"
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 49: /* expr ::= LPAREN expr RPAREN */
#line 421 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "(" + yymsp[-1].minor.yy0->data + ")";
    yymsp[-2].minor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 3277 "parser\\epparser.c"
        break;
      case 50: /* expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET */
#line 429 "parser\\epparser.lemon"
{
    yymsp[-2].minor.yy0->data = "_ARR(FlattenList([" + yymsp[-2].minor.yy0->data + "]))";
    yymsp[-3].minor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
#line 3285 "parser\\epparser.c"
        break;
      case 51: /* expr ::= L2V LPAREN expr RPAREN */
#line 434 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "_L2V(" + yymsp[-1].minor.yy0->data + ")";
    yymsp[-3].minor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 3293 "parser\\epparser.c"
        break;
      case 52: /* expr ::= MAPSTRING LPAREN STRING RPAREN */
#line 439 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "GetStringIndex(" + yymsp[-1].minor.yy0->data + ")";
    yymsp[-3].minor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 3301 "parser\\epparser.c"
        break;
      case 53: /* expr ::= UNIT LPAREN STRING RPAREN */
#line 444 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "EncodeUnit(" + yymsp[-1].minor.yy0->data + ")";
    yymsp[-3].minor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 3309 "parser\\epparser.c"
        break;
      case 54: /* expr ::= SWITCH LPAREN STRING RPAREN */
#line 449 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "EncodeSwitch(" + yymsp[-1].minor.yy0->data + ")";
    yymsp[-3].minor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 3317 "parser\\epparser.c"
        break;
      case 55: /* expr ::= LOCATION LPAREN STRING RPAREN */
#line 454 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "GetLocationIndex(" + yymsp[-1].minor.yy0->data + ")";
    yymsp[-3].minor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 3325 "parser\\epparser.c"
        break;
      case 56: /* expr ::= expr QMARK expr COLON expr */
#line 460 "parser\\epparser.lemon"
{
    std::stringstream ss;
    ss << "EUDTernary";
    applyNegativeOptimization(ss, yymsp[-4].minor.yy0);
    ss << "(" << yymsp[-2].minor.yy0->data << ")(" << yymsp[0].minor.yy0->data << ")";
    yymsp[0].minor.yy0->data = ss.str();
    delete yymsp[-4].minor.yy0;
    delete yymsp[-2].minor.yy0;
    yylhsminor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
}
#line 3339 "parser\\epparser.c"
  yymsp[-4].minor.yy0 = yylhsminor.yy0;
        break;
      case 57: /* expr ::= expr PLUS expr */
#line 472 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "+",  yymsp[0].minor.yy0); }
#line 3345 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 58: /* expr ::= expr MINUS expr */
#line 473 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "-",  yymsp[0].minor.yy0); }
#line 3351 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 59: /* expr ::= expr MULTIPLY expr */
#line 474 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "*",  yymsp[0].minor.yy0); }
#line 3357 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 60: /* expr ::= expr DIVIDE expr */
#line 475 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "//", yymsp[0].minor.yy0); }
#line 3363 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 61: /* expr ::= expr MOD expr */
#line 476 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "%",  yymsp[0].minor.yy0); }
#line 3369 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 62: /* expr ::= expr LSHIFT expr */
#line 477 "parser\\epparser.lemon"
{
    yymsp[0].minor.yy0->data = "_LSH(" + yymsp[-2].minor.yy0->data + "," + yymsp[0].minor.yy0->data + ")";
    delete yymsp[-2].minor.yy0;
    yylhsminor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
}
#line 3379 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 63: /* expr ::= expr RSHIFT expr */
#line 482 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">>", yymsp[0].minor.yy0); }
#line 3385 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 64: /* expr ::= expr BITAND expr */
#line 483 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "&",  yymsp[0].minor.yy0); }
#line 3391 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 65: /* expr ::= expr BITOR expr */
#line 484 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "|",  yymsp[0].minor.yy0); }
#line 3397 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 66: /* expr ::= expr BITXOR expr */
#line 485 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "^",  yymsp[0].minor.yy0); }
#line 3403 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 67: /* expr ::= PLUS expr */
#line 488 "parser\\epparser.lemon"
{ yymsp[0].minor.yy0->data = "+" + yymsp[0].minor.yy0->data; yymsp[-1].minor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
#line 3409 "parser\\epparser.c"
        break;
      case 68: /* expr ::= MINUS expr */
#line 489 "parser\\epparser.lemon"
{ yymsp[0].minor.yy0->data = "-" + yymsp[0].minor.yy0->data; yymsp[-1].minor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
#line 3414 "parser\\epparser.c"
        break;
      case 69: /* expr ::= BITNOT expr */
#line 490 "parser\\epparser.lemon"
{ yymsp[0].minor.yy0->data = "~" + yymsp[0].minor.yy0->data; yymsp[-1].minor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
#line 3419 "parser\\epparser.c"
        break;
      case 70: /* expr ::= expr EQ expr */
#line 494 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "==", yymsp[0].minor.yy0); }
#line 3424 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 71: /* expr ::= expr NE expr */
#line 495 "parser\\epparser.lemon"
{
    yylhsminor.yy0 = genEmpty();
    yylhsminor.yy0->line = yymsp[0].minor.yy0->line;

    yylhsminor.yy0->type = TOKEN_NE;
    yylhsminor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yylhsminor.yy0->subToken[1] = yymsp[0].minor.yy0;
    yylhsminor.yy0->data = yymsp[-2].minor.yy0->data + " != " + yymsp[0].minor.yy0->data;
}
#line 3438 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 72: /* expr ::= expr LE expr */
#line 505 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "<=", yymsp[0].minor.yy0); }
#line 3444 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 73: /* expr ::= expr LT expr */
#line 506 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, "<",  yymsp[0].minor.yy0); }
#line 3450 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 74: /* expr ::= expr GE expr */
#line 507 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">=", yymsp[0].minor.yy0); }
#line 3456 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 75: /* expr ::= expr GT expr */
#line 508 "parser\\epparser.lemon"
{ yylhsminor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">" , yymsp[0].minor.yy0); }
#line 3462 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 76: /* expr ::= expr LAND expr */
#line 511 "parser\\epparser.lemon"
{
    yylhsminor.yy0 = genEmpty();
    yylhsminor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yylhsminor.yy0->type = TOKEN_LAND;
    yylhsminor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yylhsminor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCAnd()";
    shortCircuitCondListGetter(ss, yylhsminor.yy0, TOKEN_LAND);
    ss << "()";
    yylhsminor.yy0->data = ss.str();
}
#line 3482 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 77: /* expr ::= expr LOR expr */
#line 528 "parser\\epparser.lemon"
{
    yylhsminor.yy0 = genEmpty();
    yylhsminor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yylhsminor.yy0->type = TOKEN_LOR;
    yylhsminor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yylhsminor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCOr()";
    shortCircuitCondListGetter(ss, yylhsminor.yy0, TOKEN_LOR);
    ss << "()";
    yylhsminor.yy0->data = ss.str();
}
#line 3502 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 78: /* expr ::= LNOT expr */
#line 544 "parser\\epparser.lemon"
{
    if(yymsp[0].minor.yy0->type == TOKEN_LNOT) {
        yymsp[-1].minor.yy0 = yymsp[0].minor.yy0->subToken[0];
        yymsp[0].minor.yy0->subToken[0] = nullptr;
        delete yymsp[0].minor.yy0;
    }
    else {
        yymsp[-1].minor.yy0 = genEmpty();
        yymsp[-1].minor.yy0->line = yymsp[0].minor.yy0->line;
        yymsp[-1].minor.yy0->type = TOKEN_LNOT;
        yymsp[-1].minor.yy0->data = "EUDNot(" + yymsp[0].minor.yy0->data + ")";
        yymsp[-1].minor.yy0->subToken[0] = yymsp[0].minor.yy0;
    }
}
#line 3521 "parser\\epparser.c"
        break;
      case 79: /* vdef_stmt ::= VAR nameList_nonEmpty */
#line 561 "parser\\epparser.lemon"
{
    std::string& s = yymsp[0].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"), yymsp[0].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
    }
    else {
        ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    }

    delete yymsp[0].minor.yy0;
}
#line 3545 "parser\\epparser.c"
        break;
      case 80: /* vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
#line 582 "parser\\epparser.lemon"
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
        ps->gen << s << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    }
    else {
        ps->gen << s << " = _MVAR([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3570 "parser\\epparser.c"
        break;
      case 81: /* vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
#line 604 "parser\\epparser.lemon"
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    ps->gen << "_IGVA([" << s << "], lambda: [" << yymsp[0].minor.yy0->data << "])" << std::endl;

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3590 "parser\\epparser.c"
        break;
      case 82: /* cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
#line 621 "parser\\epparser.lemon"
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = " << yymsp[0].minor.yy0->data << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3612 "parser\\epparser.c"
        break;
      case 83: /* cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
#line 640 "parser\\epparser.lemon"
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = _CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], 1)[0]" << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable(_CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], " << nameCount << "))" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3634 "parser\\epparser.c"
        break;
      case 84: /* lvalue ::= NAME */
#line 660 "parser\\epparser.lemon"
{
    checkIsVariable(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yylhsminor.yy0 = yymsp[0].minor.yy0;
}
#line 3642 "parser\\epparser.c"
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 85: /* lvalue ::= expr LSQBRACKET expr RSQBRACKET */
#line 665 "parser\\epparser.lemon"
{
    checkIsConstant(yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    yymsp[-1].minor.yy0->data = "_ARRW(" + yymsp[-3].minor.yy0->data + ", " + yymsp[-1].minor.yy0->data + ")";
    yylhsminor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
    delete yymsp[-3].minor.yy0;
}
#line 3653 "parser\\epparser.c"
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 86: /* lvalue ::= expr PERIOD NAME */
#line 672 "parser\\epparser.lemon"
{
    checkIsConstant(yymsp[-2].minor.yy0->data, yymsp[-2].minor.yy0->line);
    yymsp[0].minor.yy0->data = "_ATTW(" + yymsp[-2].minor.yy0->data + ", '" + yymsp[0].minor.yy0->data + "')";
    yylhsminor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
    delete yymsp[-2].minor.yy0;
}
#line 3664 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 89: /* assign_stmt ::= lvalue ASSIGN expr */
#line 682 "parser\\epparser.lemon"
{
    ps->gen << yymsp[-2].minor.yy0->data << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3673 "parser\\epparser.c"
        break;
      case 90: /* assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty */
#line 687 "parser\\epparser.lemon"
{
    ps->gen << "_SV([" << yymsp[-2].minor.yy0->data << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3681 "parser\\epparser.c"
        break;
      case 91: /* assign_stmt ::= INC expr */
#line 695 "parser\\epparser.lemon"
{ ps->gen << yymsp[0].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[0].minor.yy0; }
#line 3686 "parser\\epparser.c"
        break;
      case 92: /* assign_stmt ::= expr INC */
#line 696 "parser\\epparser.lemon"
{ ps->gen << yymsp[-1].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[-1].minor.yy0; }
#line 3691 "parser\\epparser.c"
        break;
      case 93: /* assign_stmt ::= DEC expr */
#line 697 "parser\\epparser.lemon"
{ ps->gen << yymsp[0].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[0].minor.yy0; }
#line 3696 "parser\\epparser.c"
        break;
      case 94: /* assign_stmt ::= expr DEC */
#line 698 "parser\\epparser.lemon"
{ ps->gen << yymsp[-1].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[-1].minor.yy0; }
#line 3701 "parser\\epparser.c"
        break;
      case 95: /* assign_stmt ::= lvalue IADD expr */
#line 699 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__iadd__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3706 "parser\\epparser.c"
        break;
      case 96: /* assign_stmt ::= lvalue ISUB expr */
#line 700 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__isub__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3711 "parser\\epparser.c"
        break;
      case 97: /* assign_stmt ::= lvalue IMUL expr */
#line 701 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__imul__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3716 "parser\\epparser.c"
        break;
      case 98: /* assign_stmt ::= lvalue IDIV expr */
#line 702 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ifloordiv__("  << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3721 "parser\\epparser.c"
        break;
      case 99: /* assign_stmt ::= lvalue IMOD expr */
#line 703 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__imod__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3726 "parser\\epparser.c"
        break;
      case 100: /* assign_stmt ::= lvalue ILSH expr */
#line 704 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ilshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3731 "parser\\epparser.c"
        break;
      case 101: /* assign_stmt ::= lvalue IRSH expr */
#line 705 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__irshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3736 "parser\\epparser.c"
        break;
      case 102: /* assign_stmt ::= lvalue IBND expr */
#line 706 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__iand__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3741 "parser\\epparser.c"
        break;
      case 103: /* assign_stmt ::= lvalue IBOR expr */
#line 707 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ior__("        << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3746 "parser\\epparser.c"
        break;
      case 104: /* assign_stmt ::= lvalue IBXR expr */
#line 708 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ixor__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3751 "parser\\epparser.c"
        break;
      case 105: /* if_start ::= IF */
#line 711 "parser\\epparser.lemon"
{
    yylhsminor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yylhsminor.yy0->data << " = EUDIf()" << std::endl;
}
#line 3759 "parser\\epparser.c"
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 106: /* if_header ::= if_start LPAREN expr RPAREN */
      case 108: /* elif_header ::= elif_start LPAREN expr RPAREN */ yytestcase(yyruleno==108);
      case 113: /* while_header ::= while_start LPAREN expr RPAREN */ yytestcase(yyruleno==113);
#line 716 "parser\\epparser.lemon"
{
    writeCsOpener(*pGen, yymsp[-3].minor.yy0, yymsp[-1].minor.yy0);
    ps->gen.indent();
    delete yymsp[-3].minor.yy0; delete yymsp[-1].minor.yy0;
}
#line 3771 "parser\\epparser.c"
        break;
      case 107: /* elif_start ::= ELSE IF */
#line 724 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen.unindent(false);
    ps->gen << yymsp[-1].minor.yy0->data << " = EUDElseIf()" << std::endl;
}
#line 3780 "parser\\epparser.c"
        break;
      case 109: /* else_header ::= ELSE */
#line 738 "parser\\epparser.lemon"
{
    ps->gen.unindent(false);
    ps->gen << "if EUDElse()():" << std::endl;
    ps->gen.indent();
}
#line 3789 "parser\\epparser.c"
        break;
      case 110: /* if_stmt ::= if_block */
      case 111: /* if_stmt ::= if_block else_header stmt */ yytestcase(yyruleno==111);
#line 744 "parser\\epparser.lemon"
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
}
#line 3798 "parser\\epparser.c"
        break;
      case 112: /* while_start ::= WHILE */
#line 756 "parser\\epparser.lemon"
{
    yylhsminor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yylhsminor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
#line 3807 "parser\\epparser.c"
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 114: /* while_stmt ::= while_header stmt */
#line 768 "parser\\epparser.lemon"
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
}
#line 3816 "parser\\epparser.c"
        break;
      case 115: /* for_opener ::= FOR LPAREN */
      case 120: /* foreach_opener ::= FOREACH LPAREN */ yytestcase(yyruleno==120);
#line 774 "parser\\epparser.lemon"
{
    ps->closure.pushScope();
}
#line 3824 "parser\\epparser.c"
        break;
      case 116: /* for_header1 ::= for_opener for_init_stmt SEMICOLON */
#line 792 "parser\\epparser.lemon"
{
    // opening for expr
    yymsp[-2].minor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yymsp[-2].minor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
#line 3834 "parser\\epparser.c"
        break;
      case 117: /* for_header2 ::= for_header1 expr SEMICOLON */
#line 799 "parser\\epparser.lemon"
{
    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0; delete yymsp[-1].minor.yy0;

    // Opening for assign_statement
    yylhsminor.yy0 = genTemp(yymsp[-1].minor.yy0);
    ps->gen << "def " << yylhsminor.yy0->data <<"():" << std::endl;
    ps->gen.indent();
}
#line 3848 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 118: /* for_header ::= for_header2 for_action_stmt RPAREN */
#line 810 "parser\\epparser.lemon"
{
    yylhsminor.yy0 = yymsp[-2].minor.yy0;
    ps->gen.unindent(false);
}
#line 3857 "parser\\epparser.c"
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 119: /* for_stmt ::= for_header stmt */
#line 815 "parser\\epparser.lemon"
{
    ps->gen << "EUDSetContinuePoint()" << std::endl;
    ps->gen << yymsp[-1].minor.yy0->data << "()" << std::endl;
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
    ps->closure.popScope();
}
#line 3869 "parser\\epparser.c"
        break;
      case 121: /* foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty RPAREN */
#line 830 "parser\\epparser.lemon"
{
    commaListIter(yymsp[-3].minor.yy0->data, [&](std::string& s) {
        ps->closure.defVariable(s);
    });
    ps->gen << "for " << yymsp[-3].minor.yy0->data << " in " << yymsp[-1].minor.yy0->data << ":" << std::endl;
    ps->gen.indent();
}
#line 3880 "parser\\epparser.c"
        break;
      case 122: /* foreach_stmt ::= foreach_header stmt */
#line 838 "parser\\epparser.lemon"
{
    ps->gen.unindent(true);
    ps->closure.popScope();
}
#line 3888 "parser\\epparser.c"
        break;
      case 123: /* continue_stmt ::= CONTINUE */
#line 846 "parser\\epparser.lemon"
{
    ps->gen << "EUDContinue()" << std::endl;
}
#line 3895 "parser\\epparser.c"
        break;
      case 124: /* break_stmt ::= BREAK */
#line 850 "parser\\epparser.lemon"
{
    ps->gen << "EUDBreak()" << std::endl;
}
#line 3902 "parser\\epparser.c"
        break;
      case 125: /* return_stmt ::= RETURN exprList */
#line 857 "parser\\epparser.lemon"
{
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen << "EUDReturn(" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[0].minor.yy0;
}
#line 3913 "parser\\epparser.c"
        break;
      case 126: /* expr ::= CONDITIONNAME LPAREN fArgs RPAREN */
      case 127: /* expr ::= KILLS LPAREN fArgs RPAREN */ yytestcase(yyruleno==127);
#line 868 "parser\\epparser.lemon"
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "(" + yymsp[-1].minor.yy0->data + ")";
    delete yymsp[-1].minor.yy0;
    yylhsminor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
#line 3923 "parser\\epparser.c"
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 128: /* actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN SEMICOLON */
#line 880 "parser\\epparser.lemon"
{
    ps->gen << "DoActions(" << yymsp[-4].minor.yy0->data << "(" << yymsp[-2].minor.yy0->data << "))" << std::endl;
    delete yymsp[-4].minor.yy0; delete yymsp[-2].minor.yy0;
}
#line 3932 "parser\\epparser.c"
        break;
      default:
      /* (129) program ::= chunks */ yytestcase(yyruleno==129);
      /* (130) chunks ::= */ yytestcase(yyruleno==130);
      /* (131) chunks ::= chunks chunk */ yytestcase(yyruleno==131);
      /* (132) chunk ::= import_chunk SEMICOLON */ yytestcase(yyruleno==132);
      /* (133) chunk ::= fdef_chunk */ yytestcase(yyruleno==133);
      /* (134) chunk ::= fdecl_chunk */ yytestcase(yyruleno==134);
      /* (135) chunk ::= object_chunk */ yytestcase(yyruleno==135);
      /* (136) chunk ::= vdef_stmt SEMICOLON */ yytestcase(yyruleno==136);
      /* (137) chunk ::= vdefAssign_global_stmt SEMICOLON */ yytestcase(yyruleno==137);
      /* (138) chunk ::= cdef_global_stmt SEMICOLON */ yytestcase(yyruleno==138);
      /* (139) stmt ::= bodyStmt */ yytestcase(yyruleno==139);
      /* (140) stmt ::= return_stmt SEMICOLON */ yytestcase(yyruleno==140);
      /* (141) blockStmt ::= lbracket return_stmt SEMICOLON rbracket */ yytestcase(yyruleno==141);
      /* (142) blockStmt ::= lbracket bodyStmtList rbracket */ yytestcase(yyruleno==142);
      /* (143) blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket */ yytestcase(yyruleno==143);
      /* (144) bodyStmt ::= blockStmt */ yytestcase(yyruleno==144);
      /* (145) bodyStmt ::= SEMICOLON */ yytestcase(yyruleno==145);
      /* (146) bodyStmt ::= vdef_stmt SEMICOLON */ yytestcase(yyruleno==146);
      /* (147) bodyStmt ::= vdefAssign_stmt SEMICOLON */ yytestcase(yyruleno==147);
      /* (148) bodyStmt ::= cdef_stmt SEMICOLON */ yytestcase(yyruleno==148);
      /* (149) bodyStmt ::= assign_stmt SEMICOLON */ yytestcase(yyruleno==149);
      /* (150) bodyStmt ::= actionStmt */ yytestcase(yyruleno==150);
      /* (151) bodyStmt ::= if_stmt */ yytestcase(yyruleno==151);
      /* (152) bodyStmt ::= while_stmt */ yytestcase(yyruleno==152);
      /* (153) bodyStmt ::= for_stmt */ yytestcase(yyruleno==153);
      /* (154) bodyStmt ::= foreach_stmt */ yytestcase(yyruleno==154);
      /* (155) bodyStmt ::= continue_stmt SEMICOLON */ yytestcase(yyruleno==155);
      /* (156) bodyStmt ::= break_stmt SEMICOLON */ yytestcase(yyruleno==156);
      /* (157) bodyStmtList ::= bodyStmt */ yytestcase(yyruleno==157);
      /* (158) bodyStmtList ::= bodyStmtList bodyStmt */ yytestcase(yyruleno==158);
      /* (159) commaSkippable ::= COMMA */ yytestcase(yyruleno==159);
      /* (160) commaSkippable ::= */ yytestcase(yyruleno==160);
      /* (161) if_block ::= if_header stmt */ yytestcase(yyruleno==161);
      /* (162) if_block ::= if_block elif_header stmt */ yytestcase(yyruleno==162);
      /* (163) for_init_stmt_nonEmpty ::= vdef_stmt */ yytestcase(yyruleno==163);
      /* (164) for_init_stmt_nonEmpty ::= vdefAssign_stmt */ yytestcase(yyruleno==164);
      /* (165) for_init_stmt_nonEmpty ::= cdef_stmt */ yytestcase(yyruleno==165);
      /* (166) for_init_stmt_nonEmpty ::= assign_stmt */ yytestcase(yyruleno==166);
      /* (167) for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty */ yytestcase(yyruleno==167);
      /* (168) for_init_stmt ::= for_init_stmt_nonEmpty */ yytestcase(yyruleno==168);
      /* (169) for_init_stmt ::= */ yytestcase(yyruleno==169);
      /* (170) for_action_stmt_nonEmpty ::= assign_stmt */ yytestcase(yyruleno==170);
      /* (171) for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty */ yytestcase(yyruleno==171);
      /* (172) for_action_stmt ::= */ yytestcase(yyruleno==172);
      /* (173) for_action_stmt ::= for_action_stmt_nonEmpty */ yytestcase(yyruleno==173);
        break;
/********** End reduce actions ************************************************/
  };
  assert( yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yyact = yy_find_reduce_action(yymsp[yysize].stateno,(YYCODETYPE)yygoto);

  /* There are no SHIFTREDUCE actions on nonterminals because the table
  ** generator has simplified them to pure REDUCE actions. */
  assert( !(yyact>YY_MAX_SHIFT && yyact<=YY_MAX_SHIFTREDUCE) );

  /* It is not possible for a REDUCE to be followed by an error */
  assert( yyact!=YY_ERROR_ACTION );

  yymsp += yysize+1;
  yypParser->yytos = yymsp;
  yymsp->stateno = (YYACTIONTYPE)yyact;
  yymsp->major = (YYCODETYPE)yygoto;
  yyTraceShift(yypParser, yyact, "... then shift");
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/
#line 32 "parser\\epparser.lemon"

    throw_error(-1, "Unrecoverable error");
#line 4022 "parser\\epparser.c"
/************ End %parse_failure code *****************************************/
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  ParseTOKENTYPE yyminor         /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN yyminor
/************ Begin %syntax_error code ****************************************/
/************ End %syntax_error code ******************************************/
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  assert( yypParser->yytos==yypParser->yystack );
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/
/*********** End %parse_accept code *******************************************/
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  unsigned int yyact;   /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  yypParser = (yyParser*)yyp;
  assert( yypParser->yytos!=0 );
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    int stateno = yypParser->yytos->stateno;
    if( stateno < YY_MIN_REDUCE ){
      fprintf(yyTraceFILE,"%sInput '%s' in state %d\n",
              yyTracePrompt,yyTokenName[yymajor],stateno);
    }else{
      fprintf(yyTraceFILE,"%sInput '%s' with pending reduce %d\n",
              yyTracePrompt,yyTokenName[yymajor],stateno-YY_MIN_REDUCE);
    }
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact >= YY_MIN_REDUCE ){
      yy_reduce(yypParser,yyact-YY_MIN_REDUCE,yymajor,yyminor);
    }else if( yyact <= YY_MAX_SHIFTREDUCE ){
      yy_shift(yypParser,yyact,yymajor,yyminor);
#ifndef YYNOERRORRECOVERY
      yypParser->yyerrcnt--;
#endif
      yymajor = YYNOCODE;
    }else if( yyact==YY_ACCEPT_ACTION ){
      yypParser->yytos--;
      yy_accept(yypParser);
      return;
    }else{
      assert( yyact == YY_ERROR_ACTION );
      yyminorunion.yy0 = yyminor;
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminor);
      }
      yymx = yypParser->yytos->major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor, &yyminorunion);
        yymajor = YYNOCODE;
      }else{
        while( yypParser->yytos >= yypParser->yystack
            && yymx != YYERRORSYMBOL
            && (yyact = yy_find_reduce_action(
                        yypParser->yytos->stateno,
                        YYERRORSYMBOL)) >= YY_MIN_REDUCE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yytos < yypParser->yystack || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
          yypParser->yyerrcnt = -1;
#endif
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor, yyminor);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor, yyminor);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
        yypParser->yyerrcnt = -1;
#endif
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yytos>yypParser->yystack );
#ifndef NDEBUG
  if( yyTraceFILE ){
    yyStackEntry *i;
    char cDiv = '[';
    fprintf(yyTraceFILE,"%sReturn. Stack=",yyTracePrompt);
    for(i=&yypParser->yystack[1]; i<=yypParser->yytos; i++){
      fprintf(yyTraceFILE,"%c%s", cDiv, yyTokenName[i->major]);
      cDiv = ' ';
    }
    fprintf(yyTraceFILE,"]\n");
  }
#endif
  return;
}
#line 888 "parser\\epparser.lemon"


PyGenerator* pGen;
ClosureManager* closure;

std::string ParseString(const std::string& fname, const std::string& code, bool addComment)
{
    // Module name from fname
    // last \/ ~ first .
    auto lpos = fname.find_last_of("\\/");
    if(lpos == std::string::npos) lpos = 0;
    else lpos++;
    auto rpos = fname.find_first_of(".", lpos);
    if(rpos == std::string::npos) rpos = fname.size();
    currentModule = fname.substr(lpos, rpos - lpos);

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(stdout, "--");
#endif

    // Main code
    Tokenizer tok(code);
    void* pParser = ParseAlloc (malloc);
    ParserStruct ps;
    Token* token;
    currentTokenizingLine = 0;
    pGen = &ps.gen;
    closure = &ps.closure;
    functionCalledInMultipleActions = false;

    if(PARSER_DEBUG) std::cout << "Parsing string [[[\n" << code.c_str() << "\n]]]\n";
    if(MAP_DEBUG) {
        ps.gen <<
            "try:\n"
            "   MDBG_LOG = GetEUDNamespace()['MDBG_LOG']\n"
            "   MDBG_PUSHF = GetEUDNamespace()['MDBG_PUSHF']\n"
            "   MDBG_POPF = GetEUDNamespace()['MDBG_POPF']\n"
            "except KeyError:\n"
            "    mdbg_dbepd = EPD(Db(b'0123456789ABCDEFFEDCBA9876543210' + bytes(32 * 2048)))\n"
            "    mdbg_dbc = EUDVariable()\n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_LOG(line):\n"
            "        lIdf = b2i4(u2b('%4d' % line))\n"
            "        DoActions(SetMemoryEPD(mdbg_dbepd + 3 + mdbg_dbc, SetTo, lIdf))\n"
            "    \n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_PUSHF(f_name, m_name):\n"
            "        global mdbg_dbc\n"
            "        data = ((u2b(m_name) + bytes(12))[:12] + b'   0' + (u2b(f_name) + bytes(16))[:16])\n"
            "        mdbg_dbc += 8\n"
            "        DoActions([SetMemoryEPD(mdbg_dbepd + i + mdbg_dbc, SetTo, b2i4(data, i * 4)) for i in range(8)])\n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_POPF():\n"
            "        global mdbg_dbc\n"
            "        DoActions([SetMemoryEPD(mdbg_dbepd + i + mdbg_dbc, SetTo, 0) for i in range(8)])\n"
            "        mdbg_dbc -= 8\n"
            "\n";
    }

    tmpIndex = 1;
    resetParserErrorNum();
    while ((token = tok.getToken()) != nullptr) {
        if (currentTokenizingLine != tok.getCurrentLine()) {
            if(addComment) {
                currentTokenizingLine = tok.getCurrentLine();
                ps.gen << "# (Line " << currentTokenizingLine << ") " << trim(tok.getCurrentLineString()) << std::endl;
                if(MAP_DEBUG && !currentFunction.empty()) {
                    ps.gen << "MDBG_LOG(" << currentTokenizingLine << ")" << std::endl;
                }
            }
            if(PARSER_DEBUG) printf("# reading line %s\n", tok.getCurrentLineString().c_str());
        }
        if (tokenTypeConv(token)) {
            Parse (pParser, token->type, token, &ps);
        }
        else {
            throw_error(8104, "Invalid token");
        }
    }
    Parse (pParser, 0, nullptr, &ps);
    ParseFree(pParser, free );

    std::string ret = iwCollapse(ps.gen.str());
    if(getParseErrorNum() > 0) {
        ret += "\nraise RuntimeError('Compile error')\n";
    }

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(NULL, "--");
#endif

    return ret;
}
#line 4349 "parser\\epparser.c"
