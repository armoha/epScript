/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include <assert.h>
#include <string>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <regex>

#include "generator/pygen.h"
#include "generator/closure.h"
#include "parser.h"
#include "tokenAdapter.h"
#include "parserUtilities.h"

struct ParserStruct {
   PyGenerator gen;
    ClosureManager closure;
};

int currentTokenizingLine;
int lambdaIndex;
std::string currentFunction;
std::string currentModule;
std::string currentFile;
bool PARSER_DEBUG = false;
bool MAP_DEBUG = false;

/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 144
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token*
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy287;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL  ParserStruct* ps ;
#define ParseARG_PDECL , ParserStruct* ps 
#define ParseARG_FETCH  ParserStruct* ps  = yypParser->ps 
#define ParseARG_STORE yypParser->ps  = ps 
#define YYNSTATE 361
#define YYNRULE 181
#define YYERRORSYMBOL 75
#define YYERRSYMDT yy287
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (8755)
static const YYACTIONTYPE yy_action[] = {
        /*     0 */   470, 470, 470, 470, 470, 470, 470, 470, 470, 470,
        /*    10 */   470, 68, 67, 69, 71, 70, 76, 75, 73, 74,
        /*    20 */    72, 235, 470, 19, 81, 346, 470, 470, 492, 417,
        /*    30 */   470, 470, 470, 231, 470, 470, 82, 470, 470, 29,
        /*    40 */   470, 313, 172, 230, 470, 470, 470, 470, 470, 470,
        /*    50 */   470, 470, 210, 492, 417, 11, 276, 288, 79, 492,
        /*    60 */   417, 480, 470, 470, 470, 470, 470, 470, 470, 470,
        /*    70 */   470, 471, 471, 471, 471, 471, 471, 471, 471, 471,
        /*    80 */   471, 471, 68, 67, 69, 71, 70, 76, 75, 73,
        /*    90 */    74, 72, 415, 471, 19, 81, 346, 471, 471, 494,
        /*   100 */    82, 471, 471, 471, 229, 471, 471, 82, 471, 471,
        /*   110 */    27, 471, 28, 172, 251, 471, 471, 471, 471, 471,
        /*   120 */   471, 471, 471, 210, 494, 490, 11, 276, 289, 347,
        /*   130 */   494, 490, 482, 471, 471, 471, 471, 471, 471, 471,
        /*   140 */   471, 471, 472, 472, 472, 472, 472, 472, 472, 472,
        /*   150 */   472, 472, 472, 68, 67, 69, 71, 70, 76, 75,
        /*   160 */    73, 74, 72, 331, 472, 19, 81, 346, 472, 472,
        /*   170 */    88, 439, 472, 472, 472, 354, 472, 472, 375, 472,
        /*   180 */   472, 488, 472, 488, 172, 352, 472, 472, 472, 472,
        /*   190 */   472, 472, 472, 472, 210, 419, 85, 11, 276, 290,
        /*   200 */   330, 419, 439, 23, 472, 472, 472, 472, 472, 472,
        /*   210 */   472, 472, 472, 473, 473, 473, 473, 473, 473, 473,
        /*   220 */   473, 473, 473, 473, 68, 67, 69, 71, 70, 76,
        /*   230 */    75, 73, 74, 72, 443, 473, 19, 81, 346, 473,
        /*   240 */   473, 518, 441, 473, 473, 473, 420, 473, 473, 519,
        /*   250 */   473, 473, 420, 473, 24, 172, 313, 473, 473, 473,
        /*   260 */   473, 473, 473, 473, 473, 210, 518, 382, 11, 276,
        /*   270 */   315, 382, 382, 441, 519, 473, 473, 473, 473, 473,
        /*   280 */   473, 473, 473, 473, 474, 474, 474, 474, 474, 474,
        /*   290 */   474, 474, 474, 474, 474, 68, 67, 69, 71, 70,
        /*   300 */    76, 75, 73, 74, 72, 257, 474, 19, 81, 346,
        /*   310 */   474, 474, 520, 525, 474, 474, 474, 91, 474, 474,
        /*   320 */   521, 474, 474, 349, 474, 246, 172, 348, 474, 474,
        /*   330 */   474, 474, 474, 474, 474, 474, 210, 520, 383, 11,
        /*   340 */   276, 295, 383, 383, 525, 521, 474, 474, 474, 474,
        /*   350 */   474, 474, 474, 474, 474, 475, 475, 475, 475, 475,
        /*   360 */   475, 475, 475, 475, 475, 475, 68, 67, 69, 71,
        /*   370 */    70, 76, 75, 73, 74, 72, 363, 475, 19, 81,
        /*   380 */   346, 475, 475, 313, 172, 475, 475, 475, 347, 475,
        /*   390 */   475, 14, 475, 475, 210, 475, 16, 11, 275, 475,
        /*   400 */   475, 475, 475, 475, 475, 475, 475, 171, 363, 3,
        /*   410 */   242, 363, 26, 363, 363, 363, 523, 475, 475, 475,
        /*   420 */   475, 475, 475, 475, 475, 475, 388, 528, 388, 363,
        /*   430 */   388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
        /*   440 */   388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
        /*   450 */   388, 364, 388, 388, 388, 388, 388, 388, 388, 172,
        /*   460 */   388, 388, 388, 388, 388, 388, 388, 388, 388, 175,
        /*   470 */   388, 526, 11, 170, 388, 388, 388, 388, 388, 388,
        /*   480 */   388, 388, 84, 364, 543, 12, 364, 136, 364, 364,
        /*   490 */   364, 134, 388, 388, 388, 388, 388, 388, 388, 388,
        /*   500 */   388, 389, 526, 389, 364, 389, 389, 389, 389, 389,
        /*   510 */   389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
        /*   520 */   389, 389, 389, 389, 389, 389, 365, 389, 389, 389,
        /*   530 */   389, 389, 389, 389, 522, 389, 389, 389, 389, 389,
        /*   540 */   389, 389, 389, 389, 100, 389, 82, 172, 99, 389,
        /*   550 */   389, 389, 389, 389, 389, 389, 389, 211, 365, 522,
        /*   560 */    11, 365, 126, 365, 365, 365, 125, 389, 389, 389,
        /*   570 */   389, 389, 389, 389, 389, 389, 390, 188, 390, 365,
        /*   580 */   390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
        /*   590 */   390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
        /*   600 */   390, 366, 390, 390, 390, 390, 390, 390, 390, 82,
        /*   610 */   390, 390, 390, 390, 390, 390, 390, 390, 390, 124,
        /*   620 */   390, 177, 172, 123, 390, 390, 390, 390, 390, 390,
        /*   630 */   390, 390, 208, 366, 430, 11, 366, 121, 366, 366,
        /*   640 */   366, 116, 390, 390, 390, 390, 390, 390, 390, 390,
        /*   650 */   390, 393, 98, 393, 366, 393, 393, 393, 393, 393,
        /*   660 */   393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
        /*   670 */   393, 393, 393, 393, 393, 393, 367, 393, 393, 393,
        /*   680 */   393, 393, 393, 393, 82, 393, 393, 393, 393, 393,
        /*   690 */   393, 393, 393, 393, 115, 393, 278, 172, 179, 393,
        /*   700 */   393, 393, 393, 393, 393, 393, 393, 206, 367, 481,
        /*   710 */    11, 367, 56, 367, 367, 367, 327, 393, 393, 393,
        /*   720 */   393, 393, 393, 393, 393, 393, 392, 326, 392, 367,
        /*   730 */   392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
        /*   740 */   392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
        /*   750 */   392, 368, 392, 392, 392, 392, 392, 392, 392, 82,
        /*   760 */   392, 392, 392, 392, 392, 392, 392, 392, 392, 151,
        /*   770 */   392, 324, 172, 323, 392, 392, 392, 392, 392, 392,
        /*   780 */   392, 392, 219, 368, 483, 11, 368, 321, 368, 368,
        /*   790 */   368, 150, 392, 392, 392, 392, 392, 392, 392, 392,
        /*   800 */   392, 394, 320, 394, 368, 394, 394, 394, 394, 394,
        /*   810 */   394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
        /*   820 */   394, 394, 394, 394, 394, 394, 369, 394, 394, 394,
        /*   830 */   394, 394, 394, 394, 149, 394, 394, 394, 394, 394,
        /*   840 */   394, 394, 394, 394, 318, 394, 317, 172, 148, 394,
        /*   850 */   394, 394, 394, 394, 394, 394, 394, 166, 369, 18,
        /*   860 */    11, 369, 142, 369, 369, 369, 143, 394, 394, 394,
        /*   870 */   394, 394, 394, 394, 394, 394, 395, 238, 395, 369,
        /*   880 */   395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
        /*   890 */   395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
        /*   900 */   395, 370, 395, 395, 395, 395, 395, 395, 395, 505,
        /*   910 */   395, 395, 395, 395, 395, 395, 395, 395, 395, 38,
        /*   920 */   395, 10, 172, 508, 395, 395, 395, 395, 395, 395,
        /*   930 */   395, 395, 165, 370, 37, 11, 370, 514, 370, 370,
        /*   940 */   370, 9, 395, 395, 395, 395, 395, 395, 395, 395,
        /*   950 */   395, 396, 36, 396, 370, 396, 396, 396, 396, 396,
        /*   960 */   396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
        /*   970 */   396, 396, 396, 396, 396, 396, 371, 396, 396, 396,
        /*   980 */   396, 396, 396, 396, 221, 396, 396, 396, 396, 396,
        /*   990 */   396, 396, 396, 396, 223, 396, 189, 172, 300, 396,
        /*  1000 */   396, 396, 396, 396, 396, 396, 396, 164, 371, 533,
        /*  1010 */    11, 371, 536, 371, 371, 371, 537, 396, 396, 396,
        /*  1020 */   396, 396, 396, 396, 396, 396, 398, 538, 398, 371,
        /*  1030 */   398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
        /*  1040 */   398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
        /*  1050 */   398, 372, 398, 398, 398, 398, 398, 398, 398, 17,
        /*  1060 */   398, 398, 398, 398, 398, 398, 398, 398, 398, 294,
        /*  1070 */   398, 108, 172, 541, 398, 398, 398, 398, 398, 398,
        /*  1080 */   398, 398, 163, 372, 422, 11, 372, 286, 372, 372,
        /*  1090 */   372, 90, 398, 398, 398, 398, 398, 398, 398, 398,
        /*  1100 */   398, 399, 140, 399, 372, 399, 399, 399, 399, 399,
        /*  1110 */   399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
        /*  1120 */   399, 399, 399, 399, 399, 399, 381, 399, 399, 399,
        /*  1130 */   399, 399, 399, 399, 139, 399, 399, 399, 399, 399,
        /*  1140 */   399, 399, 399, 399, 138, 399, 283, 172, 245, 399,
        /*  1150 */   399, 399, 399, 399, 399, 399, 399, 162, 381, 244,
        /*  1160 */    11, 381, 83, 381, 381, 381, 89, 399, 399, 399,
        /*  1170 */   399, 399, 399, 399, 399, 399, 400, 225, 400, 381,
        /*  1180 */   400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
        /*  1190 */   400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
        /*  1200 */   400, 380, 400, 400, 400, 400, 400, 400, 400, 252,
        /*  1210 */   400, 400, 400, 400, 400, 400, 400, 400, 400, 253,
        /*  1220 */   400, 131, 172, 132, 400, 400, 400, 400, 400, 400,
        /*  1230 */   400, 400, 161, 380, 129, 11, 380, 279, 380, 380,
        /*  1240 */   380, 280, 400, 400, 400, 400, 400, 400, 400, 400,
        /*  1250 */   400, 401, 239, 401, 380, 401, 401, 401, 401, 401,
        /*  1260 */   401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
        /*  1270 */   401, 401, 401, 401, 401, 401, 387, 401, 401, 401,
        /*  1280 */   401, 401, 401, 401, 248, 401, 401, 401, 401, 401,
        /*  1290 */   401, 401, 401, 401, 273, 401, 260, 172, 241, 401,
        /*  1300 */   401, 401, 401, 401, 401, 401, 401, 160, 387, 255,
        /*  1310 */    11, 387, 314, 387, 387, 387, 186, 401, 401, 401,
        /*  1320 */   401, 401, 401, 401, 401, 401, 402, 187, 402, 387,
        /*  1330 */   402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
        /*  1340 */   402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
        /*  1350 */   402, 416, 402, 402, 402, 402, 402, 402, 402, 185,
        /*  1360 */   402, 402, 402, 402, 402, 402, 402, 402, 402, 240,
        /*  1370 */   402, 263, 172, 544, 402, 402, 402, 402, 402, 402,
        /*  1380 */   402, 402, 209, 373, 373, 11, 240, 373, 416, 224,
        /*  1390 */   271, 421, 402, 402, 402, 402, 402, 402, 402, 402,
        /*  1400 */   402, 403, 261, 403, 544, 403, 403, 403, 403, 403,
        /*  1410 */   403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
        /*  1420 */   403, 403, 403, 403, 403, 403, 361, 403, 403, 403,
        /*  1430 */   403, 403, 403, 403, 544, 403, 403, 403, 403, 403,
        /*  1440 */   403, 403, 403, 403, 544, 403, 285, 172, 544, 403,
        /*  1450 */   403, 403, 403, 403, 403, 403, 403, 159, 101, 544,
        /*  1460 */    11, 353, 544, 287, 183, 94, 246, 403, 403, 403,
        /*  1470 */   403, 403, 403, 403, 403, 403, 404, 544, 404, 93,
        /*  1480 */   404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
        /*  1490 */   404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
        /*  1500 */   404, 362, 404, 404, 404, 404, 404, 404, 404, 172,
        /*  1510 */   404, 404, 404, 404, 404, 404, 404, 404, 404, 158,
        /*  1520 */   404, 544, 11, 544, 404, 404, 404, 404, 404, 404,
        /*  1530 */   404, 404, 544, 362, 544, 544, 362, 544, 362, 362,
        /*  1540 */   362, 544, 404, 404, 404, 404, 404, 404, 404, 404,
        /*  1550 */   404, 405, 544, 405, 362, 405, 405, 405, 405, 405,
        /*  1560 */   405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
        /*  1570 */   405, 405, 405, 405, 405, 405, 34, 405, 405, 405,
        /*  1580 */   405, 405, 405, 405, 544, 405, 405, 405, 405, 405,
        /*  1590 */   405, 405, 405, 405, 544, 405, 544, 172, 544, 405,
        /*  1600 */   405, 405, 405, 405, 405, 405, 405, 220, 356, 376,
        /*  1610 */    11, 385, 355, 449, 270, 385, 385, 405, 405, 405,
        /*  1620 */   405, 405, 405, 405, 405, 405, 406, 544, 406, 544,
        /*  1630 */   406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
        /*  1640 */   406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
        /*  1650 */   406, 544, 406, 406, 406, 406, 406, 406, 406, 544,
        /*  1660 */   406, 406, 406, 406, 406, 406, 406, 406, 406, 544,
        /*  1670 */   406, 308, 307, 5, 406, 406, 406, 406, 406, 406,
        /*  1680 */   406, 406, 374, 374, 386, 544, 374, 544, 386, 386,
        /*  1690 */   544, 544, 406, 406, 406, 406, 406, 406, 406, 406,
        /*  1700 */   406, 407, 544, 407, 544, 407, 407, 407, 407, 407,
        /*  1710 */   407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
        /*  1720 */   407, 407, 407, 407, 407, 407, 544, 407, 407, 407,
        /*  1730 */   407, 407, 407, 407, 544, 407, 407, 407, 407, 407,
        /*  1740 */   407, 407, 407, 407, 544, 407, 544, 544, 544, 407,
        /*  1750 */   407, 407, 407, 407, 407, 407, 407, 284, 544, 544,
        /*  1760 */   544, 87, 281, 544, 544, 544, 544, 407, 407, 407,
        /*  1770 */   407, 407, 407, 407, 407, 407, 408, 544, 408, 544,
        /*  1780 */   408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
        /*  1790 */   408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
        /*  1800 */   408, 544, 408, 408, 408, 408, 408, 408, 408, 544,
        /*  1810 */   408, 408, 408, 408, 408, 408, 408, 408, 408, 544,
        /*  1820 */   408, 544, 172, 172, 408, 408, 408, 408, 408, 408,
        /*  1830 */   408, 408, 157, 156, 544, 11, 11, 544, 544, 544,
        /*  1840 */   544, 544, 408, 408, 408, 408, 408, 408, 408, 408,
        /*  1850 */   408, 409, 544, 409, 544, 409, 409, 409, 409, 409,
        /*  1860 */   409, 409, 409, 409, 409, 409, 409, 409, 409, 409,
        /*  1870 */   409, 409, 409, 409, 409, 409, 544, 409, 409, 409,
        /*  1880 */   409, 409, 409, 409, 544, 409, 409, 409, 409, 409,
        /*  1890 */   409, 409, 409, 409, 544, 409, 544, 172, 172, 409,
        /*  1900 */   409, 409, 409, 409, 409, 409, 409, 107, 106, 544,
        /*  1910 */    11, 11, 544, 544, 544, 544, 544, 409, 409, 409,
        /*  1920 */   409, 409, 409, 409, 409, 409, 410, 544, 410, 544,
        /*  1930 */   410, 410, 410, 410, 410, 410, 410, 410, 410, 410,
        /*  1940 */   410, 410, 410, 410, 410, 410, 410, 410, 410, 410,
        /*  1950 */   410, 544, 410, 410, 410, 410, 410, 410, 410, 544,
        /*  1960 */   410, 410, 410, 410, 410, 410, 410, 410, 410, 544,
        /*  1970 */   410, 544, 172, 172, 410, 410, 410, 410, 410, 410,
        /*  1980 */   410, 410, 105, 104, 544, 11, 11, 544, 544, 544,
        /*  1990 */   544, 544, 410, 410, 410, 410, 410, 410, 410, 410,
        /*  2000 */   410, 411, 544, 411, 544, 411, 411, 411, 411, 411,
        /*  2010 */   411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
        /*  2020 */   411, 411, 411, 411, 411, 411, 544, 411, 411, 411,
        /*  2030 */   411, 411, 411, 411, 544, 411, 411, 411, 411, 411,
        /*  2040 */   411, 411, 411, 411, 544, 411, 544, 172, 172, 411,
        /*  2050 */   411, 411, 411, 411, 411, 411, 411, 103, 102, 544,
        /*  2060 */    11, 11, 544, 544, 544, 544, 544, 411, 411, 411,
        /*  2070 */   411, 411, 411, 411, 411, 411, 507, 544, 507, 544,
        /*  2080 */   507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
        /*  2090 */   507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
        /*  2100 */   507, 544, 507, 507, 507, 507, 507, 507, 507, 544,
        /*  2110 */   507, 507, 507, 507, 507, 507, 507, 507, 507, 544,
        /*  2120 */   507, 544, 172, 172, 507, 507, 507, 507, 507, 507,
        /*  2130 */   507, 507, 155, 154, 544, 11, 11, 544, 544, 544,
        /*  2140 */   544, 544, 507, 507, 507, 507, 507, 507, 507, 507,
        /*  2150 */   507, 510, 544, 510, 544, 510, 510, 510, 510, 510,
        /*  2160 */   510, 510, 510, 510, 510, 510, 510, 510, 510, 510,
        /*  2170 */   510, 510, 510, 510, 510, 510, 544, 510, 510, 510,
        /*  2180 */   510, 510, 510, 510, 544, 510, 510, 510, 510, 510,
        /*  2190 */   510, 510, 510, 510, 544, 510, 544, 172, 172, 510,
        /*  2200 */   510, 510, 510, 510, 510, 510, 510, 218, 217, 544,
        /*  2210 */    11, 11, 544, 544, 544, 544, 544, 510, 510, 510,
        /*  2220 */   510, 510, 510, 510, 510, 510, 516, 544, 516, 544,
        /*  2230 */   516, 516, 516, 516, 516, 516, 516, 516, 516, 516,
        /*  2240 */   516, 516, 516, 516, 516, 516, 516, 516, 516, 516,
        /*  2250 */   516, 544, 516, 516, 516, 516, 516, 516, 516, 544,
        /*  2260 */   516, 516, 516, 516, 516, 516, 516, 516, 516, 544,
        /*  2270 */   516, 544, 172, 172, 516, 516, 516, 516, 516, 516,
        /*  2280 */   516, 516, 216, 147, 544, 11, 11, 544, 544, 544,
        /*  2290 */   544, 544, 516, 516, 516, 516, 516, 516, 516, 516,
        /*  2300 */   516, 532, 544, 532, 544, 532, 532, 532, 532, 532,
        /*  2310 */   532, 532, 532, 532, 532, 532, 532, 532, 532, 532,
        /*  2320 */   532, 532, 532, 532, 532, 532, 544, 532, 532, 532,
        /*  2330 */   532, 532, 532, 532, 544, 532, 532, 532, 532, 532,
        /*  2340 */   532, 532, 532, 532, 544, 532, 544, 172, 172, 532,
        /*  2350 */   532, 532, 532, 532, 532, 532, 532, 146, 145, 544,
        /*  2360 */    11, 11, 544, 544, 544, 544, 544, 532, 532, 532,
        /*  2370 */   532, 532, 532, 532, 532, 532, 535, 544, 535, 544,
        /*  2380 */   535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        /*  2390 */   535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
        /*  2400 */   535, 544, 535, 535, 535, 535, 535, 535, 535, 544,
        /*  2410 */   535, 535, 535, 535, 535, 535, 535, 535, 535, 544,
        /*  2420 */   535, 544, 172, 172, 535, 535, 535, 535, 535, 535,
        /*  2430 */   535, 535, 144, 204, 544, 11, 11, 544, 544, 544,
        /*  2440 */   544, 544, 535, 535, 535, 535, 535, 535, 535, 535,
        /*  2450 */   535, 513, 544, 513, 544, 513, 513, 513, 513, 513,
        /*  2460 */   513, 513, 513, 513, 513, 513, 513, 513, 513, 513,
        /*  2470 */   513, 513, 513, 513, 513, 513, 544, 513, 513, 513,
        /*  2480 */   513, 513, 513, 513, 544, 513, 513, 513, 513, 513,
        /*  2490 */   513, 513, 513, 513, 544, 513, 544, 172, 172, 513,
        /*  2500 */   513, 513, 513, 513, 513, 513, 513, 203, 202, 544,
        /*  2510 */    11, 11, 544, 544, 544, 544, 544, 513, 513, 513,
        /*  2520 */   513, 513, 513, 513, 513, 513, 397, 544, 397, 544,
        /*  2530 */   397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
        /*  2540 */   397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
        /*  2550 */   397, 544, 397, 397, 397, 397, 397, 397, 397, 544,
        /*  2560 */   397, 397, 397, 397, 397, 397, 397, 397, 397, 544,
        /*  2570 */   397, 544, 172, 172, 397, 397, 397, 397, 397, 397,
        /*  2580 */   397, 397, 201, 200, 544, 11, 11, 544, 544, 544,
        /*  2590 */   544, 544, 397, 397, 397, 397, 397, 397, 397, 397,
        /*  2600 */   397, 512, 544, 191, 544, 512, 512, 512, 512, 512,
        /*  2610 */   512, 512, 512, 512, 512, 512, 512, 512, 512, 512,
        /*  2620 */   512, 512, 512, 512, 512, 512, 544, 512, 512, 512,
        /*  2630 */   512, 512, 512, 512, 544, 512, 512, 512, 512, 512,
        /*  2640 */   512, 512, 512, 512, 544, 512, 544, 172, 172, 512,
        /*  2650 */   512, 512, 512, 512, 512, 512, 512, 199, 198, 544,
        /*  2660 */    11, 11, 544, 544, 544, 544, 544, 512, 512, 512,
        /*  2670 */   512, 512, 512, 512, 512, 512, 446, 446, 446, 446,
        /*  2680 */   446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
        /*  2690 */   446, 446, 446, 446, 446, 446, 446, 544, 446, 446,
        /*  2700 */   350, 446, 446, 446, 544, 172, 446, 446, 446, 351,
        /*  2710 */   446, 446, 292, 446, 446, 197, 446, 544, 11, 544,
        /*  2720 */   446, 446, 446, 446, 446, 446, 446, 446, 544, 544,
        /*  2730 */   544, 544, 246, 544, 544, 544, 544, 544, 446, 446,
        /*  2740 */   446, 446, 446, 446, 446, 446, 446, 426, 426, 426,
        /*  2750 */   426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
        /*  2760 */   426, 426, 426, 426, 426, 426, 426, 426, 544, 426,
        /*  2770 */   426, 426, 426, 426, 426, 544, 172, 426, 426, 426,
        /*  2780 */   291, 426, 426, 292, 426, 426, 196, 426, 544, 11,
        /*  2790 */   544, 426, 426, 426, 426, 426, 426, 426, 426, 544,
        /*  2800 */   544, 544, 544, 246, 544, 544, 544, 544, 544, 426,
        /*  2810 */   426, 426, 426, 426, 426, 426, 426, 426, 434, 434,
        /*  2820 */   434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
        /*  2830 */   434, 434, 434, 434, 434, 434, 434, 434, 434, 544,
        /*  2840 */   434, 434, 434, 434, 434, 434, 544, 172, 434, 434,
        /*  2850 */   434, 282, 434, 434, 292, 434, 434, 195, 434, 544,
        /*  2860 */    11, 544, 434, 434, 434, 434, 434, 434, 434, 434,
        /*  2870 */   544, 544, 544, 544, 246, 544, 544, 544, 544, 544,
        /*  2880 */   434, 434, 434, 434, 434, 434, 434, 434, 434, 431,
        /*  2890 */   431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
        /*  2900 */   431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
        /*  2910 */   544, 431, 431, 431, 431, 431, 431, 544, 172, 431,
        /*  2920 */   431, 431, 544, 431, 431, 544, 431, 431, 194, 431,
        /*  2930 */   544, 11, 172, 431, 431, 431, 431, 431, 431, 431,
        /*  2940 */   431, 544, 193, 544, 544, 11, 544, 544, 544, 544,
        /*  2950 */   544, 431, 431, 431, 431, 431, 431, 431, 431, 431,
        /*  2960 */   432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
        /*  2970 */   432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
        /*  2980 */   432, 544, 432, 21, 432, 432, 432, 432, 544, 172,
        /*  2990 */   432, 432, 432, 544, 432, 432, 544, 432, 432, 192,
        /*  3000 */   432, 544, 11, 172, 432, 432, 432, 432, 432, 432,
        /*  3010 */   432, 432, 544, 215, 544, 544, 11, 544, 544, 544,
        /*  3020 */   544, 544, 432, 432, 432, 432, 432, 432, 432, 432,
        /*  3030 */   432, 433, 433, 433, 433, 433, 433, 433, 433, 433,
        /*  3040 */   433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
        /*  3050 */   433, 433, 544, 433, 20, 433, 433, 433, 433, 544,
        /*  3060 */   172, 433, 433, 433, 544, 433, 433, 544, 433, 433,
        /*  3070 */   214, 433, 544, 11, 172, 433, 433, 433, 433, 433,
        /*  3080 */   433, 433, 433, 544, 213, 544, 544, 11, 544, 544,
        /*  3090 */   544, 544, 544, 433, 433, 433, 433, 433, 433, 433,
        /*  3100 */   433, 433, 78, 456, 59, 60, 456, 66, 64, 63,
        /*  3110 */    62, 61, 65, 68, 67, 69, 71, 70, 76, 75,
        /*  3120 */    73, 74, 72, 544, 456, 19, 81, 346, 456, 456,
        /*  3130 */   544, 172, 456, 456, 456, 544, 456, 456, 544, 456,
        /*  3140 */   456, 212, 456, 544, 11, 544, 456, 456, 456, 456,
        /*  3150 */   456, 456, 456, 456, 544, 544, 544, 544, 544, 544,
        /*  3160 */   544, 544, 544, 544, 456, 456, 456, 456, 456, 456,
        /*  3170 */   456, 456, 456, 457, 457, 457, 457, 457, 457, 457,
        /*  3180 */   457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
        /*  3190 */   457, 73, 74, 72, 544, 457, 19, 81, 346, 457,
        /*  3200 */   457, 544, 544, 457, 457, 457, 544, 457, 457, 544,
        /*  3210 */   457, 457, 544, 457, 544, 544, 544, 457, 457, 457,
        /*  3220 */   457, 457, 457, 457, 457, 544, 544, 544, 544, 544,
        /*  3230 */   544, 544, 544, 544, 544, 457, 457, 457, 457, 457,
        /*  3240 */   457, 457, 457, 457, 458, 458, 458, 458, 458, 458,
        /*  3250 */   458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
        /*  3260 */   458, 458, 73, 74, 72, 544, 458, 19, 81, 346,
        /*  3270 */   458, 458, 544, 544, 458, 458, 458, 544, 458, 458,
        /*  3280 */   544, 458, 458, 544, 458, 544, 544, 544, 458, 458,
        /*  3290 */   458, 458, 458, 458, 458, 458, 544, 544, 544, 544,
        /*  3300 */   544, 544, 544, 544, 544, 544, 458, 458, 458, 458,
        /*  3310 */   458, 458, 458, 458, 458, 459, 459, 459, 459, 459,
        /*  3320 */   459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
        /*  3330 */   459, 459, 459, 459, 459, 459, 544, 459, 19, 81,
        /*  3340 */   346, 459, 459, 544, 544, 459, 459, 459, 544, 459,
        /*  3350 */   459, 544, 459, 459, 544, 459, 544, 544, 544, 459,
        /*  3360 */   459, 459, 459, 459, 459, 459, 459, 544, 544, 544,
        /*  3370 */   544, 544, 544, 544, 544, 544, 544, 459, 459, 459,
        /*  3380 */   459, 459, 459, 459, 459, 459, 460, 460, 460, 460,
        /*  3390 */   460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
        /*  3400 */   460, 460, 460, 460, 460, 460, 460, 544, 460, 19,
        /*  3410 */    81, 346, 460, 460, 544, 544, 460, 460, 460, 544,
        /*  3420 */   460, 460, 544, 460, 460, 544, 460, 544, 544, 544,
        /*  3430 */   460, 460, 460, 460, 460, 460, 460, 460, 544, 544,
        /*  3440 */   544, 544, 544, 544, 544, 544, 544, 544, 460, 460,
        /*  3450 */   460, 460, 460, 460, 460, 460, 460, 461, 461, 461,
        /*  3460 */   461, 461, 461, 461, 461, 461, 461, 461, 461, 461,
        /*  3470 */   461, 461, 461, 461, 461, 461, 461, 461, 544, 461,
        /*  3480 */    19, 81, 346, 461, 461, 544, 544, 461, 461, 461,
        /*  3490 */   544, 461, 461, 544, 461, 461, 544, 461, 544, 544,
        /*  3500 */   544, 461, 461, 461, 461, 461, 461, 461, 461, 544,
        /*  3510 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 461,
        /*  3520 */   461, 461, 461, 461, 461, 461, 461, 461, 462, 462,
        /*  3530 */   462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
        /*  3540 */   462, 462, 462, 462, 76, 75, 73, 74, 72, 544,
        /*  3550 */   462, 19, 81, 346, 462, 462, 544, 544, 462, 462,
        /*  3560 */   462, 544, 462, 462, 544, 462, 462, 544, 462, 544,
        /*  3570 */   544, 544, 462, 462, 462, 462, 462, 462, 462, 462,
        /*  3580 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  3590 */   462, 462, 462, 462, 462, 462, 462, 462, 462, 463,
        /*  3600 */   463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
        /*  3610 */   463, 463, 463, 463, 463, 76, 75, 73, 74, 72,
        /*  3620 */   544, 463, 19, 81, 346, 463, 463, 544, 544, 463,
        /*  3630 */   463, 463, 544, 463, 463, 544, 463, 463, 544, 463,
        /*  3640 */   544, 544, 544, 463, 463, 463, 463, 463, 463, 463,
        /*  3650 */   463, 544, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  3660 */   544, 463, 463, 463, 463, 463, 463, 463, 463, 463,
        /*  3670 */   464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
        /*  3680 */   464, 464, 464, 464, 71, 70, 76, 75, 73, 74,
        /*  3690 */    72, 544, 464, 19, 81, 346, 464, 464, 544, 544,
        /*  3700 */   464, 464, 464, 544, 464, 464, 544, 464, 464, 544,
        /*  3710 */   464, 544, 544, 544, 464, 464, 464, 464, 464, 464,
        /*  3720 */   464, 464, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  3730 */   544, 544, 464, 464, 464, 464, 464, 464, 464, 464,
        /*  3740 */   464, 465, 465, 465, 465, 465, 465, 465, 465, 465,
        /*  3750 */   465, 465, 465, 67, 69, 71, 70, 76, 75, 73,
        /*  3760 */    74, 72, 544, 465, 19, 81, 346, 465, 465, 544,
        /*  3770 */   544, 465, 465, 465, 544, 465, 465, 544, 465, 465,
        /*  3780 */   544, 465, 544, 544, 544, 465, 465, 465, 465, 465,
        /*  3790 */   465, 465, 465, 544, 544, 544, 544, 544, 544, 544,
        /*  3800 */   544, 544, 544, 465, 465, 465, 465, 465, 465, 465,
        /*  3810 */   465, 465, 466, 466, 466, 466, 466, 466, 466, 466,
        /*  3820 */   466, 466, 466, 466, 466, 69, 71, 70, 76, 75,
        /*  3830 */    73, 74, 72, 544, 466, 19, 81, 346, 466, 466,
        /*  3840 */   544, 544, 466, 466, 466, 544, 466, 466, 544, 466,
        /*  3850 */   466, 544, 466, 544, 544, 544, 466, 466, 466, 466,
        /*  3860 */   466, 466, 466, 466, 544, 544, 544, 544, 544, 544,
        /*  3870 */   544, 544, 544, 544, 466, 466, 466, 466, 466, 466,
        /*  3880 */   466, 466, 466, 476, 476, 476, 476, 476, 66, 64,
        /*  3890 */    63, 62, 61, 65, 68, 67, 69, 71, 70, 76,
        /*  3900 */    75, 73, 74, 72, 544, 476, 19, 81, 346, 476,
        /*  3910 */   476, 544, 544, 476, 476, 476, 544, 476, 476, 544,
        /*  3920 */   476, 476, 544, 476, 544, 544, 544, 476, 476, 476,
        /*  3930 */   476, 476, 476, 476, 476, 544, 544, 544, 544, 544,
        /*  3940 */   544, 544, 544, 544, 544, 476, 476, 476, 476, 476,
        /*  3950 */   476, 476, 476, 476, 477, 477, 477, 60, 477, 66,
        /*  3960 */    64, 63, 62, 61, 65, 68, 67, 69, 71, 70,
        /*  3970 */    76, 75, 73, 74, 72, 544, 477, 19, 81, 346,
        /*  3980 */   477, 477, 544, 544, 477, 477, 477, 544, 477, 477,
        /*  3990 */   544, 477, 477, 544, 477, 544, 544, 544, 477, 477,
        /*  4000 */   477, 477, 477, 477, 477, 477, 544, 544, 544, 544,
        /*  4010 */   544, 544, 544, 544, 544, 544, 477, 477, 477, 477,
        /*  4020 */   477, 477, 477, 477, 477, 447, 447, 447, 447, 447,
        /*  4030 */   447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
        /*  4040 */   447, 447, 447, 447, 447, 447, 544, 447, 447, 447,
        /*  4050 */   447, 447, 447, 544, 544, 447, 447, 447, 544, 447,
        /*  4060 */   447, 544, 447, 447, 544, 447, 544, 544, 544, 447,
        /*  4070 */   447, 447, 447, 447, 447, 447, 447, 544, 544, 544,
        /*  4080 */   544, 544, 544, 544, 544, 544, 544, 447, 447, 447,
        /*  4090 */   447, 447, 447, 447, 447, 447, 451, 451, 451, 451,
        /*  4100 */   451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
        /*  4110 */   451, 451, 451, 451, 451, 451, 451, 544, 451, 451,
        /*  4120 */   451, 451, 451, 451, 544, 544, 451, 451, 451, 544,
        /*  4130 */   451, 451, 544, 451, 451, 544, 451, 544, 544, 544,
        /*  4140 */   451, 451, 451, 451, 451, 451, 451, 451, 544, 544,
        /*  4150 */   544, 544, 544, 544, 544, 544, 544, 544, 451, 451,
        /*  4160 */   451, 451, 451, 451, 451, 451, 451, 452, 452, 452,
        /*  4170 */   452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
        /*  4180 */   452, 452, 452, 452, 452, 452, 452, 452, 544, 452,
        /*  4190 */   452, 452, 452, 452, 452, 544, 544, 452, 452, 452,
        /*  4200 */   544, 452, 452, 544, 452, 452, 544, 452, 544, 544,
        /*  4210 */   544, 452, 452, 452, 452, 452, 452, 452, 452, 544,
        /*  4220 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 452,
        /*  4230 */   452, 452, 452, 452, 452, 452, 452, 452, 453, 453,
        /*  4240 */   453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
        /*  4250 */   453, 453, 453, 453, 453, 453, 453, 453, 453, 544,
        /*  4260 */   453, 453, 453, 453, 453, 453, 544, 544, 453, 453,
        /*  4270 */   453, 544, 453, 453, 544, 453, 453, 544, 453, 544,
        /*  4280 */   544, 544, 453, 453, 453, 453, 453, 453, 453, 453,
        /*  4290 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  4300 */   453, 453, 453, 453, 453, 453, 453, 453, 453, 454,
        /*  4310 */   454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
        /*  4320 */   454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
        /*  4330 */   544, 454, 454, 454, 454, 454, 454, 544, 544, 454,
        /*  4340 */   454, 454, 544, 454, 454, 544, 454, 454, 544, 454,
        /*  4350 */   544, 544, 544, 454, 454, 454, 454, 454, 454, 454,
        /*  4360 */   454, 544, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  4370 */   544, 454, 454, 454, 454, 454, 454, 454, 454, 454,
        /*  4380 */   455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
        /*  4390 */   455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
        /*  4400 */   455, 544, 455, 455, 455, 455, 455, 455, 544, 544,
        /*  4410 */   455, 455, 455, 544, 455, 455, 544, 455, 455, 544,
        /*  4420 */   455, 544, 544, 544, 455, 455, 455, 455, 455, 455,
        /*  4430 */   455, 455, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  4440 */   544, 544, 455, 455, 455, 455, 455, 455, 455, 455,
        /*  4450 */   455, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        /*  4460 */   467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
        /*  4470 */   467, 467, 544, 467, 19, 81, 346, 467, 467, 544,
        /*  4480 */   544, 467, 467, 467, 544, 467, 467, 544, 467, 467,
        /*  4490 */   544, 467, 544, 544, 544, 467, 467, 467, 467, 467,
        /*  4500 */   467, 467, 467, 544, 544, 544, 544, 544, 544, 544,
        /*  4510 */   544, 544, 544, 467, 467, 467, 467, 467, 467, 467,
        /*  4520 */   467, 467, 468, 468, 468, 468, 468, 468, 468, 468,
        /*  4530 */   468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
        /*  4540 */   468, 468, 468, 544, 468, 19, 81, 346, 468, 468,
        /*  4550 */   544, 544, 468, 468, 468, 544, 468, 468, 544, 468,
        /*  4560 */   468, 544, 468, 544, 544, 544, 468, 468, 468, 468,
        /*  4570 */   468, 468, 468, 468, 544, 544, 544, 544, 544, 544,
        /*  4580 */   544, 544, 544, 544, 468, 468, 468, 468, 468, 468,
        /*  4590 */   468, 468, 468, 469, 469, 469, 469, 469, 469, 469,
        /*  4600 */   469, 469, 469, 469, 469, 469, 469, 469, 469, 469,
        /*  4610 */   469, 469, 469, 469, 544, 469, 19, 81, 346, 469,
        /*  4620 */   469, 544, 544, 469, 469, 469, 544, 469, 469, 544,
        /*  4630 */   469, 469, 544, 469, 544, 544, 544, 469, 469, 469,
        /*  4640 */   469, 469, 469, 469, 469, 544, 544, 544, 544, 544,
        /*  4650 */   544, 544, 544, 544, 544, 469, 469, 469, 469, 469,
        /*  4660 */   469, 469, 469, 469, 478, 478, 478, 478, 478, 66,
        /*  4670 */    64, 63, 62, 61, 65, 68, 67, 69, 71, 70,
        /*  4680 */    76, 75, 73, 74, 72, 544, 478, 19, 81, 346,
        /*  4690 */   478, 478, 544, 544, 478, 478, 478, 544, 478, 478,
        /*  4700 */   544, 478, 478, 544, 478, 544, 544, 544, 478, 478,
        /*  4710 */   478, 478, 478, 478, 478, 478, 544, 544, 544, 544,
        /*  4720 */   544, 544, 544, 544, 544, 544, 478, 478, 478, 478,
        /*  4730 */   478, 478, 478, 478, 478, 539, 539, 539, 539, 539,
        /*  4740 */   539, 539, 539, 539, 539, 539, 539, 539, 539, 539,
        /*  4750 */   539, 539, 539, 539, 539, 539, 544, 539, 539, 539,
        /*  4760 */   539, 539, 539, 544, 544, 539, 539, 539, 544, 539,
        /*  4770 */   539, 544, 539, 539, 544, 539, 544, 544, 544, 539,
        /*  4780 */   539, 539, 539, 539, 539, 539, 539, 544, 544, 544,
        /*  4790 */   544, 544, 544, 544, 544, 544, 544, 539, 539, 539,
        /*  4800 */   539, 539, 539, 539, 539, 539, 450, 450, 450, 450,
        /*  4810 */   450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
        /*  4820 */   450, 450, 450, 450, 450, 450, 450, 544, 450, 450,
        /*  4830 */   450, 450, 450, 450, 544, 544, 450, 450, 450, 544,
        /*  4840 */   450, 450, 544, 450, 450, 544, 450, 544, 544, 544,
        /*  4850 */   450, 450, 450, 450, 450, 450, 450, 450, 544, 544,
        /*  4860 */   544, 544, 544, 544, 544, 544, 544, 544, 450, 450,
        /*  4870 */   450, 450, 450, 450, 450, 450, 450, 437, 437, 437,
        /*  4880 */   437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
        /*  4890 */   437, 437, 437, 437, 437, 437, 437, 437, 544, 437,
        /*  4900 */   437, 437, 437, 437, 437, 544, 544, 437, 437, 437,
        /*  4910 */   544, 437, 437, 544, 437, 437, 544, 437, 544, 544,
        /*  4920 */   544, 437, 437, 437, 437, 437, 437, 437, 437, 544,
        /*  4930 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 437,
        /*  4940 */   437, 437, 437, 437, 437, 437, 437, 437, 445, 445,
        /*  4950 */   445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
        /*  4960 */   445, 445, 445, 445, 445, 445, 445, 445, 445, 544,
        /*  4970 */   445, 445, 445, 445, 445, 445, 544, 544, 445, 445,
        /*  4980 */   445, 544, 445, 445, 544, 445, 445, 544, 445, 544,
        /*  4990 */   544, 544, 445, 445, 445, 445, 445, 445, 445, 445,
        /*  5000 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  5010 */   445, 445, 445, 445, 445, 445, 445, 445, 445, 444,
        /*  5020 */   444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
        /*  5030 */   444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
        /*  5040 */   544, 444, 444, 444, 444, 444, 444, 544, 544, 444,
        /*  5050 */   444, 444, 544, 444, 444, 544, 444, 444, 544, 444,
        /*  5060 */   544, 544, 544, 444, 444, 444, 444, 444, 444, 444,
        /*  5070 */   444, 544, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  5080 */   544, 444, 444, 444, 444, 444, 444, 444, 444, 444,
        /*  5090 */   540, 540, 540, 540, 540, 540, 540, 540, 540, 540,
        /*  5100 */   540, 540, 540, 540, 540, 540, 540, 540, 540, 540,
        /*  5110 */   540, 544, 540, 540, 540, 540, 540, 540, 544, 544,
        /*  5120 */   540, 540, 540, 544, 540, 540, 544, 540, 540, 544,
        /*  5130 */   540, 544, 544, 544, 540, 540, 540, 540, 540, 540,
        /*  5140 */   540, 540, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  5150 */   544, 544, 540, 540, 540, 540, 540, 540, 540, 540,
        /*  5160 */   540, 435, 435, 435, 435, 435, 435, 435, 435, 435,
        /*  5170 */   435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
        /*  5180 */   435, 435, 544, 435, 435, 435, 435, 435, 435, 544,
        /*  5190 */   544, 435, 435, 435, 544, 435, 435, 544, 435, 435,
        /*  5200 */   544, 435, 544, 544, 544, 435, 435, 435, 435, 435,
        /*  5210 */   435, 435, 435, 544, 544, 544, 544, 544, 544, 544,
        /*  5220 */   544, 544, 544, 435, 435, 435, 435, 435, 435, 435,
        /*  5230 */   435, 435, 78, 428, 59, 60, 428, 66, 64, 63,
        /*  5240 */    62, 61, 65, 68, 67, 69, 71, 70, 76, 75,
        /*  5250 */    73, 74, 72, 544, 428, 19, 81, 346, 428, 428,
        /*  5260 */   423, 544, 423, 428, 428, 544, 428, 428, 544, 428,
        /*  5270 */   428, 544, 428, 544, 544, 544, 428, 428, 428, 428,
        /*  5280 */   428, 428, 428, 428, 544, 544, 544, 423, 544, 544,
        /*  5290 */   544, 423, 544, 544, 428, 428, 428, 428, 428, 428,
        /*  5300 */   428, 428, 428, 446, 446, 446, 446, 446, 446, 446,
        /*  5310 */   446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
        /*  5320 */   446, 446, 446, 446, 544, 446, 446, 332, 446, 446,
        /*  5330 */   446, 424, 544, 424, 446, 446, 544, 446, 446, 544,
        /*  5340 */   446, 446, 544, 446, 544, 544, 544, 446, 446, 446,
        /*  5350 */   446, 446, 446, 446, 446, 544, 544, 544, 424, 544,
        /*  5360 */   544, 544, 424, 544, 544, 446, 446, 446, 446, 446,
        /*  5370 */   446, 446, 446, 446, 78, 427, 59, 60, 427, 66,
        /*  5380 */    64, 63, 62, 61, 65, 68, 67, 69, 71, 70,
        /*  5390 */    76, 75, 73, 74, 72, 544, 427, 19, 81, 346,
        /*  5400 */   427, 427, 30, 544, 313, 427, 427, 544, 427, 427,
        /*  5410 */   544, 427, 427, 544, 427, 544, 544, 544, 427, 427,
        /*  5420 */   427, 427, 427, 427, 427, 427, 544, 544, 544, 479,
        /*  5430 */   544, 544, 544, 544, 544, 544, 427, 427, 427, 427,
        /*  5440 */   427, 427, 427, 427, 427, 484, 433, 484, 433, 433,
        /*  5450 */   544, 433, 433, 433, 433, 433, 433, 433, 433, 433,
        /*  5460 */   433, 433, 433, 433, 433, 433, 433, 544, 236, 20,
        /*  5470 */   433, 433, 237, 360, 234, 233, 232, 359, 358, 357,
        /*  5480 */   228, 544, 544, 51, 4, 487, 544, 86, 544, 544,
        /*  5490 */   544, 544, 544, 2, 544, 544, 433, 433, 484, 484,
        /*  5500 */   484, 484, 484, 484, 484, 484, 484, 484, 486, 434,
        /*  5510 */   486, 434, 434, 544, 434, 434, 434, 434, 434, 434,
        /*  5520 */   434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
        /*  5530 */   544, 544, 434, 434, 434, 544, 50, 49, 48, 47,
        /*  5540 */    46, 45, 44, 43, 42, 41, 544, 544, 544, 25,
        /*  5550 */   544, 313, 544, 544, 544, 544, 544, 544, 544, 434,
        /*  5560 */   434, 486, 486, 486, 486, 486, 486, 486, 486, 486,
        /*  5570 */   486, 485, 435, 485, 435, 435, 479, 435, 435, 435,
        /*  5580 */   435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
        /*  5590 */   435, 435, 435, 544, 544, 435, 435, 435, 544, 544,
        /*  5600 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  5610 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 258,
        /*  5620 */   544, 544, 435, 435, 485, 485, 485, 485, 485, 485,
        /*  5630 */   485, 485, 485, 485, 425, 174, 544, 425, 544, 544,
        /*  5640 */   544, 544, 544, 544, 544, 173, 544, 297, 11, 425,
        /*  5650 */   425, 544, 544, 544, 544, 425, 425, 425, 544, 425,
        /*  5660 */   425, 544, 544, 544, 425, 425, 544, 425, 425, 544,
        /*  5670 */   425, 425, 269, 425, 544, 544, 544, 425, 425, 425,
        /*  5680 */   425, 425, 425, 425, 425, 544, 544, 544, 544, 544,
        /*  5690 */   544, 268, 267, 266, 172, 425, 425, 425, 425, 425,
        /*  5700 */   425, 425, 425, 425, 209, 344, 544, 11, 544, 544,
        /*  5710 */   544, 224, 271, 544, 340, 544, 544, 128, 544, 544,
        /*  5720 */   544, 544, 264, 141, 544, 544, 544, 544, 135, 343,
        /*  5730 */     2, 544, 544, 339, 338, 337, 205, 336, 120, 119,
        /*  5740 */   118, 117, 335, 334, 544, 544, 209, 544, 184, 11,
        /*  5750 */    92, 544, 544, 224, 271, 311, 310, 33, 544, 544,
        /*  5760 */   544, 305, 8, 13, 174, 544, 174, 544, 35, 15,
        /*  5770 */     7, 95, 6, 344, 173, 544, 173, 11, 544, 11,
        /*  5780 */   544, 544, 340, 544, 544, 128, 544, 544, 544, 544,
        /*  5790 */   544, 114, 544, 544, 544, 544, 135, 343, 2, 544,
        /*  5800 */   544, 339, 338, 337, 205, 336, 120, 119, 118, 117,
        /*  5810 */   335, 334, 544, 544, 209, 544, 544, 11, 544, 274,
        /*  5820 */   544, 224, 271, 311, 310, 33, 544, 544, 544, 305,
        /*  5830 */     8, 13, 344, 544, 544, 174, 35, 15, 7, 95,
        /*  5840 */     6, 340, 544, 544, 128, 173, 544, 544, 11, 544,
        /*  5850 */   113, 544, 544, 544, 544, 135, 343, 2, 544, 544,
        /*  5860 */   339, 338, 337, 205, 336, 120, 119, 118, 117, 335,
        /*  5870 */   334, 544, 544, 209, 544, 544, 11, 544, 544, 544,
        /*  5880 */   224, 271, 311, 310, 33, 544, 544, 544, 305, 8,
        /*  5890 */    13, 544, 544, 344, 544, 35, 15, 7, 95, 6,
        /*  5900 */   544, 544, 340, 544, 544, 128, 544, 544, 544, 544,
        /*  5910 */   544, 112, 544, 544, 544, 544, 135, 343, 2, 544,
        /*  5920 */   544, 339, 338, 337, 205, 336, 120, 119, 118, 117,
        /*  5930 */   335, 334, 544, 544, 209, 544, 544, 11, 544, 272,
        /*  5940 */   544, 224, 271, 311, 310, 33, 544, 544, 544, 305,
        /*  5950 */     8, 13, 344, 544, 544, 174, 35, 15, 7, 95,
        /*  5960 */     6, 340, 544, 544, 128, 173, 544, 544, 11, 544,
        /*  5970 */   111, 544, 544, 544, 544, 135, 343, 2, 544, 544,
        /*  5980 */   339, 338, 337, 205, 336, 120, 119, 118, 117, 335,
        /*  5990 */   334, 544, 544, 209, 544, 544, 11, 544, 544, 544,
        /*  6000 */   224, 271, 311, 310, 33, 544, 544, 544, 305, 8,
        /*  6010 */    13, 544, 544, 344, 544, 35, 15, 7, 95, 6,
        /*  6020 */   544, 544, 340, 544, 544, 128, 544, 544, 544, 544,
        /*  6030 */   544, 110, 544, 544, 544, 544, 135, 343, 2, 544,
        /*  6040 */   544, 339, 338, 337, 205, 336, 120, 119, 118, 117,
        /*  6050 */   335, 334, 544, 544, 209, 544, 544, 11, 544, 247,
        /*  6060 */   544, 224, 271, 311, 310, 33, 544, 544, 544, 305,
        /*  6070 */     8, 13, 344, 544, 544, 174, 35, 15, 7, 95,
        /*  6080 */     6, 340, 544, 544, 128, 173, 544, 544, 11, 544,
        /*  6090 */   109, 544, 544, 544, 544, 135, 343, 2, 544, 544,
        /*  6100 */   339, 338, 337, 205, 336, 120, 119, 118, 117, 335,
        /*  6110 */   334, 544, 544, 209, 544, 544, 11, 544, 544, 544,
        /*  6120 */   224, 271, 311, 310, 33, 544, 544, 544, 305, 8,
        /*  6130 */    13, 544, 544, 344, 544, 35, 15, 7, 95, 6,
        /*  6140 */   544, 544, 340, 544, 544, 128, 544, 544, 544, 544,
        /*  6150 */   544, 226, 544, 544, 544, 544, 135, 343, 2, 544,
        /*  6160 */   544, 339, 338, 337, 205, 336, 120, 119, 118, 117,
        /*  6170 */   335, 334, 544, 544, 209, 544, 544, 11, 544, 259,
        /*  6180 */   544, 224, 271, 311, 310, 33, 544, 544, 544, 305,
        /*  6190 */     8, 13, 344, 544, 544, 174, 35, 15, 7, 95,
        /*  6200 */     6, 340, 544, 544, 128, 173, 544, 544, 11, 544,
        /*  6210 */   243, 544, 544, 544, 544, 135, 343, 2, 544, 544,
        /*  6220 */   339, 338, 337, 205, 336, 120, 119, 118, 117, 335,
        /*  6230 */   334, 544, 544, 209, 544, 544, 11, 544, 544, 544,
        /*  6240 */   224, 271, 311, 310, 33, 544, 544, 544, 305, 8,
        /*  6250 */    13, 544, 544, 293, 544, 35, 15, 7, 95, 6,
        /*  6260 */   544, 544, 340, 544, 544, 128, 544, 544, 544, 544,
        /*  6270 */   544, 544, 544, 544, 544, 544, 180, 342, 2, 544,
        /*  6280 */     1, 339, 338, 337, 205, 336, 120, 119, 118, 117,
        /*  6290 */   335, 334, 544, 544, 209, 544, 544, 11, 544, 256,
        /*  6300 */   544, 224, 271, 311, 310, 33, 544, 544, 544, 305,
        /*  6310 */     8, 13, 181, 544, 544, 174, 35, 15, 7, 95,
        /*  6320 */     6, 340, 544, 544, 128, 173, 544, 544, 11, 544,
        /*  6330 */   544, 544, 544, 544, 544, 182, 341, 2, 130, 544,
        /*  6340 */   339, 338, 337, 205, 336, 120, 119, 118, 117, 335,
        /*  6350 */   334, 544, 544, 209, 544, 544, 11, 544, 544, 544,
        /*  6360 */   224, 271, 311, 310, 33, 544, 544, 544, 305, 8,
        /*  6370 */    13, 544, 254, 544, 544, 35, 15, 7, 95, 6,
        /*  6380 */   544, 82, 544, 544, 378, 544, 544, 544, 174, 544,
        /*  6390 */   544, 544, 544, 544, 544, 544, 378, 378, 173, 544,
        /*  6400 */   544, 11, 378, 378, 378, 544, 378, 378, 544, 544,
        /*  6410 */   544, 378, 544, 544, 378, 378, 544, 378, 544, 544,
        /*  6420 */   378, 544, 263, 172, 378, 378, 378, 378, 378, 378,
        /*  6430 */   378, 378, 544, 209, 544, 544, 11, 544, 544, 391,
        /*  6440 */   224, 271, 378, 378, 378, 378, 378, 378, 378, 378,
        /*  6450 */   378, 391, 391, 262, 302, 544, 544, 391, 391, 391,
        /*  6460 */   544, 391, 391, 544, 544, 544, 391, 544, 544, 391,
        /*  6470 */   391, 391, 391, 544, 544, 391, 544, 544, 544, 391,
        /*  6480 */   391, 391, 391, 391, 391, 391, 391, 544, 544, 544,
        /*  6490 */   544, 544, 544, 544, 413, 544, 544, 391, 391, 391,
        /*  6500 */   391, 391, 391, 391, 391, 391, 413, 413, 544, 544,
        /*  6510 */   544, 544, 413, 413, 413, 544, 413, 413, 544, 544,
        /*  6520 */   544, 413, 544, 544, 413, 413, 413, 413, 544, 544,
        /*  6530 */   413, 544, 544, 544, 413, 413, 413, 413, 413, 413,
        /*  6540 */   413, 413, 544, 544, 544, 544, 544, 544, 544, 414,
        /*  6550 */   544, 544, 413, 413, 413, 413, 413, 413, 413, 413,
        /*  6560 */   413, 414, 414, 544, 544, 544, 544, 414, 414, 414,
        /*  6570 */   544, 414, 414, 544, 544, 544, 414, 544, 544, 414,
        /*  6580 */   414, 414, 414, 544, 544, 414, 544, 544, 544, 414,
        /*  6590 */   414, 414, 414, 414, 414, 414, 414, 544, 544, 544,
        /*  6600 */   544, 544, 544, 544, 412, 544, 544, 414, 414, 414,
        /*  6610 */   414, 414, 414, 414, 414, 414, 412, 412, 544, 544,
        /*  6620 */   544, 544, 412, 412, 412, 544, 412, 412, 544, 544,
        /*  6630 */   544, 412, 544, 544, 412, 412, 412, 412, 544, 544,
        /*  6640 */   412, 544, 544, 544, 412, 412, 412, 412, 412, 412,
        /*  6650 */   412, 412, 544, 544, 544, 544, 544, 544, 544, 377,
        /*  6660 */   544, 544, 412, 412, 412, 412, 412, 412, 412, 412,
        /*  6670 */   412, 377, 377, 544, 544, 544, 544, 377, 377, 377,
        /*  6680 */   544, 227, 377, 544, 544, 32, 377, 544, 544, 377,
        /*  6690 */   377, 544, 377, 544, 544, 377, 544, 544, 544, 377,
        /*  6700 */   377, 377, 377, 377, 377, 377, 377, 544, 544, 544,
        /*  6710 */   544, 544, 544, 544, 377, 544, 544, 377, 377, 377,
        /*  6720 */   377, 377, 377, 377, 377, 377, 377, 377, 544, 544,
        /*  6730 */   544, 544, 377, 377, 377, 544, 377, 377, 544, 544,
        /*  6740 */    32, 377, 544, 544, 377, 377, 544, 377, 544, 544,
        /*  6750 */   377, 544, 544, 544, 377, 377, 377, 377, 377, 377,
        /*  6760 */   377, 377, 544, 544, 544, 544, 544, 544, 544, 52,
        /*  6770 */   544, 544, 377, 377, 377, 377, 377, 377, 377, 377,
        /*  6780 */   377, 55, 54, 544, 544, 544, 544, 53, 57, 31,
        /*  6790 */   544, 127, 178, 544, 544, 544, 345, 544, 544, 183,
        /*  6800 */    97, 133, 169, 544, 544, 168, 544, 544, 544, 329,
        /*  6810 */   328, 325, 322, 319, 96, 40, 39, 544, 544, 544,
        /*  6820 */   544, 544, 544, 544, 52, 544, 544, 312, 306, 304,
        /*  6830 */   301, 299, 298, 22, 316, 296, 55, 54, 544, 544,
        /*  6840 */   544, 544, 53, 57, 31, 544, 127, 178, 544, 544,
        /*  6850 */   544, 345, 544, 544, 183, 97, 132, 169, 544, 544,
        /*  6860 */   168, 544, 544, 544, 329, 328, 325, 322, 319, 96,
        /*  6870 */    40, 39, 544, 544, 544, 544, 544, 544, 544, 511,
        /*  6880 */   544, 544, 312, 306, 304, 301, 299, 298, 22, 316,
        /*  6890 */   296, 511, 511, 544, 544, 544, 544, 511, 511, 511,
        /*  6900 */   544, 511, 511, 544, 544, 544, 511, 544, 544, 511,
        /*  6910 */   511, 544, 511, 544, 544, 511, 544, 544, 544, 511,
        /*  6920 */   511, 511, 511, 511, 511, 511, 511, 544, 544, 544,
        /*  6930 */   544, 544, 544, 544, 515, 544, 544, 309, 511, 511,
        /*  6940 */   511, 511, 511, 511, 511, 511, 515, 515, 544, 544,
        /*  6950 */   544, 544, 515, 515, 515, 544, 515, 515, 544, 544,
        /*  6960 */   544, 515, 544, 544, 515, 515, 544, 515, 544, 544,
        /*  6970 */   515, 544, 544, 544, 515, 515, 515, 515, 515, 515,
        /*  6980 */   515, 515, 544, 544, 544, 544, 544, 544, 544, 531,
        /*  6990 */   544, 544, 515, 515, 515, 515, 515, 515, 515, 515,
        /*  7000 */   515, 531, 531, 544, 544, 544, 544, 531, 531, 531,
        /*  7010 */   544, 531, 531, 544, 544, 544, 531, 544, 544, 531,
        /*  7020 */   531, 544, 531, 544, 544, 531, 544, 544, 544, 531,
        /*  7030 */   531, 531, 531, 531, 531, 531, 531, 544, 544, 544,
        /*  7040 */   544, 544, 544, 544, 534, 544, 544, 531, 531, 531,
        /*  7050 */   531, 531, 531, 531, 531, 531, 534, 534, 544, 544,
        /*  7060 */   544, 544, 534, 534, 534, 544, 534, 534, 544, 544,
        /*  7070 */   544, 534, 544, 544, 534, 534, 544, 534, 544, 544,
        /*  7080 */   534, 544, 544, 544, 534, 534, 534, 534, 534, 534,
        /*  7090 */   534, 534, 544, 544, 544, 544, 544, 544, 544, 436,
        /*  7100 */   544, 544, 534, 534, 534, 534, 534, 534, 534, 534,
        /*  7110 */   534, 436, 436, 544, 544, 544, 544, 436, 436, 436,
        /*  7120 */   544, 436, 436, 544, 544, 544, 436, 544, 544, 436,
        /*  7130 */   436, 544, 436, 544, 544, 436, 544, 544, 544, 436,
        /*  7140 */   436, 436, 436, 436, 436, 436, 436, 544, 544, 544,
        /*  7150 */   544, 544, 544, 544, 379, 544, 544, 436, 436, 436,
        /*  7160 */   436, 436, 436, 436, 436, 436, 379, 379, 544, 544,
        /*  7170 */   544, 544, 379, 379, 379, 544, 379, 379, 544, 544,
        /*  7180 */   544, 379, 544, 544, 379, 379, 544, 379, 544, 544,
        /*  7190 */   379, 544, 544, 544, 379, 379, 379, 379, 379, 379,
        /*  7200 */   379, 379, 544, 544, 544, 544, 544, 544, 544, 384,
        /*  7210 */   544, 544, 379, 379, 379, 379, 379, 379, 379, 379,
        /*  7220 */   379, 384, 384, 544, 544, 544, 544, 384, 384, 384,
        /*  7230 */   544, 384, 384, 544, 544, 544, 384, 544, 544, 384,
        /*  7240 */   384, 544, 384, 544, 544, 384, 544, 544, 544, 384,
        /*  7250 */   384, 384, 384, 384, 384, 384, 384, 544, 544, 544,
        /*  7260 */   544, 544, 544, 544, 52, 544, 544, 384, 384, 384,
        /*  7270 */   384, 384, 384, 384, 384, 384, 55, 54, 544, 544,
        /*  7280 */   544, 544, 53, 57, 31, 544, 127, 178, 544, 544,
        /*  7290 */   544, 345, 544, 544, 183, 97, 544, 169, 544, 544,
        /*  7300 */   168, 544, 544, 544, 329, 328, 325, 322, 319, 96,
        /*  7310 */    40, 39, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  7320 */   544, 544, 312, 306, 304, 301, 299, 298, 22, 316,
        /*  7330 */   296, 80, 433, 433, 433, 433, 544, 433, 433, 433,
        /*  7340 */   433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
        /*  7350 */   433, 433, 433, 544, 544, 20, 433, 433, 544, 544,
        /*  7360 */    78, 418, 59, 60, 433, 66, 64, 63, 62, 61,
        /*  7370 */    65, 68, 67, 69, 71, 70, 76, 75, 73, 74,
        /*  7380 */    72, 544, 544, 19, 81, 346, 418, 544, 446, 544,
        /*  7390 */   446, 446, 418, 446, 446, 446, 446, 446, 446, 446,
        /*  7400 */   446, 446, 446, 446, 446, 446, 446, 446, 446, 544,
        /*  7410 */   544, 446, 350, 446, 122, 544, 544, 78, 489, 59,
        /*  7420 */    60, 544, 66, 64, 63, 62, 61, 65, 68, 67,
        /*  7430 */    69, 71, 70, 76, 75, 73, 74, 72, 446, 446,
        /*  7440 */    19, 81, 346, 489, 544, 78, 495, 59, 60, 489,
        /*  7450 */    66, 64, 63, 62, 61, 65, 68, 67, 69, 71,
        /*  7460 */    70, 76, 75, 73, 74, 72, 544, 544, 19, 81,
        /*  7470 */   346, 495, 544, 78, 496, 59, 60, 495, 66, 64,
        /*  7480 */    63, 62, 61, 65, 68, 67, 69, 71, 70, 76,
        /*  7490 */    75, 73, 74, 72, 544, 544, 19, 81, 346, 496,
        /*  7500 */   544, 78, 497, 59, 60, 496, 66, 64, 63, 62,
        /*  7510 */    61, 65, 68, 67, 69, 71, 70, 76, 75, 73,
        /*  7520 */    74, 72, 544, 544, 19, 81, 346, 497, 544, 78,
        /*  7530 */   498, 59, 60, 497, 66, 64, 63, 62, 61, 65,
        /*  7540 */    68, 67, 69, 71, 70, 76, 75, 73, 74, 72,
        /*  7550 */   544, 544, 19, 81, 346, 498, 544, 78, 499, 59,
        /*  7560 */    60, 498, 66, 64, 63, 62, 61, 65, 68, 67,
        /*  7570 */    69, 71, 70, 76, 75, 73, 74, 72, 544, 544,
        /*  7580 */    19, 81, 346, 499, 544, 78, 500, 59, 60, 499,
        /*  7590 */    66, 64, 63, 62, 61, 65, 68, 67, 69, 71,
        /*  7600 */    70, 76, 75, 73, 74, 72, 544, 544, 19, 81,
        /*  7610 */   346, 500, 544, 78, 501, 59, 60, 500, 66, 64,
        /*  7620 */    63, 62, 61, 65, 68, 67, 69, 71, 70, 76,
        /*  7630 */    75, 73, 74, 72, 544, 544, 19, 81, 346, 501,
        /*  7640 */   544, 78, 502, 59, 60, 501, 66, 64, 63, 62,
        /*  7650 */    61, 65, 68, 67, 69, 71, 70, 76, 75, 73,
        /*  7660 */    74, 72, 544, 544, 19, 81, 346, 502, 544, 78,
        /*  7670 */   503, 59, 60, 502, 66, 64, 63, 62, 61, 65,
        /*  7680 */    68, 67, 69, 71, 70, 76, 75, 73, 74, 72,
        /*  7690 */   544, 544, 19, 81, 346, 503, 544, 78, 504, 59,
        /*  7700 */    60, 503, 66, 64, 63, 62, 61, 65, 68, 67,
        /*  7710 */    69, 71, 70, 76, 75, 73, 74, 72, 544, 544,
        /*  7720 */    19, 81, 346, 504, 544, 78, 491, 59, 60, 504,
        /*  7730 */    66, 64, 63, 62, 61, 65, 68, 67, 69, 71,
        /*  7740 */    70, 76, 75, 73, 74, 72, 544, 544, 19, 81,
        /*  7750 */   346, 491, 544, 78, 493, 59, 60, 491, 66, 64,
        /*  7760 */    63, 62, 61, 65, 68, 67, 69, 71, 70, 76,
        /*  7770 */    75, 73, 74, 72, 544, 544, 19, 81, 346, 493,
        /*  7780 */   544, 78, 438, 59, 60, 493, 66, 64, 63, 62,
        /*  7790 */    61, 65, 68, 67, 69, 71, 70, 76, 75, 73,
        /*  7800 */    74, 72, 544, 544, 19, 81, 346, 544, 544, 78,
        /*  7810 */   544, 59, 60, 438, 66, 64, 63, 62, 61, 65,
        /*  7820 */    68, 67, 69, 71, 70, 76, 75, 73, 74, 72,
        /*  7830 */   544, 544, 19, 58, 333, 544, 544, 544, 78, 440,
        /*  7840 */    59, 60, 544, 66, 64, 63, 62, 61, 65, 68,
        /*  7850 */    67, 69, 71, 70, 76, 75, 73, 74, 72, 250,
        /*  7860 */   249, 19, 81, 346, 544, 544, 78, 544, 59, 60,
        /*  7870 */   440, 66, 64, 63, 62, 61, 65, 68, 67, 69,
        /*  7880 */    71, 70, 76, 75, 73, 74, 72, 544, 544, 19,
        /*  7890 */    81, 346, 544, 544, 544, 78, 77, 59, 60, 544,
        /*  7900 */    66, 64, 63, 62, 61, 65, 68, 67, 69, 71,
        /*  7910 */    70, 76, 75, 73, 74, 72, 544, 544, 19, 81,
        /*  7920 */   346, 544, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  7930 */   544, 544, 544, 176, 544, 544, 544, 544, 78, 544,
        /*  7940 */    59, 60, 544, 66, 64, 63, 62, 61, 65, 68,
        /*  7950 */    67, 69, 71, 70, 76, 75, 73, 74, 72, 544,
        /*  7960 */   544, 19, 81, 346, 544, 544, 78, 544, 59, 60,
        /*  7970 */   153, 66, 64, 63, 62, 61, 65, 68, 67, 69,
        /*  7980 */    71, 70, 76, 75, 73, 74, 72, 544, 544, 19,
        /*  7990 */    81, 346, 544, 544, 78, 544, 59, 60, 152, 66,
        /*  8000 */    64, 63, 62, 61, 65, 68, 67, 69, 71, 70,
        /*  8010 */    76, 75, 73, 74, 72, 544, 544, 19, 81, 346,
        /*  8020 */   544, 544, 78, 544, 59, 60, 506, 66, 64, 63,
        /*  8030 */    62, 61, 65, 68, 67, 69, 71, 70, 76, 75,
        /*  8040 */    73, 74, 72, 544, 544, 19, 81, 346, 544, 544,
        /*  8050 */    78, 544, 59, 60, 509, 66, 64, 63, 62, 61,
        /*  8060 */    65, 68, 67, 69, 71, 70, 76, 75, 73, 74,
        /*  8070 */    72, 544, 544, 19, 81, 346, 544, 544, 78, 544,
        /*  8080 */    59, 60, 190, 66, 64, 63, 62, 61, 65, 68,
        /*  8090 */    67, 69, 71, 70, 76, 75, 73, 74, 72, 544,
        /*  8100 */   544, 19, 81, 346, 222, 544, 78, 544, 59, 60,
        /*  8110 */   544, 66, 64, 63, 62, 61, 65, 68, 67, 69,
        /*  8120 */    71, 70, 76, 75, 73, 74, 72, 544, 544, 19,
        /*  8130 */    81, 346, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  8140 */   544, 544, 544, 544, 137, 544, 544, 544, 544, 78,
        /*  8150 */   544, 59, 60, 544, 66, 64, 63, 62, 61, 65,
        /*  8160 */    68, 67, 69, 71, 70, 76, 75, 73, 74, 72,
        /*  8170 */   517, 544, 19, 58, 333, 544, 544, 544, 544, 544,
        /*  8180 */   544, 544, 517, 517, 544, 544, 544, 544, 517, 517,
        /*  8190 */   517, 544, 517, 517, 544, 544, 544, 517, 544, 544,
        /*  8200 */   544, 517, 544, 517, 544, 544, 517, 544, 544, 544,
        /*  8210 */   517, 517, 517, 517, 517, 517, 517, 517, 544, 52,
        /*  8220 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  8230 */   544, 55, 54, 544, 544, 517, 544, 53, 57, 31,
        /*  8240 */   544, 524, 178, 544, 544, 544, 345, 544, 544, 544,
        /*  8250 */    97, 544, 169, 544, 544, 168, 544, 544, 544, 329,
        /*  8260 */   328, 325, 322, 319, 96, 40, 39, 544, 52, 544,
        /*  8270 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
        /*  8280 */    55, 54, 544, 544, 316, 544, 53, 57, 31, 544,
        /*  8290 */   544, 178, 544, 544, 544, 345, 544, 544, 544, 97,
        /*  8300 */   544, 169, 544, 544, 168, 544, 544, 544, 329, 328,
        /*  8310 */   325, 322, 319, 96, 40, 39, 544, 530, 544, 544,
        /*  8320 */   544, 544, 544, 544, 544, 544, 544, 544, 544, 530,
        /*  8330 */   530, 544, 544, 316, 544, 530, 530, 530, 544, 544,
        /*  8340 */   530, 544, 544, 544, 530, 530, 544, 544, 544, 544,
        /*  8350 */   530, 544, 544, 530, 544, 544, 544, 530, 530, 530,
        /*  8360 */   530, 530, 544, 530, 530, 544, 52, 544, 544, 544,
        /*  8370 */   544, 544, 544, 544, 544, 544, 544, 544, 55, 54,
        /*  8380 */   544, 544, 530, 544, 53, 57, 31, 544, 544, 178,
        /*  8390 */   544, 544, 544, 345, 527, 544, 544, 544, 544, 169,
        /*  8400 */   544, 544, 168, 544, 544, 544, 329, 328, 325, 322,
        /*  8410 */   319, 544, 40, 39, 544, 52, 544, 544, 544, 544,
        /*  8420 */   544, 544, 544, 544, 544, 544, 544, 55, 54, 544,
        /*  8430 */   544, 316, 544, 53, 57, 31, 544, 544, 207, 544,
        /*  8440 */   544, 544, 345, 442, 544, 544, 544, 544, 169, 544,
        /*  8450 */   544, 168, 52, 277, 544, 329, 328, 325, 322, 319,
        /*  8460 */   544, 544, 544, 544, 55, 54, 544, 544, 544, 544,
        /*  8470 */    53, 57, 31, 544, 544, 178, 544, 544, 544, 345,
        /*  8480 */   316, 544, 544, 544, 544, 169, 544, 544, 168, 52,
        /*  8490 */   544, 544, 329, 328, 325, 322, 319, 544, 40, 39,
        /*  8500 */   544, 55, 54, 544, 544, 544, 544, 53, 57, 31,
        /*  8510 */   544, 544, 167, 544, 544, 544, 345, 316, 544, 544,
        /*  8520 */   544, 544, 169, 448, 544, 168, 52, 544, 544, 329,
        /*  8530 */   328, 325, 322, 319, 544, 544, 544, 544, 55, 54,
        /*  8540 */   544, 544, 544, 544, 53, 57, 31, 544, 544, 207,
        /*  8550 */   544, 544, 544, 345, 316, 544, 544, 544, 544, 169,
        /*  8560 */   544, 544, 168, 52, 277, 544, 329, 328, 325, 322,
        /*  8570 */   319, 544, 544, 544, 544, 55, 54, 544, 544, 544,
        /*  8580 */   544, 53, 57, 31, 544, 429, 167, 544, 544, 544,
        /*  8590 */   345, 316, 544, 544, 544, 544, 169, 544, 544, 168,
        /*  8600 */   529, 544, 544, 329, 328, 325, 322, 319, 544, 544,
        /*  8610 */   544, 544, 529, 529, 544, 544, 544, 544, 529, 529,
        /*  8620 */   529, 544, 544, 529, 544, 544, 544, 529, 316, 544,
        /*  8630 */   544, 544, 544, 529, 544, 544, 529, 52, 544, 544,
        /*  8640 */   529, 529, 529, 529, 529, 544, 544, 544, 544, 55,
        /*  8650 */    54, 544, 544, 544, 544, 53, 57, 31, 544, 544,
        /*  8660 */   167, 544, 544, 544, 345, 529, 544, 544, 544, 544,
        /*  8670 */   169, 544, 544, 168, 52, 544, 544, 329, 328, 325,
        /*  8680 */   322, 319, 544, 544, 544, 544, 55, 54, 544, 544,
        /*  8690 */   544, 544, 53, 57, 31, 544, 544, 178, 544, 544,
        /*  8700 */   544, 345, 316, 269, 544, 544, 544, 169, 544, 544,
        /*  8710 */   168, 544, 544, 544, 329, 328, 325, 322, 319, 544,
        /*  8720 */   544, 544, 268, 267, 266, 172, 544, 544, 544, 544,
        /*  8730 */   544, 544, 544, 544, 544, 209, 544, 544, 11, 316,
        /*  8740 */   544, 544, 224, 271, 544, 544, 544, 544, 544, 544,
        /*  8750 */   544, 544, 544, 265, 303,
};
static const YYCODETYPE yy_lookahead[] = {
        /*     0 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*    10 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*    20 */    24, 30, 26, 27, 28, 29, 30, 31, 5, 5,
        /*    30 */    34, 35, 36, 30, 38, 39, 5, 41, 42, 3,
        /*    40 */    44, 5, 106, 30, 48, 49, 50, 51, 52, 53,
        /*    50 */    54, 55, 116, 30, 30, 119, 120, 121, 34, 36,
        /*    60 */    36, 30, 66, 67, 68, 69, 70, 71, 72, 73,
        /*    70 */    74, 4, 5, 6, 7, 8, 9, 10, 11, 12,
        /*    80 */    13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*    90 */    23, 24, 5, 26, 27, 28, 29, 30, 31, 5,
        /*   100 */     5, 34, 35, 36, 30, 38, 39, 5, 41, 42,
        /*   110 */     3, 44, 5, 106, 31, 48, 49, 50, 51, 52,
        /*   120 */    53, 54, 55, 116, 30, 30, 119, 120, 121, 42,
        /*   130 */    36, 36, 30, 66, 67, 68, 69, 70, 71, 72,
        /*   140 */    73, 74, 4, 5, 6, 7, 8, 9, 10, 11,
        /*   150 */    12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        /*   160 */    22, 23, 24, 5, 26, 27, 28, 29, 30, 31,
        /*   170 */     5, 5, 34, 35, 36, 31, 38, 39, 30, 41,
        /*   180 */    42, 3, 44, 5, 106, 31, 48, 49, 50, 51,
        /*   190 */    52, 53, 54, 55, 116, 30, 27, 119, 120, 121,
        /*   200 */    42, 36, 36, 5, 66, 67, 68, 69, 70, 71,
        /*   210 */    72, 73, 74, 4, 5, 6, 7, 8, 9, 10,
        /*   220 */    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*   230 */    21, 22, 23, 24, 36, 26, 27, 28, 29, 30,
        /*   240 */    31, 5, 5, 34, 35, 36, 30, 38, 39, 5,
        /*   250 */    41, 42, 36, 44, 3, 106, 5, 48, 49, 50,
        /*   260 */    51, 52, 53, 54, 55, 116, 30, 35, 119, 120,
        /*   270 */   121, 39, 40, 36, 30, 66, 67, 68, 69, 70,
        /*   280 */    71, 72, 73, 74, 4, 5, 6, 7, 8, 9,
        /*   290 */    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        /*   300 */    20, 21, 22, 23, 24, 95, 26, 27, 28, 29,
        /*   310 */    30, 31, 5, 5, 34, 35, 36, 36, 38, 39,
        /*   320 */     5, 41, 42, 28, 44, 115, 106, 41, 48, 49,
        /*   330 */    50, 51, 52, 53, 54, 55, 116, 30, 35, 119,
        /*   340 */   120, 121, 39, 40, 36, 30, 66, 67, 68, 69,
        /*   350 */    70, 71, 72, 73, 74, 4, 5, 6, 7, 8,
        /*   360 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*   370 */    19, 20, 21, 22, 23, 24, 0, 26, 27, 28,
        /*   380 */    29, 30, 31, 5, 106, 34, 35, 36, 42, 38,
        /*   390 */    39, 5, 41, 42, 116, 44, 5, 119, 120, 48,
        /*   400 */    49, 50, 51, 52, 53, 54, 55, 42, 32, 96,
        /*   410 */    97, 35, 34, 37, 38, 39, 30, 66, 67, 68,
        /*   420 */    69, 70, 71, 72, 73, 74, 0, 36, 2, 53,
        /*   430 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*   440 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*   450 */    24, 0, 26, 27, 28, 29, 30, 31, 32, 106,
        /*   460 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 116,
        /*   470 */    44, 5, 119, 31, 48, 49, 50, 51, 52, 53,
        /*   480 */    54, 55, 27, 32, 77, 78, 35, 30, 37, 38,
        /*   490 */    39, 30, 66, 67, 68, 69, 70, 71, 72, 73,
        /*   500 */    74, 0, 36, 2, 53, 4, 5, 6, 7, 8,
        /*   510 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*   520 */    19, 20, 21, 22, 23, 24, 0, 26, 27, 28,
        /*   530 */    29, 30, 31, 32, 5, 34, 35, 36, 37, 38,
        /*   540 */    39, 40, 41, 42, 30, 44, 5, 106, 30, 48,
        /*   550 */    49, 50, 51, 52, 53, 54, 55, 116, 32, 30,
        /*   560 */   119, 35, 30, 37, 38, 39, 30, 66, 67, 68,
        /*   570 */    69, 70, 71, 72, 73, 74, 0, 36, 2, 53,
        /*   580 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*   590 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*   600 */    24, 0, 26, 27, 28, 29, 30, 31, 32, 5,
        /*   610 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 30,
        /*   620 */    44, 31, 106, 30, 48, 49, 50, 51, 52, 53,
        /*   630 */    54, 55, 116, 32, 30, 119, 35, 30, 37, 38,
        /*   640 */    39, 30, 66, 67, 68, 69, 70, 71, 72, 73,
        /*   650 */    74, 0, 28, 2, 53, 4, 5, 6, 7, 8,
        /*   660 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*   670 */    19, 20, 21, 22, 23, 24, 0, 26, 27, 28,
        /*   680 */    29, 30, 31, 32, 5, 34, 35, 36, 37, 38,
        /*   690 */    39, 40, 41, 42, 30, 44, 41, 106, 42, 48,
        /*   700 */    49, 50, 51, 52, 53, 54, 55, 116, 32, 30,
        /*   710 */   119, 35, 27, 37, 38, 39, 27, 66, 67, 68,
        /*   720 */    69, 70, 71, 72, 73, 74, 0, 46, 2, 53,
        /*   730 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*   740 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*   750 */    24, 0, 26, 27, 28, 29, 30, 31, 32, 5,
        /*   760 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 36,
        /*   770 */    44, 27, 106, 46, 48, 49, 50, 51, 52, 53,
        /*   780 */    54, 55, 116, 32, 30, 119, 35, 27, 37, 38,
        /*   790 */    39, 36, 66, 67, 68, 69, 70, 71, 72, 73,
        /*   800 */    74, 0, 46, 2, 53, 4, 5, 6, 7, 8,
        /*   810 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*   820 */    19, 20, 21, 22, 23, 24, 0, 26, 27, 28,
        /*   830 */    29, 30, 31, 32, 36, 34, 35, 36, 37, 38,
        /*   840 */    39, 40, 41, 42, 27, 44, 46, 106, 36, 48,
        /*   850 */    49, 50, 51, 52, 53, 54, 55, 116, 32, 27,
        /*   860 */   119, 35, 42, 37, 38, 39, 36, 66, 67, 68,
        /*   870 */    69, 70, 71, 72, 73, 74, 0, 31, 2, 53,
        /*   880 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*   890 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*   900 */    24, 0, 26, 27, 28, 29, 30, 31, 32, 27,
        /*   910 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 27,
        /*   920 */    44, 36, 106, 27, 48, 49, 50, 51, 52, 53,
        /*   930 */    54, 55, 116, 32, 27, 119, 35, 27, 37, 38,
        /*   940 */    39, 36, 66, 67, 68, 69, 70, 71, 72, 73,
        /*   950 */    74, 0, 27, 2, 53, 4, 5, 6, 7, 8,
        /*   960 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*   970 */    19, 20, 21, 22, 23, 24, 0, 26, 27, 28,
        /*   980 */    29, 30, 31, 32, 27, 34, 35, 36, 37, 38,
        /*   990 */    39, 40, 41, 42, 30, 44, 36, 106, 27, 48,
        /*  1000 */    49, 50, 51, 52, 53, 54, 55, 116, 32, 31,
        /*  1010 */   119, 35, 30, 37, 38, 39, 30, 66, 67, 68,
        /*  1020 */    69, 70, 71, 72, 73, 74, 0, 30, 2, 53,
        /*  1030 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  1040 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  1050 */    24, 0, 26, 27, 28, 29, 30, 31, 32, 27,
        /*  1060 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 36,
        /*  1070 */    44, 40, 106, 30, 48, 49, 50, 51, 52, 53,
        /*  1080 */    54, 55, 116, 32, 36, 119, 35, 31, 37, 38,
        /*  1090 */    39, 36, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  1100 */    74, 0, 36, 2, 53, 4, 5, 6, 7, 8,
        /*  1110 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  1120 */    19, 20, 21, 22, 23, 24, 0, 26, 27, 28,
        /*  1130 */    29, 30, 31, 32, 36, 34, 35, 36, 37, 38,
        /*  1140 */    39, 40, 41, 42, 36, 44, 31, 106, 38, 48,
        /*  1150 */    49, 50, 51, 52, 53, 54, 55, 116, 32, 30,
        /*  1160 */   119, 35, 27, 37, 38, 39, 36, 66, 67, 68,
        /*  1170 */    69, 70, 71, 72, 73, 74, 0, 30, 2, 53,
        /*  1180 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  1190 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  1200 */    24, 0, 26, 27, 28, 29, 30, 31, 32, 88,
        /*  1210 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 31,
        /*  1220 */    44, 101, 106, 40, 48, 49, 50, 51, 52, 53,
        /*  1230 */    54, 55, 116, 32, 101, 119, 35, 114, 37, 38,
        /*  1240 */    39, 41, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  1250 */    74, 0, 31, 2, 53, 4, 5, 6, 7, 8,
        /*  1260 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  1270 */    19, 20, 21, 22, 23, 24, 0, 26, 27, 28,
        /*  1280 */    29, 30, 31, 32, 117, 34, 35, 36, 37, 38,
        /*  1290 */    39, 40, 41, 42, 117, 44, 117, 106, 117, 48,
        /*  1300 */    49, 50, 51, 52, 53, 54, 55, 116, 32, 117,
        /*  1310 */   119, 35, 122, 37, 38, 39, 89, 66, 67, 68,
        /*  1320 */    69, 70, 71, 72, 73, 74, 0, 89, 2, 53,
        /*  1330 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  1340 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  1350 */    24, 5, 26, 27, 28, 29, 30, 31, 32, 89,
        /*  1360 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 31,
        /*  1370 */    44, 105, 106, 143, 48, 49, 50, 51, 52, 53,
        /*  1380 */    54, 55, 116, 29, 30, 119, 31, 33, 42, 123,
        /*  1390 */   124, 36, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  1400 */    74, 0, 136, 2, 143, 4, 5, 6, 7, 8,
        /*  1410 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  1420 */    19, 20, 21, 22, 23, 24, 0, 26, 27, 28,
        /*  1430 */    29, 30, 31, 32, 143, 34, 35, 36, 37, 38,
        /*  1440 */    39, 40, 41, 42, 143, 44, 95, 106, 143, 48,
        /*  1450 */    49, 50, 51, 52, 53, 54, 55, 116, 32, 143,
        /*  1460 */   119, 35, 143, 37, 38, 39, 115, 66, 67, 68,
        /*  1470 */    69, 70, 71, 72, 73, 74, 0, 143, 2, 53,
        /*  1480 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  1490 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  1500 */    24, 0, 26, 27, 28, 29, 30, 31, 32, 106,
        /*  1510 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 116,
        /*  1520 */    44, 143, 119, 143, 48, 49, 50, 51, 52, 53,
        /*  1530 */    54, 55, 143, 32, 143, 143, 35, 143, 37, 38,
        /*  1540 */    39, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  1550 */    74, 0, 143, 2, 53, 4, 5, 6, 7, 8,
        /*  1560 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  1570 */    19, 20, 21, 22, 23, 24, 5, 26, 27, 28,
        /*  1580 */    29, 30, 31, 32, 143, 34, 35, 36, 37, 38,
        /*  1590 */    39, 40, 41, 42, 143, 44, 143, 106, 143, 48,
        /*  1600 */    49, 50, 51, 52, 53, 54, 55, 116, 29, 30,
        /*  1610 */   119, 35, 33, 42, 123, 39, 40, 66, 67, 68,
        /*  1620 */    69, 70, 71, 72, 73, 74, 0, 143, 2, 143,
        /*  1630 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  1640 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  1650 */    24, 143, 26, 27, 28, 29, 30, 31, 32, 143,
        /*  1660 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 143,
        /*  1670 */    44, 128, 129, 130, 48, 49, 50, 51, 52, 53,
        /*  1680 */    54, 55, 29, 30, 35, 143, 33, 143, 39, 40,
        /*  1690 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  1700 */    74, 0, 143, 2, 143, 4, 5, 6, 7, 8,
        /*  1710 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  1720 */    19, 20, 21, 22, 23, 24, 143, 26, 27, 28,
        /*  1730 */    29, 30, 31, 32, 143, 34, 35, 36, 37, 38,
        /*  1740 */    39, 40, 41, 42, 143, 44, 143, 143, 143, 48,
        /*  1750 */    49, 50, 51, 52, 53, 54, 55, 35, 143, 143,
        /*  1760 */   143, 39, 40, 143, 143, 143, 143, 66, 67, 68,
        /*  1770 */    69, 70, 71, 72, 73, 74, 0, 143, 2, 143,
        /*  1780 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  1790 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  1800 */    24, 143, 26, 27, 28, 29, 30, 31, 32, 143,
        /*  1810 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 143,
        /*  1820 */    44, 143, 106, 106, 48, 49, 50, 51, 52, 53,
        /*  1830 */    54, 55, 116, 116, 143, 119, 119, 143, 143, 143,
        /*  1840 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  1850 */    74, 0, 143, 2, 143, 4, 5, 6, 7, 8,
        /*  1860 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  1870 */    19, 20, 21, 22, 23, 24, 143, 26, 27, 28,
        /*  1880 */    29, 30, 31, 32, 143, 34, 35, 36, 37, 38,
        /*  1890 */    39, 40, 41, 42, 143, 44, 143, 106, 106, 48,
        /*  1900 */    49, 50, 51, 52, 53, 54, 55, 116, 116, 143,
        /*  1910 */   119, 119, 143, 143, 143, 143, 143, 66, 67, 68,
        /*  1920 */    69, 70, 71, 72, 73, 74, 0, 143, 2, 143,
        /*  1930 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  1940 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  1950 */    24, 143, 26, 27, 28, 29, 30, 31, 32, 143,
        /*  1960 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 143,
        /*  1970 */    44, 143, 106, 106, 48, 49, 50, 51, 52, 53,
        /*  1980 */    54, 55, 116, 116, 143, 119, 119, 143, 143, 143,
        /*  1990 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  2000 */    74, 0, 143, 2, 143, 4, 5, 6, 7, 8,
        /*  2010 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  2020 */    19, 20, 21, 22, 23, 24, 143, 26, 27, 28,
        /*  2030 */    29, 30, 31, 32, 143, 34, 35, 36, 37, 38,
        /*  2040 */    39, 40, 41, 42, 143, 44, 143, 106, 106, 48,
        /*  2050 */    49, 50, 51, 52, 53, 54, 55, 116, 116, 143,
        /*  2060 */   119, 119, 143, 143, 143, 143, 143, 66, 67, 68,
        /*  2070 */    69, 70, 71, 72, 73, 74, 0, 143, 2, 143,
        /*  2080 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  2090 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  2100 */    24, 143, 26, 27, 28, 29, 30, 31, 32, 143,
        /*  2110 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 143,
        /*  2120 */    44, 143, 106, 106, 48, 49, 50, 51, 52, 53,
        /*  2130 */    54, 55, 116, 116, 143, 119, 119, 143, 143, 143,
        /*  2140 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  2150 */    74, 0, 143, 2, 143, 4, 5, 6, 7, 8,
        /*  2160 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  2170 */    19, 20, 21, 22, 23, 24, 143, 26, 27, 28,
        /*  2180 */    29, 30, 31, 32, 143, 34, 35, 36, 37, 38,
        /*  2190 */    39, 40, 41, 42, 143, 44, 143, 106, 106, 48,
        /*  2200 */    49, 50, 51, 52, 53, 54, 55, 116, 116, 143,
        /*  2210 */   119, 119, 143, 143, 143, 143, 143, 66, 67, 68,
        /*  2220 */    69, 70, 71, 72, 73, 74, 0, 143, 2, 143,
        /*  2230 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  2240 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  2250 */    24, 143, 26, 27, 28, 29, 30, 31, 32, 143,
        /*  2260 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 143,
        /*  2270 */    44, 143, 106, 106, 48, 49, 50, 51, 52, 53,
        /*  2280 */    54, 55, 116, 116, 143, 119, 119, 143, 143, 143,
        /*  2290 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  2300 */    74, 0, 143, 2, 143, 4, 5, 6, 7, 8,
        /*  2310 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  2320 */    19, 20, 21, 22, 23, 24, 143, 26, 27, 28,
        /*  2330 */    29, 30, 31, 32, 143, 34, 35, 36, 37, 38,
        /*  2340 */    39, 40, 41, 42, 143, 44, 143, 106, 106, 48,
        /*  2350 */    49, 50, 51, 52, 53, 54, 55, 116, 116, 143,
        /*  2360 */   119, 119, 143, 143, 143, 143, 143, 66, 67, 68,
        /*  2370 */    69, 70, 71, 72, 73, 74, 0, 143, 2, 143,
        /*  2380 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  2390 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  2400 */    24, 143, 26, 27, 28, 29, 30, 31, 32, 143,
        /*  2410 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 143,
        /*  2420 */    44, 143, 106, 106, 48, 49, 50, 51, 52, 53,
        /*  2430 */    54, 55, 116, 116, 143, 119, 119, 143, 143, 143,
        /*  2440 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  2450 */    74, 0, 143, 2, 143, 4, 5, 6, 7, 8,
        /*  2460 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  2470 */    19, 20, 21, 22, 23, 24, 143, 26, 27, 28,
        /*  2480 */    29, 30, 31, 32, 143, 34, 35, 36, 37, 38,
        /*  2490 */    39, 40, 41, 42, 143, 44, 143, 106, 106, 48,
        /*  2500 */    49, 50, 51, 52, 53, 54, 55, 116, 116, 143,
        /*  2510 */   119, 119, 143, 143, 143, 143, 143, 66, 67, 68,
        /*  2520 */    69, 70, 71, 72, 73, 74, 0, 143, 2, 143,
        /*  2530 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  2540 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  2550 */    24, 143, 26, 27, 28, 29, 30, 31, 32, 143,
        /*  2560 */    34, 35, 36, 37, 38, 39, 40, 41, 42, 143,
        /*  2570 */    44, 143, 106, 106, 48, 49, 50, 51, 52, 53,
        /*  2580 */    54, 55, 116, 116, 143, 119, 119, 143, 143, 143,
        /*  2590 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  2600 */    74, 0, 143, 2, 143, 4, 5, 6, 7, 8,
        /*  2610 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  2620 */    19, 20, 21, 22, 23, 24, 143, 26, 27, 28,
        /*  2630 */    29, 30, 31, 32, 143, 34, 35, 36, 37, 38,
        /*  2640 */    39, 40, 41, 42, 143, 44, 143, 106, 106, 48,
        /*  2650 */    49, 50, 51, 52, 53, 54, 55, 116, 116, 143,
        /*  2660 */   119, 119, 143, 143, 143, 143, 143, 66, 67, 68,
        /*  2670 */    69, 70, 71, 72, 73, 74, 4, 5, 6, 7,
        /*  2680 */     8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*  2690 */    18, 19, 20, 21, 22, 23, 24, 143, 26, 27,
        /*  2700 */    28, 29, 30, 31, 143, 106, 34, 35, 36, 92,
        /*  2710 */    38, 39, 95, 41, 42, 116, 44, 143, 119, 143,
        /*  2720 */    48, 49, 50, 51, 52, 53, 54, 55, 143, 143,
        /*  2730 */   143, 143, 115, 143, 143, 143, 143, 143, 66, 67,
        /*  2740 */    68, 69, 70, 71, 72, 73, 74, 4, 5, 6,
        /*  2750 */     7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
        /*  2760 */    17, 18, 19, 20, 21, 22, 23, 24, 143, 26,
        /*  2770 */    27, 28, 29, 30, 31, 143, 106, 34, 35, 36,
        /*  2780 */    92, 38, 39, 95, 41, 42, 116, 44, 143, 119,
        /*  2790 */   143, 48, 49, 50, 51, 52, 53, 54, 55, 143,
        /*  2800 */   143, 143, 143, 115, 143, 143, 143, 143, 143, 66,
        /*  2810 */    67, 68, 69, 70, 71, 72, 73, 74, 4, 5,
        /*  2820 */     6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        /*  2830 */    16, 17, 18, 19, 20, 21, 22, 23, 24, 143,
        /*  2840 */    26, 27, 28, 29, 30, 31, 143, 106, 34, 35,
        /*  2850 */    36, 92, 38, 39, 95, 41, 42, 116, 44, 143,
        /*  2860 */   119, 143, 48, 49, 50, 51, 52, 53, 54, 55,
        /*  2870 */   143, 143, 143, 143, 115, 143, 143, 143, 143, 143,
        /*  2880 */    66, 67, 68, 69, 70, 71, 72, 73, 74, 4,
        /*  2890 */     5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        /*  2900 */    15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*  2910 */   143, 26, 27, 28, 29, 30, 31, 143, 106, 34,
        /*  2920 */    35, 36, 143, 38, 39, 143, 41, 42, 116, 44,
        /*  2930 */   143, 119, 106, 48, 49, 50, 51, 52, 53, 54,
        /*  2940 */    55, 143, 116, 143, 143, 119, 143, 143, 143, 143,
        /*  2950 */   143, 66, 67, 68, 69, 70, 71, 72, 73, 74,
        /*  2960 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  2970 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  2980 */    24, 143, 26, 27, 28, 29, 30, 31, 143, 106,
        /*  2990 */    34, 35, 36, 143, 38, 39, 143, 41, 42, 116,
        /*  3000 */    44, 143, 119, 106, 48, 49, 50, 51, 52, 53,
        /*  3010 */    54, 55, 143, 116, 143, 143, 119, 143, 143, 143,
        /*  3020 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  3030 */    74, 4, 5, 6, 7, 8, 9, 10, 11, 12,
        /*  3040 */    13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*  3050 */    23, 24, 143, 26, 27, 28, 29, 30, 31, 143,
        /*  3060 */   106, 34, 35, 36, 143, 38, 39, 143, 41, 42,
        /*  3070 */   116, 44, 143, 119, 106, 48, 49, 50, 51, 52,
        /*  3080 */    53, 54, 55, 143, 116, 143, 143, 119, 143, 143,
        /*  3090 */   143, 143, 143, 66, 67, 68, 69, 70, 71, 72,
        /*  3100 */    73, 74, 4, 5, 6, 7, 8, 9, 10, 11,
        /*  3110 */    12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        /*  3120 */    22, 23, 24, 143, 26, 27, 28, 29, 30, 31,
        /*  3130 */   143, 106, 34, 35, 36, 143, 38, 39, 143, 41,
        /*  3140 */    42, 116, 44, 143, 119, 143, 48, 49, 50, 51,
        /*  3150 */    52, 53, 54, 55, 143, 143, 143, 143, 143, 143,
        /*  3160 */   143, 143, 143, 143, 66, 67, 68, 69, 70, 71,
        /*  3170 */    72, 73, 74, 4, 5, 6, 7, 8, 9, 10,
        /*  3180 */    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*  3190 */    21, 22, 23, 24, 143, 26, 27, 28, 29, 30,
        /*  3200 */    31, 143, 143, 34, 35, 36, 143, 38, 39, 143,
        /*  3210 */    41, 42, 143, 44, 143, 143, 143, 48, 49, 50,
        /*  3220 */    51, 52, 53, 54, 55, 143, 143, 143, 143, 143,
        /*  3230 */   143, 143, 143, 143, 143, 66, 67, 68, 69, 70,
        /*  3240 */    71, 72, 73, 74, 4, 5, 6, 7, 8, 9,
        /*  3250 */    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        /*  3260 */    20, 21, 22, 23, 24, 143, 26, 27, 28, 29,
        /*  3270 */    30, 31, 143, 143, 34, 35, 36, 143, 38, 39,
        /*  3280 */   143, 41, 42, 143, 44, 143, 143, 143, 48, 49,
        /*  3290 */    50, 51, 52, 53, 54, 55, 143, 143, 143, 143,
        /*  3300 */   143, 143, 143, 143, 143, 143, 66, 67, 68, 69,
        /*  3310 */    70, 71, 72, 73, 74, 4, 5, 6, 7, 8,
        /*  3320 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  3330 */    19, 20, 21, 22, 23, 24, 143, 26, 27, 28,
        /*  3340 */    29, 30, 31, 143, 143, 34, 35, 36, 143, 38,
        /*  3350 */    39, 143, 41, 42, 143, 44, 143, 143, 143, 48,
        /*  3360 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  3370 */   143, 143, 143, 143, 143, 143, 143, 66, 67, 68,
        /*  3380 */    69, 70, 71, 72, 73, 74, 4, 5, 6, 7,
        /*  3390 */     8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*  3400 */    18, 19, 20, 21, 22, 23, 24, 143, 26, 27,
        /*  3410 */    28, 29, 30, 31, 143, 143, 34, 35, 36, 143,
        /*  3420 */    38, 39, 143, 41, 42, 143, 44, 143, 143, 143,
        /*  3430 */    48, 49, 50, 51, 52, 53, 54, 55, 143, 143,
        /*  3440 */   143, 143, 143, 143, 143, 143, 143, 143, 66, 67,
        /*  3450 */    68, 69, 70, 71, 72, 73, 74, 4, 5, 6,
        /*  3460 */     7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
        /*  3470 */    17, 18, 19, 20, 21, 22, 23, 24, 143, 26,
        /*  3480 */    27, 28, 29, 30, 31, 143, 143, 34, 35, 36,
        /*  3490 */   143, 38, 39, 143, 41, 42, 143, 44, 143, 143,
        /*  3500 */   143, 48, 49, 50, 51, 52, 53, 54, 55, 143,
        /*  3510 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 66,
        /*  3520 */    67, 68, 69, 70, 71, 72, 73, 74, 4, 5,
        /*  3530 */     6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        /*  3540 */    16, 17, 18, 19, 20, 21, 22, 23, 24, 143,
        /*  3550 */    26, 27, 28, 29, 30, 31, 143, 143, 34, 35,
        /*  3560 */    36, 143, 38, 39, 143, 41, 42, 143, 44, 143,
        /*  3570 */   143, 143, 48, 49, 50, 51, 52, 53, 54, 55,
        /*  3580 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  3590 */    66, 67, 68, 69, 70, 71, 72, 73, 74, 4,
        /*  3600 */     5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        /*  3610 */    15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*  3620 */   143, 26, 27, 28, 29, 30, 31, 143, 143, 34,
        /*  3630 */    35, 36, 143, 38, 39, 143, 41, 42, 143, 44,
        /*  3640 */   143, 143, 143, 48, 49, 50, 51, 52, 53, 54,
        /*  3650 */    55, 143, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  3660 */   143, 66, 67, 68, 69, 70, 71, 72, 73, 74,
        /*  3670 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  3680 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  3690 */    24, 143, 26, 27, 28, 29, 30, 31, 143, 143,
        /*  3700 */    34, 35, 36, 143, 38, 39, 143, 41, 42, 143,
        /*  3710 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  3720 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  3730 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  3740 */    74, 4, 5, 6, 7, 8, 9, 10, 11, 12,
        /*  3750 */    13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*  3760 */    23, 24, 143, 26, 27, 28, 29, 30, 31, 143,
        /*  3770 */   143, 34, 35, 36, 143, 38, 39, 143, 41, 42,
        /*  3780 */   143, 44, 143, 143, 143, 48, 49, 50, 51, 52,
        /*  3790 */    53, 54, 55, 143, 143, 143, 143, 143, 143, 143,
        /*  3800 */   143, 143, 143, 66, 67, 68, 69, 70, 71, 72,
        /*  3810 */    73, 74, 4, 5, 6, 7, 8, 9, 10, 11,
        /*  3820 */    12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        /*  3830 */    22, 23, 24, 143, 26, 27, 28, 29, 30, 31,
        /*  3840 */   143, 143, 34, 35, 36, 143, 38, 39, 143, 41,
        /*  3850 */    42, 143, 44, 143, 143, 143, 48, 49, 50, 51,
        /*  3860 */    52, 53, 54, 55, 143, 143, 143, 143, 143, 143,
        /*  3870 */   143, 143, 143, 143, 66, 67, 68, 69, 70, 71,
        /*  3880 */    72, 73, 74, 4, 5, 6, 7, 8, 9, 10,
        /*  3890 */    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*  3900 */    21, 22, 23, 24, 143, 26, 27, 28, 29, 30,
        /*  3910 */    31, 143, 143, 34, 35, 36, 143, 38, 39, 143,
        /*  3920 */    41, 42, 143, 44, 143, 143, 143, 48, 49, 50,
        /*  3930 */    51, 52, 53, 54, 55, 143, 143, 143, 143, 143,
        /*  3940 */   143, 143, 143, 143, 143, 66, 67, 68, 69, 70,
        /*  3950 */    71, 72, 73, 74, 4, 5, 6, 7, 8, 9,
        /*  3960 */    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        /*  3970 */    20, 21, 22, 23, 24, 143, 26, 27, 28, 29,
        /*  3980 */    30, 31, 143, 143, 34, 35, 36, 143, 38, 39,
        /*  3990 */   143, 41, 42, 143, 44, 143, 143, 143, 48, 49,
        /*  4000 */    50, 51, 52, 53, 54, 55, 143, 143, 143, 143,
        /*  4010 */   143, 143, 143, 143, 143, 143, 66, 67, 68, 69,
        /*  4020 */    70, 71, 72, 73, 74, 4, 5, 6, 7, 8,
        /*  4030 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  4040 */    19, 20, 21, 22, 23, 24, 143, 26, 27, 28,
        /*  4050 */    29, 30, 31, 143, 143, 34, 35, 36, 143, 38,
        /*  4060 */    39, 143, 41, 42, 143, 44, 143, 143, 143, 48,
        /*  4070 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  4080 */   143, 143, 143, 143, 143, 143, 143, 66, 67, 68,
        /*  4090 */    69, 70, 71, 72, 73, 74, 4, 5, 6, 7,
        /*  4100 */     8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*  4110 */    18, 19, 20, 21, 22, 23, 24, 143, 26, 27,
        /*  4120 */    28, 29, 30, 31, 143, 143, 34, 35, 36, 143,
        /*  4130 */    38, 39, 143, 41, 42, 143, 44, 143, 143, 143,
        /*  4140 */    48, 49, 50, 51, 52, 53, 54, 55, 143, 143,
        /*  4150 */   143, 143, 143, 143, 143, 143, 143, 143, 66, 67,
        /*  4160 */    68, 69, 70, 71, 72, 73, 74, 4, 5, 6,
        /*  4170 */     7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
        /*  4180 */    17, 18, 19, 20, 21, 22, 23, 24, 143, 26,
        /*  4190 */    27, 28, 29, 30, 31, 143, 143, 34, 35, 36,
        /*  4200 */   143, 38, 39, 143, 41, 42, 143, 44, 143, 143,
        /*  4210 */   143, 48, 49, 50, 51, 52, 53, 54, 55, 143,
        /*  4220 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 66,
        /*  4230 */    67, 68, 69, 70, 71, 72, 73, 74, 4, 5,
        /*  4240 */     6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        /*  4250 */    16, 17, 18, 19, 20, 21, 22, 23, 24, 143,
        /*  4260 */    26, 27, 28, 29, 30, 31, 143, 143, 34, 35,
        /*  4270 */    36, 143, 38, 39, 143, 41, 42, 143, 44, 143,
        /*  4280 */   143, 143, 48, 49, 50, 51, 52, 53, 54, 55,
        /*  4290 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  4300 */    66, 67, 68, 69, 70, 71, 72, 73, 74, 4,
        /*  4310 */     5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        /*  4320 */    15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*  4330 */   143, 26, 27, 28, 29, 30, 31, 143, 143, 34,
        /*  4340 */    35, 36, 143, 38, 39, 143, 41, 42, 143, 44,
        /*  4350 */   143, 143, 143, 48, 49, 50, 51, 52, 53, 54,
        /*  4360 */    55, 143, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  4370 */   143, 66, 67, 68, 69, 70, 71, 72, 73, 74,
        /*  4380 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  4390 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  4400 */    24, 143, 26, 27, 28, 29, 30, 31, 143, 143,
        /*  4410 */    34, 35, 36, 143, 38, 39, 143, 41, 42, 143,
        /*  4420 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  4430 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  4440 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  4450 */    74, 4, 5, 6, 7, 8, 9, 10, 11, 12,
        /*  4460 */    13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*  4470 */    23, 24, 143, 26, 27, 28, 29, 30, 31, 143,
        /*  4480 */   143, 34, 35, 36, 143, 38, 39, 143, 41, 42,
        /*  4490 */   143, 44, 143, 143, 143, 48, 49, 50, 51, 52,
        /*  4500 */    53, 54, 55, 143, 143, 143, 143, 143, 143, 143,
        /*  4510 */   143, 143, 143, 66, 67, 68, 69, 70, 71, 72,
        /*  4520 */    73, 74, 4, 5, 6, 7, 8, 9, 10, 11,
        /*  4530 */    12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        /*  4540 */    22, 23, 24, 143, 26, 27, 28, 29, 30, 31,
        /*  4550 */   143, 143, 34, 35, 36, 143, 38, 39, 143, 41,
        /*  4560 */    42, 143, 44, 143, 143, 143, 48, 49, 50, 51,
        /*  4570 */    52, 53, 54, 55, 143, 143, 143, 143, 143, 143,
        /*  4580 */   143, 143, 143, 143, 66, 67, 68, 69, 70, 71,
        /*  4590 */    72, 73, 74, 4, 5, 6, 7, 8, 9, 10,
        /*  4600 */    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*  4610 */    21, 22, 23, 24, 143, 26, 27, 28, 29, 30,
        /*  4620 */    31, 143, 143, 34, 35, 36, 143, 38, 39, 143,
        /*  4630 */    41, 42, 143, 44, 143, 143, 143, 48, 49, 50,
        /*  4640 */    51, 52, 53, 54, 55, 143, 143, 143, 143, 143,
        /*  4650 */   143, 143, 143, 143, 143, 66, 67, 68, 69, 70,
        /*  4660 */    71, 72, 73, 74, 4, 5, 6, 7, 8, 9,
        /*  4670 */    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        /*  4680 */    20, 21, 22, 23, 24, 143, 26, 27, 28, 29,
        /*  4690 */    30, 31, 143, 143, 34, 35, 36, 143, 38, 39,
        /*  4700 */   143, 41, 42, 143, 44, 143, 143, 143, 48, 49,
        /*  4710 */    50, 51, 52, 53, 54, 55, 143, 143, 143, 143,
        /*  4720 */   143, 143, 143, 143, 143, 143, 66, 67, 68, 69,
        /*  4730 */    70, 71, 72, 73, 74, 4, 5, 6, 7, 8,
        /*  4740 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  4750 */    19, 20, 21, 22, 23, 24, 143, 26, 27, 28,
        /*  4760 */    29, 30, 31, 143, 143, 34, 35, 36, 143, 38,
        /*  4770 */    39, 143, 41, 42, 143, 44, 143, 143, 143, 48,
        /*  4780 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  4790 */   143, 143, 143, 143, 143, 143, 143, 66, 67, 68,
        /*  4800 */    69, 70, 71, 72, 73, 74, 4, 5, 6, 7,
        /*  4810 */     8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*  4820 */    18, 19, 20, 21, 22, 23, 24, 143, 26, 27,
        /*  4830 */    28, 29, 30, 31, 143, 143, 34, 35, 36, 143,
        /*  4840 */    38, 39, 143, 41, 42, 143, 44, 143, 143, 143,
        /*  4850 */    48, 49, 50, 51, 52, 53, 54, 55, 143, 143,
        /*  4860 */   143, 143, 143, 143, 143, 143, 143, 143, 66, 67,
        /*  4870 */    68, 69, 70, 71, 72, 73, 74, 4, 5, 6,
        /*  4880 */     7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
        /*  4890 */    17, 18, 19, 20, 21, 22, 23, 24, 143, 26,
        /*  4900 */    27, 28, 29, 30, 31, 143, 143, 34, 35, 36,
        /*  4910 */   143, 38, 39, 143, 41, 42, 143, 44, 143, 143,
        /*  4920 */   143, 48, 49, 50, 51, 52, 53, 54, 55, 143,
        /*  4930 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 66,
        /*  4940 */    67, 68, 69, 70, 71, 72, 73, 74, 4, 5,
        /*  4950 */     6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        /*  4960 */    16, 17, 18, 19, 20, 21, 22, 23, 24, 143,
        /*  4970 */    26, 27, 28, 29, 30, 31, 143, 143, 34, 35,
        /*  4980 */    36, 143, 38, 39, 143, 41, 42, 143, 44, 143,
        /*  4990 */   143, 143, 48, 49, 50, 51, 52, 53, 54, 55,
        /*  5000 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  5010 */    66, 67, 68, 69, 70, 71, 72, 73, 74, 4,
        /*  5020 */     5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        /*  5030 */    15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*  5040 */   143, 26, 27, 28, 29, 30, 31, 143, 143, 34,
        /*  5050 */    35, 36, 143, 38, 39, 143, 41, 42, 143, 44,
        /*  5060 */   143, 143, 143, 48, 49, 50, 51, 52, 53, 54,
        /*  5070 */    55, 143, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  5080 */   143, 66, 67, 68, 69, 70, 71, 72, 73, 74,
        /*  5090 */     4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        /*  5100 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  5110 */    24, 143, 26, 27, 28, 29, 30, 31, 143, 143,
        /*  5120 */    34, 35, 36, 143, 38, 39, 143, 41, 42, 143,
        /*  5130 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  5140 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  5150 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  5160 */    74, 4, 5, 6, 7, 8, 9, 10, 11, 12,
        /*  5170 */    13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*  5180 */    23, 24, 143, 26, 27, 28, 29, 30, 31, 143,
        /*  5190 */   143, 34, 35, 36, 143, 38, 39, 143, 41, 42,
        /*  5200 */   143, 44, 143, 143, 143, 48, 49, 50, 51, 52,
        /*  5210 */    53, 54, 55, 143, 143, 143, 143, 143, 143, 143,
        /*  5220 */   143, 143, 143, 66, 67, 68, 69, 70, 71, 72,
        /*  5230 */    73, 74, 4, 5, 6, 7, 8, 9, 10, 11,
        /*  5240 */    12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        /*  5250 */    22, 23, 24, 143, 26, 27, 28, 29, 30, 31,
        /*  5260 */     3, 143, 5, 35, 36, 143, 38, 39, 143, 41,
        /*  5270 */    42, 143, 44, 143, 143, 143, 48, 49, 50, 51,
        /*  5280 */    52, 53, 54, 55, 143, 143, 143, 30, 143, 143,
        /*  5290 */   143, 34, 143, 143, 66, 67, 68, 69, 70, 71,
        /*  5300 */    72, 73, 74, 4, 5, 6, 7, 8, 9, 10,
        /*  5310 */    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*  5320 */    21, 22, 23, 24, 143, 26, 27, 28, 29, 30,
        /*  5330 */    31, 3, 143, 5, 35, 36, 143, 38, 39, 143,
        /*  5340 */    41, 42, 143, 44, 143, 143, 143, 48, 49, 50,
        /*  5350 */    51, 52, 53, 54, 55, 143, 143, 143, 30, 143,
        /*  5360 */   143, 143, 34, 143, 143, 66, 67, 68, 69, 70,
        /*  5370 */    71, 72, 73, 74, 4, 5, 6, 7, 8, 9,
        /*  5380 */    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        /*  5390 */    20, 21, 22, 23, 24, 143, 26, 27, 28, 29,
        /*  5400 */    30, 31, 3, 143, 5, 35, 36, 143, 38, 39,
        /*  5410 */   143, 41, 42, 143, 44, 143, 143, 143, 48, 49,
        /*  5420 */    50, 51, 52, 53, 54, 55, 143, 143, 143, 30,
        /*  5430 */   143, 143, 143, 143, 143, 143, 66, 67, 68, 69,
        /*  5440 */    70, 71, 72, 73, 74, 3, 4, 5, 6, 7,
        /*  5450 */   143, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*  5460 */    18, 19, 20, 21, 22, 23, 24, 143, 75, 27,
        /*  5470 */    28, 29, 79, 80, 81, 82, 83, 84, 85, 86,
        /*  5480 */    87, 143, 143, 3, 91, 5, 143, 94, 143, 143,
        /*  5490 */   143, 143, 143, 100, 143, 143, 54, 55, 56, 57,
        /*  5500 */    58, 59, 60, 61, 62, 63, 64, 65, 3, 4,
        /*  5510 */     5, 6, 7, 143, 9, 10, 11, 12, 13, 14,
        /*  5520 */    15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*  5530 */   143, 143, 27, 28, 29, 143, 56, 57, 58, 59,
        /*  5540 */    60, 61, 62, 63, 64, 65, 143, 143, 143, 3,
        /*  5550 */   143, 5, 143, 143, 143, 143, 143, 143, 143, 54,
        /*  5560 */    55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
        /*  5570 */    65, 3, 4, 5, 6, 7, 30, 9, 10, 11,
        /*  5580 */    12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        /*  5590 */    22, 23, 24, 143, 143, 27, 28, 29, 143, 143,
        /*  5600 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  5610 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 90,
        /*  5620 */   143, 143, 54, 55, 56, 57, 58, 59, 60, 61,
        /*  5630 */    62, 63, 64, 65, 5, 106, 143, 8, 143, 143,
        /*  5640 */   143, 143, 143, 143, 143, 116, 143, 118, 119, 20,
        /*  5650 */    21, 143, 143, 143, 143, 26, 27, 28, 143, 30,
        /*  5660 */    31, 143, 143, 143, 35, 36, 143, 38, 39, 143,
        /*  5670 */    41, 42, 84, 44, 143, 143, 143, 48, 49, 50,
        /*  5680 */    51, 52, 53, 54, 55, 143, 143, 143, 143, 143,
        /*  5690 */   143, 103, 104, 105, 106, 66, 67, 68, 69, 70,
        /*  5700 */    71, 72, 73, 74, 116, 75, 143, 119, 143, 143,
        /*  5710 */   143, 123, 124, 143, 84, 143, 143, 87, 143, 143,
        /*  5720 */   143, 143, 134, 93, 143, 143, 143, 143, 98, 99,
        /*  5730 */   100, 143, 143, 103, 104, 105, 106, 107, 108, 109,
        /*  5740 */   110, 111, 112, 113, 143, 143, 116, 143, 90, 119,
        /*  5750 */    90, 143, 143, 123, 124, 125, 126, 127, 143, 143,
        /*  5760 */   143, 131, 132, 133, 106, 143, 106, 143, 138, 139,
        /*  5770 */   140, 141, 142, 75, 116, 143, 116, 119, 143, 119,
        /*  5780 */   143, 143, 84, 143, 143, 87, 143, 143, 143, 143,
        /*  5790 */   143, 93, 143, 143, 143, 143, 98, 99, 100, 143,
        /*  5800 */   143, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        /*  5810 */   112, 113, 143, 143, 116, 143, 143, 119, 143, 90,
        /*  5820 */   143, 123, 124, 125, 126, 127, 143, 143, 143, 131,
        /*  5830 */   132, 133, 75, 143, 143, 106, 138, 139, 140, 141,
        /*  5840 */   142, 84, 143, 143, 87, 116, 143, 143, 119, 143,
        /*  5850 */    93, 143, 143, 143, 143, 98, 99, 100, 143, 143,
        /*  5860 */   103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        /*  5870 */   113, 143, 143, 116, 143, 143, 119, 143, 143, 143,
        /*  5880 */   123, 124, 125, 126, 127, 143, 143, 143, 131, 132,
        /*  5890 */   133, 143, 143, 75, 143, 138, 139, 140, 141, 142,
        /*  5900 */   143, 143, 84, 143, 143, 87, 143, 143, 143, 143,
        /*  5910 */   143, 93, 143, 143, 143, 143, 98, 99, 100, 143,
        /*  5920 */   143, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        /*  5930 */   112, 113, 143, 143, 116, 143, 143, 119, 143, 90,
        /*  5940 */   143, 123, 124, 125, 126, 127, 143, 143, 143, 131,
        /*  5950 */   132, 133, 75, 143, 143, 106, 138, 139, 140, 141,
        /*  5960 */   142, 84, 143, 143, 87, 116, 143, 143, 119, 143,
        /*  5970 */    93, 143, 143, 143, 143, 98, 99, 100, 143, 143,
        /*  5980 */   103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        /*  5990 */   113, 143, 143, 116, 143, 143, 119, 143, 143, 143,
        /*  6000 */   123, 124, 125, 126, 127, 143, 143, 143, 131, 132,
        /*  6010 */   133, 143, 143, 75, 143, 138, 139, 140, 141, 142,
        /*  6020 */   143, 143, 84, 143, 143, 87, 143, 143, 143, 143,
        /*  6030 */   143, 93, 143, 143, 143, 143, 98, 99, 100, 143,
        /*  6040 */   143, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        /*  6050 */   112, 113, 143, 143, 116, 143, 143, 119, 143, 90,
        /*  6060 */   143, 123, 124, 125, 126, 127, 143, 143, 143, 131,
        /*  6070 */   132, 133, 75, 143, 143, 106, 138, 139, 140, 141,
        /*  6080 */   142, 84, 143, 143, 87, 116, 143, 143, 119, 143,
        /*  6090 */    93, 143, 143, 143, 143, 98, 99, 100, 143, 143,
        /*  6100 */   103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        /*  6110 */   113, 143, 143, 116, 143, 143, 119, 143, 143, 143,
        /*  6120 */   123, 124, 125, 126, 127, 143, 143, 143, 131, 132,
        /*  6130 */   133, 143, 143, 75, 143, 138, 139, 140, 141, 142,
        /*  6140 */   143, 143, 84, 143, 143, 87, 143, 143, 143, 143,
        /*  6150 */   143, 93, 143, 143, 143, 143, 98, 99, 100, 143,
        /*  6160 */   143, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        /*  6170 */   112, 113, 143, 143, 116, 143, 143, 119, 143, 90,
        /*  6180 */   143, 123, 124, 125, 126, 127, 143, 143, 143, 131,
        /*  6190 */   132, 133, 75, 143, 143, 106, 138, 139, 140, 141,
        /*  6200 */   142, 84, 143, 143, 87, 116, 143, 143, 119, 143,
        /*  6210 */    93, 143, 143, 143, 143, 98, 99, 100, 143, 143,
        /*  6220 */   103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        /*  6230 */   113, 143, 143, 116, 143, 143, 119, 143, 143, 143,
        /*  6240 */   123, 124, 125, 126, 127, 143, 143, 143, 131, 132,
        /*  6250 */   133, 143, 143, 75, 143, 138, 139, 140, 141, 142,
        /*  6260 */   143, 143, 84, 143, 143, 87, 143, 143, 143, 143,
        /*  6270 */   143, 143, 143, 143, 143, 143, 98, 99, 100, 143,
        /*  6280 */   102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        /*  6290 */   112, 113, 143, 143, 116, 143, 143, 119, 143, 90,
        /*  6300 */   143, 123, 124, 125, 126, 127, 143, 143, 143, 131,
        /*  6310 */   132, 133, 75, 143, 143, 106, 138, 139, 140, 141,
        /*  6320 */   142, 84, 143, 143, 87, 116, 143, 143, 119, 143,
        /*  6330 */   143, 143, 143, 143, 143, 98, 99, 100, 101, 143,
        /*  6340 */   103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        /*  6350 */   113, 143, 143, 116, 143, 143, 119, 143, 143, 143,
        /*  6360 */   123, 124, 125, 126, 127, 143, 143, 143, 131, 132,
        /*  6370 */   133, 143, 90, 143, 143, 138, 139, 140, 141, 142,
        /*  6380 */   143, 5, 143, 143, 8, 143, 143, 143, 106, 143,
        /*  6390 */   143, 143, 143, 143, 143, 143, 20, 21, 116, 143,
        /*  6400 */   143, 119, 26, 27, 28, 143, 30, 31, 143, 143,
        /*  6410 */   143, 35, 143, 143, 38, 39, 143, 41, 143, 143,
        /*  6420 */    44, 143, 105, 106, 48, 49, 50, 51, 52, 53,
        /*  6430 */    54, 55, 143, 116, 143, 143, 119, 143, 143, 8,
        /*  6440 */   123, 124, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  6450 */    74, 20, 21, 136, 137, 143, 143, 26, 27, 28,
        /*  6460 */   143, 30, 31, 143, 143, 143, 35, 143, 143, 38,
        /*  6470 */    39, 40, 41, 143, 143, 44, 143, 143, 143, 48,
        /*  6480 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  6490 */   143, 143, 143, 143, 8, 143, 143, 66, 67, 68,
        /*  6500 */    69, 70, 71, 72, 73, 74, 20, 21, 143, 143,
        /*  6510 */   143, 143, 26, 27, 28, 143, 30, 31, 143, 143,
        /*  6520 */   143, 35, 143, 143, 38, 39, 40, 41, 143, 143,
        /*  6530 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  6540 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 8,
        /*  6550 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  6560 */    74, 20, 21, 143, 143, 143, 143, 26, 27, 28,
        /*  6570 */   143, 30, 31, 143, 143, 143, 35, 143, 143, 38,
        /*  6580 */    39, 40, 41, 143, 143, 44, 143, 143, 143, 48,
        /*  6590 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  6600 */   143, 143, 143, 143, 8, 143, 143, 66, 67, 68,
        /*  6610 */    69, 70, 71, 72, 73, 74, 20, 21, 143, 143,
        /*  6620 */   143, 143, 26, 27, 28, 143, 30, 31, 143, 143,
        /*  6630 */   143, 35, 143, 143, 38, 39, 40, 41, 143, 143,
        /*  6640 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  6650 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 8,
        /*  6660 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  6670 */    74, 20, 21, 143, 143, 143, 143, 26, 27, 28,
        /*  6680 */   143, 30, 31, 143, 143, 34, 35, 143, 143, 38,
        /*  6690 */    39, 143, 41, 143, 143, 44, 143, 143, 143, 48,
        /*  6700 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  6710 */   143, 143, 143, 143, 8, 143, 143, 66, 67, 68,
        /*  6720 */    69, 70, 71, 72, 73, 74, 20, 21, 143, 143,
        /*  6730 */   143, 143, 26, 27, 28, 143, 30, 31, 143, 143,
        /*  6740 */    34, 35, 143, 143, 38, 39, 143, 41, 143, 143,
        /*  6750 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  6760 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 8,
        /*  6770 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  6780 */    74, 20, 21, 143, 143, 143, 143, 26, 27, 28,
        /*  6790 */   143, 30, 31, 143, 143, 143, 35, 143, 143, 38,
        /*  6800 */    39, 40, 41, 143, 143, 44, 143, 143, 143, 48,
        /*  6810 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  6820 */   143, 143, 143, 143, 8, 143, 143, 66, 67, 68,
        /*  6830 */    69, 70, 71, 72, 73, 74, 20, 21, 143, 143,
        /*  6840 */   143, 143, 26, 27, 28, 143, 30, 31, 143, 143,
        /*  6850 */   143, 35, 143, 143, 38, 39, 40, 41, 143, 143,
        /*  6860 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  6870 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 8,
        /*  6880 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  6890 */    74, 20, 21, 143, 143, 143, 143, 26, 27, 28,
        /*  6900 */   143, 30, 31, 143, 143, 143, 35, 143, 143, 38,
        /*  6910 */    39, 143, 41, 143, 143, 44, 143, 143, 143, 48,
        /*  6920 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  6930 */   143, 143, 143, 143, 8, 143, 143, 66, 67, 68,
        /*  6940 */    69, 70, 71, 72, 73, 74, 20, 21, 143, 143,
        /*  6950 */   143, 143, 26, 27, 28, 143, 30, 31, 143, 143,
        /*  6960 */   143, 35, 143, 143, 38, 39, 143, 41, 143, 143,
        /*  6970 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  6980 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 8,
        /*  6990 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  7000 */    74, 20, 21, 143, 143, 143, 143, 26, 27, 28,
        /*  7010 */   143, 30, 31, 143, 143, 143, 35, 143, 143, 38,
        /*  7020 */    39, 143, 41, 143, 143, 44, 143, 143, 143, 48,
        /*  7030 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  7040 */   143, 143, 143, 143, 8, 143, 143, 66, 67, 68,
        /*  7050 */    69, 70, 71, 72, 73, 74, 20, 21, 143, 143,
        /*  7060 */   143, 143, 26, 27, 28, 143, 30, 31, 143, 143,
        /*  7070 */   143, 35, 143, 143, 38, 39, 143, 41, 143, 143,
        /*  7080 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  7090 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 8,
        /*  7100 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  7110 */    74, 20, 21, 143, 143, 143, 143, 26, 27, 28,
        /*  7120 */   143, 30, 31, 143, 143, 143, 35, 143, 143, 38,
        /*  7130 */    39, 143, 41, 143, 143, 44, 143, 143, 143, 48,
        /*  7140 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  7150 */   143, 143, 143, 143, 8, 143, 143, 66, 67, 68,
        /*  7160 */    69, 70, 71, 72, 73, 74, 20, 21, 143, 143,
        /*  7170 */   143, 143, 26, 27, 28, 143, 30, 31, 143, 143,
        /*  7180 */   143, 35, 143, 143, 38, 39, 143, 41, 143, 143,
        /*  7190 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  7200 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 8,
        /*  7210 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  7220 */    74, 20, 21, 143, 143, 143, 143, 26, 27, 28,
        /*  7230 */   143, 30, 31, 143, 143, 143, 35, 143, 143, 38,
        /*  7240 */    39, 143, 41, 143, 143, 44, 143, 143, 143, 48,
        /*  7250 */    49, 50, 51, 52, 53, 54, 55, 143, 143, 143,
        /*  7260 */   143, 143, 143, 143, 8, 143, 143, 66, 67, 68,
        /*  7270 */    69, 70, 71, 72, 73, 74, 20, 21, 143, 143,
        /*  7280 */   143, 143, 26, 27, 28, 143, 30, 31, 143, 143,
        /*  7290 */   143, 35, 143, 143, 38, 39, 143, 41, 143, 143,
        /*  7300 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 53,
        /*  7310 */    54, 55, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  7320 */   143, 143, 66, 67, 68, 69, 70, 71, 72, 73,
        /*  7330 */    74, 3, 4, 5, 6, 7, 143, 9, 10, 11,
        /*  7340 */    12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        /*  7350 */    22, 23, 24, 143, 143, 27, 28, 29, 143, 143,
        /*  7360 */     4, 5, 6, 7, 36, 9, 10, 11, 12, 13,
        /*  7370 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  7380 */    24, 143, 143, 27, 28, 29, 30, 143, 4, 143,
        /*  7390 */     6, 7, 36, 9, 10, 11, 12, 13, 14, 15,
        /*  7400 */    16, 17, 18, 19, 20, 21, 22, 23, 24, 143,
        /*  7410 */   143, 27, 28, 29, 30, 143, 143, 4, 5, 6,
        /*  7420 */     7, 143, 9, 10, 11, 12, 13, 14, 15, 16,
        /*  7430 */    17, 18, 19, 20, 21, 22, 23, 24, 54, 55,
        /*  7440 */    27, 28, 29, 30, 143, 4, 5, 6, 7, 36,
        /*  7450 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  7460 */    19, 20, 21, 22, 23, 24, 143, 143, 27, 28,
        /*  7470 */    29, 30, 143, 4, 5, 6, 7, 36, 9, 10,
        /*  7480 */    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*  7490 */    21, 22, 23, 24, 143, 143, 27, 28, 29, 30,
        /*  7500 */   143, 4, 5, 6, 7, 36, 9, 10, 11, 12,
        /*  7510 */    13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*  7520 */    23, 24, 143, 143, 27, 28, 29, 30, 143, 4,
        /*  7530 */     5, 6, 7, 36, 9, 10, 11, 12, 13, 14,
        /*  7540 */    15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*  7550 */   143, 143, 27, 28, 29, 30, 143, 4, 5, 6,
        /*  7560 */     7, 36, 9, 10, 11, 12, 13, 14, 15, 16,
        /*  7570 */    17, 18, 19, 20, 21, 22, 23, 24, 143, 143,
        /*  7580 */    27, 28, 29, 30, 143, 4, 5, 6, 7, 36,
        /*  7590 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  7600 */    19, 20, 21, 22, 23, 24, 143, 143, 27, 28,
        /*  7610 */    29, 30, 143, 4, 5, 6, 7, 36, 9, 10,
        /*  7620 */    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*  7630 */    21, 22, 23, 24, 143, 143, 27, 28, 29, 30,
        /*  7640 */   143, 4, 5, 6, 7, 36, 9, 10, 11, 12,
        /*  7650 */    13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*  7660 */    23, 24, 143, 143, 27, 28, 29, 30, 143, 4,
        /*  7670 */     5, 6, 7, 36, 9, 10, 11, 12, 13, 14,
        /*  7680 */    15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*  7690 */   143, 143, 27, 28, 29, 30, 143, 4, 5, 6,
        /*  7700 */     7, 36, 9, 10, 11, 12, 13, 14, 15, 16,
        /*  7710 */    17, 18, 19, 20, 21, 22, 23, 24, 143, 143,
        /*  7720 */    27, 28, 29, 30, 143, 4, 5, 6, 7, 36,
        /*  7730 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  7740 */    19, 20, 21, 22, 23, 24, 143, 143, 27, 28,
        /*  7750 */    29, 30, 143, 4, 5, 6, 7, 36, 9, 10,
        /*  7760 */    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        /*  7770 */    21, 22, 23, 24, 143, 143, 27, 28, 29, 30,
        /*  7780 */   143, 4, 5, 6, 7, 36, 9, 10, 11, 12,
        /*  7790 */    13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        /*  7800 */    23, 24, 143, 143, 27, 28, 29, 143, 143, 4,
        /*  7810 */   143, 6, 7, 36, 9, 10, 11, 12, 13, 14,
        /*  7820 */    15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*  7830 */   143, 143, 27, 28, 29, 143, 143, 143, 4, 5,
        /*  7840 */     6, 7, 143, 9, 10, 11, 12, 13, 14, 15,
        /*  7850 */    16, 17, 18, 19, 20, 21, 22, 23, 24, 54,
        /*  7860 */    55, 27, 28, 29, 143, 143, 4, 143, 6, 7,
        /*  7870 */    36, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*  7880 */    18, 19, 20, 21, 22, 23, 24, 143, 143, 27,
        /*  7890 */    28, 29, 143, 143, 143, 4, 34, 6, 7, 143,
        /*  7900 */     9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        /*  7910 */    19, 20, 21, 22, 23, 24, 143, 143, 27, 28,
        /*  7920 */    29, 143, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  7930 */   143, 143, 143, 42, 143, 143, 143, 143, 4, 143,
        /*  7940 */     6, 7, 143, 9, 10, 11, 12, 13, 14, 15,
        /*  7950 */    16, 17, 18, 19, 20, 21, 22, 23, 24, 143,
        /*  7960 */   143, 27, 28, 29, 143, 143, 4, 143, 6, 7,
        /*  7970 */    36, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*  7980 */    18, 19, 20, 21, 22, 23, 24, 143, 143, 27,
        /*  7990 */    28, 29, 143, 143, 4, 143, 6, 7, 36, 9,
        /*  8000 */    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        /*  8010 */    20, 21, 22, 23, 24, 143, 143, 27, 28, 29,
        /*  8020 */   143, 143, 4, 143, 6, 7, 36, 9, 10, 11,
        /*  8030 */    12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        /*  8040 */    22, 23, 24, 143, 143, 27, 28, 29, 143, 143,
        /*  8050 */     4, 143, 6, 7, 36, 9, 10, 11, 12, 13,
        /*  8060 */    14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        /*  8070 */    24, 143, 143, 27, 28, 29, 143, 143, 4, 143,
        /*  8080 */     6, 7, 36, 9, 10, 11, 12, 13, 14, 15,
        /*  8090 */    16, 17, 18, 19, 20, 21, 22, 23, 24, 143,
        /*  8100 */   143, 27, 28, 29, 30, 143, 4, 143, 6, 7,
        /*  8110 */   143, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        /*  8120 */    18, 19, 20, 21, 22, 23, 24, 143, 143, 27,
        /*  8130 */    28, 29, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  8140 */   143, 143, 143, 143, 42, 143, 143, 143, 143, 4,
        /*  8150 */   143, 6, 7, 143, 9, 10, 11, 12, 13, 14,
        /*  8160 */    15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        /*  8170 */     8, 143, 27, 28, 29, 143, 143, 143, 143, 143,
        /*  8180 */   143, 143, 20, 21, 143, 143, 143, 143, 26, 27,
        /*  8190 */    28, 143, 30, 31, 143, 143, 143, 35, 143, 143,
        /*  8200 */   143, 39, 143, 41, 143, 143, 44, 143, 143, 143,
        /*  8210 */    48, 49, 50, 51, 52, 53, 54, 55, 143, 8,
        /*  8220 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  8230 */   143, 20, 21, 143, 143, 73, 143, 26, 27, 28,
        /*  8240 */   143, 30, 31, 143, 143, 143, 35, 143, 143, 143,
        /*  8250 */    39, 143, 41, 143, 143, 44, 143, 143, 143, 48,
        /*  8260 */    49, 50, 51, 52, 53, 54, 55, 143, 8, 143,
        /*  8270 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
        /*  8280 */    20, 21, 143, 143, 73, 143, 26, 27, 28, 143,
        /*  8290 */   143, 31, 143, 143, 143, 35, 143, 143, 143, 39,
        /*  8300 */   143, 41, 143, 143, 44, 143, 143, 143, 48, 49,
        /*  8310 */    50, 51, 52, 53, 54, 55, 143, 8, 143, 143,
        /*  8320 */   143, 143, 143, 143, 143, 143, 143, 143, 143, 20,
        /*  8330 */    21, 143, 143, 73, 143, 26, 27, 28, 143, 143,
        /*  8340 */    31, 143, 143, 143, 35, 36, 143, 143, 143, 143,
        /*  8350 */    41, 143, 143, 44, 143, 143, 143, 48, 49, 50,
        /*  8360 */    51, 52, 143, 54, 55, 143, 8, 143, 143, 143,
        /*  8370 */   143, 143, 143, 143, 143, 143, 143, 143, 20, 21,
        /*  8380 */   143, 143, 73, 143, 26, 27, 28, 143, 143, 31,
        /*  8390 */   143, 143, 143, 35, 36, 143, 143, 143, 143, 41,
        /*  8400 */   143, 143, 44, 143, 143, 143, 48, 49, 50, 51,
        /*  8410 */    52, 143, 54, 55, 143, 8, 143, 143, 143, 143,
        /*  8420 */   143, 143, 143, 143, 143, 143, 143, 20, 21, 143,
        /*  8430 */   143, 73, 143, 26, 27, 28, 143, 143, 31, 143,
        /*  8440 */   143, 143, 35, 36, 143, 143, 143, 143, 41, 143,
        /*  8450 */   143, 44, 8, 46, 143, 48, 49, 50, 51, 52,
        /*  8460 */   143, 143, 143, 143, 20, 21, 143, 143, 143, 143,
        /*  8470 */    26, 27, 28, 143, 143, 31, 143, 143, 143, 35,
        /*  8480 */    73, 143, 143, 143, 143, 41, 143, 143, 44, 8,
        /*  8490 */   143, 143, 48, 49, 50, 51, 52, 143, 54, 55,
        /*  8500 */   143, 20, 21, 143, 143, 143, 143, 26, 27, 28,
        /*  8510 */   143, 143, 31, 143, 143, 143, 35, 73, 143, 143,
        /*  8520 */   143, 143, 41, 42, 143, 44, 8, 143, 143, 48,
        /*  8530 */    49, 50, 51, 52, 143, 143, 143, 143, 20, 21,
        /*  8540 */   143, 143, 143, 143, 26, 27, 28, 143, 143, 31,
        /*  8550 */   143, 143, 143, 35, 73, 143, 143, 143, 143, 41,
        /*  8560 */   143, 143, 44, 8, 46, 143, 48, 49, 50, 51,
        /*  8570 */    52, 143, 143, 143, 143, 20, 21, 143, 143, 143,
        /*  8580 */   143, 26, 27, 28, 143, 30, 31, 143, 143, 143,
        /*  8590 */    35, 73, 143, 143, 143, 143, 41, 143, 143, 44,
        /*  8600 */     8, 143, 143, 48, 49, 50, 51, 52, 143, 143,
        /*  8610 */   143, 143, 20, 21, 143, 143, 143, 143, 26, 27,
        /*  8620 */    28, 143, 143, 31, 143, 143, 143, 35, 73, 143,
        /*  8630 */   143, 143, 143, 41, 143, 143, 44, 8, 143, 143,
        /*  8640 */    48, 49, 50, 51, 52, 143, 143, 143, 143, 20,
        /*  8650 */    21, 143, 143, 143, 143, 26, 27, 28, 143, 143,
        /*  8660 */    31, 143, 143, 143, 35, 73, 143, 143, 143, 143,
        /*  8670 */    41, 143, 143, 44, 8, 143, 143, 48, 49, 50,
        /*  8680 */    51, 52, 143, 143, 143, 143, 20, 21, 143, 143,
        /*  8690 */   143, 143, 26, 27, 28, 143, 143, 31, 143, 143,
        /*  8700 */   143, 35, 73, 84, 143, 143, 143, 41, 143, 143,
        /*  8710 */    44, 143, 143, 143, 48, 49, 50, 51, 52, 143,
        /*  8720 */   143, 143, 103, 104, 105, 106, 143, 143, 143, 143,
        /*  8730 */   143, 143, 143, 143, 143, 116, 143, 143, 119, 73,
        /*  8740 */   143, 143, 123, 124, 143, 143, 143, 143, 143, 143,
        /*  8750 */   143, 143, 143, 134, 135,
};
#define YY_SHIFT_USE_DFLT (-10)
#define YY_SHIFT_COUNT (360)
#define YY_SHIFT_MIN   (-9)
#define YY_SHIFT_MAX   (8666)
static const short yy_shift_ofst[] = {
        /*     0 */  1501, 6816, 6761, 7256, 7256, 7256, 7256, 7256, 7256, 7256,
        /*    10 */  7256, 7256, 1426, 8211, 8260, 8358, 8444, 8407, 8407, 8407,
        /*    20 */  8407, 8407, 8555, 8518, 8629, 8629, 8629, 8629, 8666, 8629,
        /*    30 */  8629, 8629, 8629, 2601, 8481, 8629, 8629, 8629, 8629, 8629,
        /*    40 */  8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629,
        /*    50 */  8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629,
        /*    60 */  8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629,
        /*    70 */  8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629,
        /*    80 */  8629, 8629, 8629, 1355, 1355, 1355, 1722, 1338, 1338, 6706,
        /*    90 */  6706, 6651, 1571, 1221, 1221, 1221, 1221, 1221, 1200, 1183,
        /*   100 */  1183, 1188, 351, 280, 209, 138, 67, -4, 2526, 2451,
        /*   110 */  2376, 2301, 2226, 2151, 2076, 2001, 1926, 1851, 1776, 1701,
        /*   120 */  1626, 1551, 1476, 1401, 1326, 1251, 1176, 1101, 1026, 951,
        /*   130 */   876, 801, 726, 651, 576, 501, 426, 5157, 5086, 5015,
        /*   140 */  4944, 4873, 4802, 4731, 4660, 4589, 4518, 4447, 4376, 4305,
        /*   150 */  4234, 4163, 4092, 4021, 3950, 3879, 3808, 3737, 3666, 3595,
        /*   160 */  3524, 3453, 3382, 3311, 3240, 3169, 3098, 3027, 2956, 2885,
        /*   170 */  2814, 2743, 2672, 5370, 5299, 5228, 5568, 5505, 5442, 5629,
        /*   180 */  6596, 6541, 6486, 6431, 6376, 7201, 7146, 7091, 7036, 6981,
        /*   190 */  6926, 6871, 7749, 7721, 7693, 7665, 7637, 7609, 7581, 7553,
        /*   200 */  7525, 7497, 7469, 7441, 7413, 7384, 7356, 7328, 7834, 7805,
        /*   210 */  7777, 8102, 8074, 8046, 8018, 7990, 7962, 7934, 7891, 7862,
        /*   220 */  8145, 8162, 8309, 8592, 5480, 1276, 1201, 1126, 1051, 976,
        /*   230 */   901, 826, 751, 676, 601, 526, 451, 376, 5328, 5257,
        /*   240 */    24, 5546, 1649, 1576, 303, 232, 165, 95, 5399, 94,
        /*   250 */    23, 1653, 1579, 1354, 754, 251, 679, 216, 604, 541,
        /*   260 */   378, 466, 391, 308, 529, 386, 315, 307, 244, 236,
        /*   270 */   178, 107, 102, 36, 31, 237, 198, 166, 1346, 158,
        /*   280 */    87, 1147, 1130, 1135, 1115, 1129, 1110, 1056, 1108, 1098,
        /*   290 */  1066, 1055, 1048, 1031, 1043, 1033, 1032, 997, 986, 982,
        /*   300 */   978, 971, 960, 964, 957, 925, 910, 905, 907, 896,
        /*   310 */   885, 892, 882, 846, 820, 830, 832, 812, 800, 817,
        /*   320 */   798, 756, 760, 755, 727, 744, 733, 681, 689, 685,
        /*   330 */   656, 655, 624, 590, 664, 611, 607, 593, 589, 536,
        /*   340 */   532, 518, 514, 461, 457, 455, 442, 365, 346, 286,
        /*   350 */   295, 281, 169, 154, 148, 144, 83, 74, 13, 3,
 /*   360 */    -9,
};
#define YY_REDUCE_USE_DFLT (-65)
#define YY_REDUCE_COUNT (101)
#define YY_REDUCE_MIN   (-64)
#define YY_REDUCE_MAX   (8619)
static const short yy_reduce_ofst[] = {
        /*     0 */   407, 6237, 6178, 6117, 6058, 5997, 5938, 5877, 5818, 5757,
        /*    10 */  5698, 5630, 5393, 8619, 5588, 6317, 1266, 220, 149, 78,
        /*    20 */     7, -64, 5529, 278, 6282, 6209, 6089, 5969, 1491, 5849,
        /*    30 */  5729, 5660, 5658, 1543, 353, 3025, 2968, 2954, 2897, 2883,
        /*    40 */  2826, 2812, 2741, 2670, 2599, 2542, 2541, 2467, 2466, 2392,
 /*    50 */  2391, 2317, 2316, 2242, 2241, 2167, 2166, 2092, 2091, 2017,
 /*    60 */  2016, 1942, 1941, 1867, 1866, 1792, 1791, 1717, 1716, 1403,
        /*    70 */  1341, 1191, 1116, 1041, 966, 891, 816, 741, 666, 591,
        /*    80 */   516, 441, 353, 2759, 2688, 2617, 313, 1351, 210, 1270,
        /*    90 */  1238, 1227, 1190, 1192, 1181, 1179, 1177, 1167, 1123, 1133,
        /*   100 */  1120, 1121,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*    10 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*    20 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*    30 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*    40 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*    50 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*    60 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*    70 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*    80 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*    90 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   100 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   110 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   120 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   130 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   140 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   150 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   160 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   170 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   180 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   190 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   200 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   210 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   220 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   230 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   240 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   250 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   260 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   270 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   280 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   290 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   300 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   310 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   320 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   330 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   340 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   350 */   542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
 /*   360 */   542,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
                                                                                                                        /*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "IFX",           "ELSE",          "ASSIGN",
  "QMARK",         "COMMA",         "LOR",           "LAND",
  "LNOT",          "EQ",            "LE",            "LT",
  "GE",            "GT",            "NE",            "BITOR",
  "BITXOR",        "BITAND",        "LSHIFT",        "RSHIFT",
  "PLUS",          "MINUS",         "DIVIDE",        "MULTIPLY",
  "MOD",           "UNARY",         "BITNOT",        "LPAREN",
  "LSQBRACKET",    "PERIOD",        "SEMICOLON",     "NAME",
  "IMPORT",        "AS",            "COLON",         "FUNCTION",
  "RPAREN",        "OBJECT",        "LBRACKET",      "VAR",
  "RBRACKET",      "NUMBER",        "RSQBRACKET",    "SUBSCRIPT",
  "KILLS",         "MEMBER",        "STRING",        "FUNCCALL",
  "L2V",           "MAPSTRING",     "UNIT",          "SWITCH",
  "LOCATION",      "CONST",         "INC",           "DEC",
  "IADD",          "ISUB",          "IMUL",          "IDIV",
  "IMOD",          "ILSH",          "IRSH",          "IBND",
  "IBOR",          "IBXR",          "IF",            "WHILE",
  "FOR",           "FOREACH",       "CONTINUE",      "BREAK",
  "RETURN",        "CONDITIONNAME",  "ACTIONNAME",    "error",
  "nt",            "program",       "chunks",        "chunk",
  "import_chunk",  "fdef_chunk",    "fdecl_chunk",   "object_chunk",
  "vdef_stmt",     "vdefAssign_global_stmt",  "cdef_global_stmt",  "blockStmt",
  "dottedName",    "fdef_rettypes",  "exprList_nonEmpty",  "fdef_header",
  "typedNameList",  "stmt",          "object_body",   "typedNameList_nonEmpty",
  "method_header",  "method_chunk",  "bodyStmt",      "return_stmt",
  "lbracket",      "rbracket",      "bodyStmtList",  "vdefAssign_stmt",
  "cdef_stmt",     "assign_stmt",   "funcexpr",      "actionStmt",
  "if_stmt",       "while_stmt",    "for_stmt",      "foreach_stmt",
  "continue_stmt",  "break_stmt",    "numList_nonEmpty",  "typedName",
  "expr",          "nameList_nonEmpty",  "exprList",      "lambdaExprStart",
  "fArgs_nonEmpty",  "fArgs",         "commaSkippable",  "lvalue",
  "lvalueList_nonEmpty",  "if_start",      "if_header",     "if_block",
  "elif_start",    "elif_header",   "else_header",   "while_start",
  "while_header",  "for_opener",    "for_init_stmt_nonEmpty",  "for_init_stmt",
  "for_action_stmt_nonEmpty",  "for_action_stmt",  "for_header1",   "for_header2",
  "for_header",    "foreach_opener",  "foreach_header",
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= chunks",
 /*   1 */ "chunks ::=",
 /*   2 */ "chunks ::= chunks chunk",
 /*   3 */ "chunk ::= error",
 /*   4 */ "chunk ::= import_chunk SEMICOLON",
 /*   5 */ "chunk ::= fdef_chunk",
 /*   6 */ "chunk ::= fdecl_chunk",
 /*   7 */ "chunk ::= object_chunk",
 /*   8 */ "chunk ::= vdef_stmt SEMICOLON",
 /*   9 */ "chunk ::= vdefAssign_global_stmt SEMICOLON",
 /*  10 */ "chunk ::= cdef_global_stmt SEMICOLON",
 /*  11 */ "chunk ::= blockStmt",
 /*  12 */ "dottedName ::= NAME",
 /*  13 */ "dottedName ::= dottedName PERIOD NAME",
 /*  14 */ "import_chunk ::= IMPORT dottedName AS NAME",
 /*  15 */ "import_chunk ::= IMPORT dottedName",
 /*  16 */ "fdef_rettypes ::=",
 /*  17 */ "fdef_rettypes ::= COLON exprList_nonEmpty",
 /*  18 */ "fdef_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes",
 /*  19 */ "fdef_chunk ::= fdef_header stmt",
 /*  20 */ "fdecl_chunk ::= FUNCTION NAME LPAREN typedNameList RPAREN SEMICOLON",
 /*  21 */ "object_body ::= OBJECT NAME LBRACKET",
 /*  22 */ "object_body ::= object_body VAR typedNameList_nonEmpty SEMICOLON",
 /*  23 */ "method_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes",
 /*  24 */ "method_chunk ::= method_header stmt",
 /*  25 */ "object_body ::= object_body method_chunk",
 /*  26 */ "object_chunk ::= object_body RBRACKET SEMICOLON",
 /*  27 */ "stmt ::= error SEMICOLON",
 /*  28 */ "stmt ::= bodyStmt",
 /*  29 */ "stmt ::= return_stmt SEMICOLON",
 /*  30 */ "lbracket ::= LBRACKET",
 /*  31 */ "rbracket ::= RBRACKET",
 /*  32 */ "blockStmt ::= lbracket RBRACKET",
 /*  33 */ "blockStmt ::= lbracket return_stmt SEMICOLON rbracket",
 /*  34 */ "blockStmt ::= lbracket bodyStmtList rbracket",
 /*  35 */ "blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket",
 /*  36 */ "blockStmt ::= lbracket error RBRACKET",
 /*  37 */ "bodyStmt ::= blockStmt",
 /*  38 */ "bodyStmt ::= SEMICOLON",
 /*  39 */ "bodyStmt ::= vdef_stmt SEMICOLON",
 /*  40 */ "bodyStmt ::= vdefAssign_stmt SEMICOLON",
 /*  41 */ "bodyStmt ::= cdef_stmt SEMICOLON",
 /*  42 */ "bodyStmt ::= assign_stmt SEMICOLON",
 /*  43 */ "bodyStmt ::= funcexpr SEMICOLON",
 /*  44 */ "bodyStmt ::= actionStmt SEMICOLON",
 /*  45 */ "bodyStmt ::= if_stmt",
 /*  46 */ "bodyStmt ::= while_stmt",
 /*  47 */ "bodyStmt ::= for_stmt",
 /*  48 */ "bodyStmt ::= foreach_stmt",
 /*  49 */ "bodyStmt ::= continue_stmt SEMICOLON",
 /*  50 */ "bodyStmt ::= break_stmt SEMICOLON",
 /*  51 */ "bodyStmtList ::= bodyStmt",
 /*  52 */ "bodyStmtList ::= bodyStmtList bodyStmt",
 /*  53 */ "bodyStmtList ::= bodyStmtList error",
 /*  54 */ "numList_nonEmpty ::= NUMBER",
 /*  55 */ "numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER",
 /*  56 */ "typedName ::= NAME",
 /*  57 */ "typedName ::= NAME COLON expr",
 /*  58 */ "typedNameList_nonEmpty ::= typedName",
 /*  59 */ "typedNameList_nonEmpty ::= typedName COMMA typedNameList_nonEmpty",
 /*  60 */ "typedNameList ::=",
 /*  61 */ "typedNameList ::= typedNameList_nonEmpty",
 /*  62 */ "nameList_nonEmpty ::= NAME",
 /*  63 */ "nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME",
 /*  64 */ "exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET",
 /*  65 */ "expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET",
 /*  66 */ "exprList_nonEmpty ::= expr",
 /*  67 */ "exprList_nonEmpty ::= exprList_nonEmpty COMMA expr",
 /*  68 */ "exprList ::=",
 /*  69 */ "exprList ::= exprList_nonEmpty",
 /*  70 */ "expr ::= NUMBER",
 /*  71 */ "expr ::= KILLS",
 /*  72 */ "expr ::= NAME",
 /*  73 */ "expr ::= expr PERIOD NAME",
 /*  74 */ "expr ::= expr LSQBRACKET expr RSQBRACKET",
 /*  75 */ "lambdaExprStart ::= FUNCTION LPAREN typedNameList RPAREN fdef_rettypes",
 /*  76 */ "expr ::= lambdaExprStart stmt",
 /*  77 */ "fArgs_nonEmpty ::= expr",
 /*  78 */ "fArgs_nonEmpty ::= STRING",
 /*  79 */ "fArgs_nonEmpty ::= NAME ASSIGN expr",
 /*  80 */ "fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArgs_nonEmpty",
 /*  81 */ "fArgs ::=",
 /*  82 */ "fArgs ::= fArgs_nonEmpty",
 /*  83 */ "funcexpr ::= NAME LPAREN fArgs RPAREN",
 /*  84 */ "funcexpr ::= expr LPAREN fArgs RPAREN",
 /*  85 */ "expr ::= funcexpr",
 /*  86 */ "expr ::= LPAREN expr RPAREN",
 /*  87 */ "commaSkippable ::= COMMA",
 /*  88 */ "commaSkippable ::=",
 /*  89 */ "expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET",
 /*  90 */ "expr ::= L2V LPAREN expr RPAREN",
 /*  91 */ "expr ::= MAPSTRING LPAREN STRING RPAREN",
 /*  92 */ "expr ::= UNIT LPAREN STRING RPAREN",
 /*  93 */ "expr ::= SWITCH LPAREN STRING RPAREN",
 /*  94 */ "expr ::= LOCATION LPAREN STRING RPAREN",
 /*  95 */ "expr ::= expr QMARK expr COLON expr",
 /*  96 */ "expr ::= expr PLUS expr",
 /*  97 */ "expr ::= expr MINUS expr",
 /*  98 */ "expr ::= expr MULTIPLY expr",
 /*  99 */ "expr ::= expr DIVIDE expr",
 /* 100 */ "expr ::= expr MOD expr",
 /* 101 */ "expr ::= expr LSHIFT expr",
 /* 102 */ "expr ::= expr RSHIFT expr",
 /* 103 */ "expr ::= expr BITAND expr",
 /* 104 */ "expr ::= expr BITOR expr",
 /* 105 */ "expr ::= expr BITXOR expr",
 /* 106 */ "expr ::= PLUS expr",
 /* 107 */ "expr ::= MINUS expr",
 /* 108 */ "expr ::= BITNOT expr",
 /* 109 */ "expr ::= expr EQ expr",
 /* 110 */ "expr ::= expr NE expr",
 /* 111 */ "expr ::= expr LE expr",
 /* 112 */ "expr ::= expr LT expr",
 /* 113 */ "expr ::= expr GE expr",
 /* 114 */ "expr ::= expr GT expr",
 /* 115 */ "expr ::= expr LAND expr",
 /* 116 */ "expr ::= expr LOR expr",
 /* 117 */ "expr ::= LNOT expr",
 /* 118 */ "vdef_stmt ::= VAR nameList_nonEmpty",
 /* 119 */ "vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 120 */ "vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 121 */ "cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 122 */ "cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 123 */ "lvalue ::= NAME",
 /* 124 */ "lvalue ::= expr LSQBRACKET expr RSQBRACKET",
 /* 125 */ "lvalue ::= expr PERIOD NAME",
 /* 126 */ "lvalueList_nonEmpty ::= lvalue",
 /* 127 */ "lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue",
 /* 128 */ "assign_stmt ::= lvalue ASSIGN expr",
 /* 129 */ "assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 130 */ "assign_stmt ::= INC expr",
 /* 131 */ "assign_stmt ::= expr INC",
 /* 132 */ "assign_stmt ::= DEC expr",
 /* 133 */ "assign_stmt ::= expr DEC",
 /* 134 */ "assign_stmt ::= lvalue IADD expr",
 /* 135 */ "assign_stmt ::= lvalue ISUB expr",
 /* 136 */ "assign_stmt ::= lvalue IMUL expr",
 /* 137 */ "assign_stmt ::= lvalue IDIV expr",
 /* 138 */ "assign_stmt ::= lvalue IMOD expr",
 /* 139 */ "assign_stmt ::= lvalue ILSH expr",
 /* 140 */ "assign_stmt ::= lvalue IRSH expr",
 /* 141 */ "assign_stmt ::= lvalue IBND expr",
 /* 142 */ "assign_stmt ::= lvalue IBOR expr",
 /* 143 */ "assign_stmt ::= lvalue IBXR expr",
 /* 144 */ "if_start ::= IF",
 /* 145 */ "if_header ::= if_start LPAREN expr",
 /* 146 */ "if_block ::= if_header RPAREN stmt",
 /* 147 */ "elif_start ::= ELSE IF",
 /* 148 */ "elif_header ::= elif_start LPAREN expr",
 /* 149 */ "if_block ::= if_block elif_header RPAREN stmt",
 /* 150 */ "else_header ::= ELSE",
 /* 151 */ "if_stmt ::= if_block",
 /* 152 */ "if_stmt ::= if_block else_header stmt",
 /* 153 */ "while_start ::= WHILE",
 /* 154 */ "while_header ::= while_start LPAREN expr RPAREN",
 /* 155 */ "while_stmt ::= while_header stmt",
 /* 156 */ "for_opener ::= FOR LPAREN",
 /* 157 */ "for_init_stmt_nonEmpty ::= vdef_stmt",
 /* 158 */ "for_init_stmt_nonEmpty ::= vdefAssign_stmt",
 /* 159 */ "for_init_stmt_nonEmpty ::= cdef_stmt",
 /* 160 */ "for_init_stmt_nonEmpty ::= assign_stmt",
 /* 161 */ "for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty",
 /* 162 */ "for_init_stmt ::= for_init_stmt_nonEmpty",
 /* 163 */ "for_init_stmt ::=",
 /* 164 */ "for_action_stmt_nonEmpty ::= assign_stmt",
 /* 165 */ "for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty",
 /* 166 */ "for_action_stmt ::=",
 /* 167 */ "for_action_stmt ::= for_action_stmt_nonEmpty",
 /* 168 */ "for_header1 ::= for_opener for_init_stmt SEMICOLON",
 /* 169 */ "for_header2 ::= for_header1 expr SEMICOLON",
 /* 170 */ "for_header ::= for_header2 for_action_stmt RPAREN",
 /* 171 */ "for_stmt ::= for_header stmt",
 /* 172 */ "foreach_opener ::= FOREACH LPAREN",
 /* 173 */ "foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty RPAREN",
 /* 174 */ "foreach_stmt ::= foreach_header stmt",
 /* 175 */ "continue_stmt ::= CONTINUE",
 /* 176 */ "break_stmt ::= BREAK",
 /* 177 */ "return_stmt ::= RETURN exprList",
 /* 178 */ "expr ::= CONDITIONNAME LPAREN fArgs RPAREN",
 /* 179 */ "expr ::= KILLS LPAREN fArgs RPAREN",
 /* 180 */ "actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
      /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    case 76: /* nt */
{
    delete (yypminor->yy0);
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;

    if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH > 0
    if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
        {77,  1},
        {78,  0},
        {78,  2},
        {79,  1},
        {79,  2},
        {79,  1},
        {79,  1},
        {79,  1},
        {79,  2},
        {79,  2},
        {79,  2},
        {79,  1},
        {88,  1},
        {88,  3},
        {80,  4},
        {80,  2},
        {89,  0},
        {89,  2},
        {91,  6},
        {81,  2},
        {82,  6},
        {94,  3},
        {94,  4},
        {96,  6},
        {97,  2},
        {94,  2},
        {83,  3},
        {93,  2},
        {93,  1},
        {93,  2},
        {100, 1},
        {101, 1},
        {87,  2},
        {87,  4},
        {87,  3},
        {87,  5},
        {87,  3},
        {98,  1},
        {98,  1},
        {98,  2},
        {98,  2},
        {98,  2},
        {98,  2},
        {98,  2},
        {98,  2},
        {98,  1},
        {98,  1},
        {98,  1},
        {98,  1},
        {98,  2},
        {98,  2},
        {102, 1},
        {102, 2},
        {102, 2},
        {114, 1},
        {114, 3},
        {115, 1},
        {115, 3},
        {95,  1},
        {95,  3},
        {92,  0},
        {92,  1},
        {117, 1},
        {117, 3},
        {90,  6},
        {116, 6},
        {90,  1},
        {90,  3},
        {118, 0},
        {118, 1},
        {116, 1},
        {116, 1},
        {116, 1},
        {116, 3},
        {116, 4},
        {119, 5},
        {116, 2},
        {120, 1},
        {120, 1},
        {120, 3},
        {120, 3},
        {121, 0},
        {121, 1},
        {106, 4},
        {106, 4},
        {116, 1},
        {116, 3},
        {122, 1},
        {122, 0},
        {116, 4},
        {116, 4},
        {116, 4},
        {116, 4},
        {116, 4},
        {116, 4},
        {116, 5},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 2},
        {116, 2},
        {116, 2},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 3},
        {116, 2},
        {84,  2},
        {103, 4},
        {85,  4},
        {104, 4},
        {86,  4},
        {123, 1},
        {123, 4},
        {123, 3},
        {124, 1},
        {124, 3},
        {105, 3},
        {105, 3},
        {105, 2},
        {105, 2},
        {105, 2},
        {105, 2},
        {105, 3},
        {105, 3},
        {105, 3},
        {105, 3},
        {105, 3},
        {105, 3},
        {105, 3},
        {105, 3},
        {105, 3},
        {105, 3},
        {125, 1},
        {126, 3},
        {127, 3},
        {128, 2},
        {129, 3},
        {127, 4},
        {130, 1},
        {108, 1},
        {108, 3},
        {131, 1},
        {132, 4},
        {109, 2},
        {133, 2},
        {134, 1},
        {134, 1},
        {134, 1},
        {134, 1},
        {134, 3},
        {135, 1},
        {135, 0},
        {136, 1},
        {136, 3},
        {137, 0},
        {137, 1},
        {138, 3},
        {139, 3},
        {140, 3},
        {110, 2},
        {141, 2},
        {142, 5},
        {111, 2},
        {112, 1},
        {113, 1},
        {99,  2},
        {116, 4},
        {116, 4},
        {107, 4},
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
                                                                                                                            if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

    /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 3: /* chunk ::= error */
{
    throw_error(13494, "Chunk-level error");
}
        break;
      case 11: /* chunk ::= blockStmt */
{
    throw_error(48993, "Misplaced block statement");
}
        break;
      case 12: /* dottedName ::= NAME */
      case 17: /* fdef_rettypes ::= COLON exprList_nonEmpty */ yytestcase(yyruleno==17);
      case 54: /* numList_nonEmpty ::= NUMBER */ yytestcase(yyruleno==54);
      case 61: /* typedNameList ::= typedNameList_nonEmpty */ yytestcase(yyruleno==61);
      case 62: /* nameList_nonEmpty ::= NAME */ yytestcase(yyruleno==62);
      case 66: /* exprList_nonEmpty ::= expr */ yytestcase(yyruleno==66);
      case 69: /* exprList ::= exprList_nonEmpty */ yytestcase(yyruleno==69);
      case 70: /* expr ::= NUMBER */ yytestcase(yyruleno==70);
      case 77: /* fArgs_nonEmpty ::= expr */ yytestcase(yyruleno==77);
      case 78: /* fArgs_nonEmpty ::= STRING */ yytestcase(yyruleno==78);
      case 82: /* fArgs ::= fArgs_nonEmpty */ yytestcase(yyruleno==82);
      case 85: /* expr ::= funcexpr */ yytestcase(yyruleno==85);
      case 126: /* lvalueList_nonEmpty ::= lvalue */ yytestcase(yyruleno==126);
{ yygotominor.yy0 = yymsp[0].minor.yy0; }
        break;
      case 13: /* dottedName ::= dottedName PERIOD NAME */
{
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 14: /* import_chunk ::= IMPORT dottedName AS NAME */
{
    std::string impPath, impModname;
    impPathProcess(yymsp[-2].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(yymsp[0].minor.yy0->data)) {
        throw_error(6754, "Importing already-declared module " + yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << " as " << yymsp[0].minor.yy0->data << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 15: /* import_chunk ::= IMPORT dottedName */
{
    std::string impPath, impModname;
    impPathProcess(yymsp[0].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(impModname)) {
        throw_error(6754, "Importing already-declared module " + impModname, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 16: /* fdef_rettypes ::= */
      case 60: /* typedNameList ::= */ yytestcase(yyruleno==60);
{ yygotominor.yy0 = nullptr; }
        break;
      case 18: /* fdef_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes */
{
    // Preprocess yymsp[-4].minor.yy0
    funcNamePreprocess(yymsp[-4].minor.yy0->data);
    if(!ps->closure.defFunction(yymsp[-4].minor.yy0->data)) {
        throw_error(4495, "Duplicate function " + yymsp[-4].minor.yy0->data, yymsp[-4].minor.yy0->line);
    }

    ps->closure.pushScope();
    currentFunction = yymsp[-4].minor.yy0->data;

    // Register variables.
    // yymsp[-2].minor.yy0->data is a comma-seperated list of (yymsp[-4].minor.yy0, type). To pair names and types,
    // we store varname in odd loops and define variables on even loops.
    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = !!yymsp[0].minor.yy0;

    subTokenListIter(yymsp[-2].minor.yy0, [&](const Token* typedNameToken) {
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(196, ("Redeclaration of variable \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(7714, ("Redeclaration of typed constant \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
    });

    // Add decorator header
    if (!isTypedFunction) ps->gen << "@EUDFunc" << std::endl;
    else {
        ps->gen << "@EUDTypedFunc([";
        writeStringList(ps->gen, types);
        if(!yymsp[0].minor.yy0) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    // Write argument names
    ps->gen << "def " << yymsp[-4].minor.yy0->data << "(";
    writeStringList(ps->gen, argnames);
    ps->gen << "):" << std::endl;

    ps->gen.indent();
    if(MAP_DEBUG) {
         ps->gen << "EUDTracePush()" << std::endl;
    }

    tmpIndex = 1;
    delete yymsp[-4].minor.yy0;
    delete yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
}
        break;
      case 19: /* fdef_chunk ::= fdef_header stmt */
{
    if(MAP_DEBUG){
        ps->gen << "EUDTracePop()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
}
        break;
      case 20: /* fdecl_chunk ::= FUNCTION NAME LPAREN typedNameList RPAREN SEMICOLON */
{
    // Preprocess yymsp[-4].minor.yy0
    funcNamePreprocess(yymsp[-4].minor.yy0->data);
    if(!ps->closure.declareFunction(yymsp[-4].minor.yy0->data)) {
        throw_error(72461, "Declaring function with non-function yymsp[-4].minor.yy0 " + yymsp[-4].minor.yy0->data, yymsp[-4].minor.yy0->line);
    }
}
        break;
      case 21: /* object_body ::= OBJECT NAME LBRACKET */
{
    ps->gen << "class " << yymsp[-1].minor.yy0->data << "(EUDStruct):\n";
    ps->gen.indent();

    if(!ps->closure.defConstant(yymsp[-1].minor.yy0->data)) {
        throw_error(8228, "Declaring object with non-function yymsp[-1].minor.yy0 " + yymsp[-1].minor.yy0->data, yymsp[-1].minor.yy0->line);
    }
    ps->closure.pushScope();

    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[-1].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;
}
        break;
      case 22: /* object_body ::= object_body VAR typedNameList_nonEmpty SEMICOLON */
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;

    // Append to subTokenList
    Token* t = genEmpty();
    t->subToken[0] = yymsp[-1].minor.yy0;
    t->subToken[1] = nullptr;
    subTokenListGetTail(yygotominor.yy0)->subToken[1] = t;
    yygotominor.yy0->line = currentTokenizingLine;
}
        break;
      case 23: /* method_header ::= FUNCTION NAME LPAREN typedNameList RPAREN fdef_rettypes */
{
    // Method can't be called directly, so we shouldn't have to register it to closure.
    // duplicate method names should be checked at python-compile time.

    ps->closure.pushScope();

    // Register variables.
    std::string _this = "this";  // This may be modified...?
    if(!ps->closure.defConstant(_this)) {
        throw_error(656, ("Redeclaration of variable \'this\'"), yymsp[-2].minor.yy0->line);
    }

    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = !!yymsp[0].minor.yy0;
    subTokenListIter(yymsp[-2].minor.yy0, [&](const Token* typedNameToken) {
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(2656, ("Redeclaration of variable \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(9788, ("Redeclaration of typed constant \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
    });

    // Add decorator header
    if (!isTypedFunction) ps->gen << "@EUDMethod" << std::endl;
    else {
        ps->gen << "@EUDTypedMethod([";
        writeStringList(ps->gen, types);
        if(!yymsp[0].minor.yy0) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    // Add default argument 'self'
    ps->gen << "def " << yymsp[-4].minor.yy0->data << "(" << _this;
    if (argnames.empty()) ps->gen << "):" << std::endl;
    else {
        ps->gen << ", ";
        writeStringList(ps->gen, argnames);
        ps->gen << "):" << std::endl;
    }
    ps->gen.indent();

    currentFunction = yymsp[-4].minor.yy0->data;

    if(MAP_DEBUG) {
         ps->gen << "EUDTracePush()" << std::endl;
    }

    tmpIndex = 1;
    delete yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-4].minor.yy0);
}
        break;
      case 24: /* method_chunk ::= method_header stmt */
{
    if(MAP_DEBUG){
        ps->gen << "EUDTracePop()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
    yygotominor.yy0 = yymsp[-1].minor.yy0;
}
        break;
      case 25: /* object_body ::= object_body method_chunk */
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    yygotominor.yy0->line = currentTokenizingLine;
}
        break;
      case 26: /* object_chunk ::= object_body RBRACKET SEMICOLON */
{
    ps->gen << "_fields_ = [\n";
    subTokenListIter(yymsp[-2].minor.yy0->subToken[1], [&](const Token* tok) {
        subTokenListIter(tok, [&](const Token* nameType) {
            ps->gen.indent();
            if(nameType->subToken[1]) {
                ps->gen << "('" << nameType->subToken[0]->data << "', " << nameType->subToken[1]->data << "),\n";
            }
            else {
                ps->gen << "'" << nameType->subToken[0]->data << "',\n";
            }
            ps->gen.unindent(false);
        });
    });
    ps->gen << "]\n";
    ps->closure.popScope();
    ps->gen.unindent(true);
    delete yymsp[-2].minor.yy0;
}
        break;
      case 27: /* stmt ::= error SEMICOLON */
{ throw_error(6974, "Error while parsing statement", yymsp[0].minor.yy0->line); delete yymsp[0].minor.yy0; }
        break;
      case 30: /* lbracket ::= LBRACKET */
{ ps->closure.pushScope(); }
        break;
      case 31: /* rbracket ::= RBRACKET */
{ ps->closure.popScope(); }
        break;
      case 32: /* blockStmt ::= lbracket RBRACKET */
{
    ps->closure.popScope();
}
        break;
      case 36: /* blockStmt ::= lbracket error RBRACKET */
{
    throw_error(6298, "Block not terminated properly.", yymsp[0].minor.yy0->line);
    ps->closure.popScope();
    delete yymsp[0].minor.yy0;
}
        break;
      case 43: /* bodyStmt ::= funcexpr SEMICOLON */
{ ps->gen << yymsp[-1].minor.yy0->data << std::endl; }
        break;
      case 53: /* bodyStmtList ::= bodyStmtList error */
{
    throw_error(8510, "Incomplete statement. Check if the previous line have ended properly.");
}
        break;
      case 55: /* numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER */
      case 63: /* nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME */ yytestcase(yyruleno==63);
      case 127: /* lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue */ yytestcase(yyruleno==127);
{ yygotominor.yy0 = commaConcat(yymsp[-2].minor.yy0, yymsp[0].minor.yy0); }
        break;
      case 56: /* typedName ::= NAME */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;  // Type is null.
}
        break;
      case 57: /* typedName ::= NAME COLON expr */
      case 59: /* typedNameList_nonEmpty ::= typedName COMMA typedNameList_nonEmpty */ yytestcase(yyruleno==59);
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;
}
        break;
      case 58: /* typedNameList_nonEmpty ::= typedName */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    yygotominor.yy0->subToken[1] = nullptr;
}
        break;
      case 64: /* exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = "_SRET(" + yymsp[-5].minor.yy0->data + ", [" + yymsp[-2].minor.yy0->data + "])";
    delete yymsp[-5].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
        break;
      case 65: /* expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = yymsp[-5].minor.yy0->data + "[" + yymsp[-2].minor.yy0->data + "]";
    delete yymsp[-5].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
        break;
      case 67: /* exprList_nonEmpty ::= exprList_nonEmpty COMMA expr */
{ yygotominor.yy0 = new Token((yymsp[-2].minor.yy0->data) + ", " + (yymsp[0].minor.yy0->data), yymsp[0].minor.yy0); delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 68: /* exprList ::= */
      case 81: /* fArgs ::= */ yytestcase(yyruleno==81);
{ yygotominor.yy0 = genEmpty(); }
        break;
      case 71: /* expr ::= KILLS */
{
    yymsp[0].minor.yy0->data = "4";
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 72: /* expr ::= NAME */
{
    checkIsRValue(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 73: /* expr ::= expr PERIOD NAME */
{
    yymsp[-2].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[0].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
        break;
      case 74: /* expr ::= expr LSQBRACKET expr RSQBRACKET */
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "[" + yymsp[-1].minor.yy0->data + "]";
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
        break;
      case 75: /* lambdaExprStart ::= FUNCTION LPAREN typedNameList RPAREN fdef_rettypes */
{
    std::string funcname = "_lambda" + std::to_string(++lambdaIndex);
    ps->closure.pushScope();

    // Register variables.
    // we store varname in odd loops and define variables on even loops.
    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = false;

    subTokenListIter(yymsp[-2].minor.yy0, [&](const Token* typedNameToken) {
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(196, ("Redeclaration of variable \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(7714, ("Redeclaration of typed constant \'" + argname + "\'"), yymsp[-2].minor.yy0->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
    });

    // Add decorator header
    if (!isTypedFunction) ps->gen << "@EUDFunc" << std::endl;
    else {
        ps->gen << "@EUDTypedFunc([";
        writeStringList(ps->gen, types);
        if(!yymsp[0].minor.yy0) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    // Write argument names
    ps->gen << "def " << funcname << "(";
    writeStringList(ps->gen, argnames);
    ps->gen << "):" << std::endl;

    ps->gen.indent();
    tmpIndex = 1;

    if(MAP_DEBUG) {
         ps->gen << "EUDTracePush()" << std::endl;
    }

    delete yymsp[-2].minor.yy0;

    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->data = funcname;
}
        break;
      case 76: /* expr ::= lambdaExprStart stmt */
{
    if(MAP_DEBUG) {
        ps->gen << "EUDTracePop()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 79: /* fArgs_nonEmpty ::= NAME ASSIGN expr */
{  // Keyword argument
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "=" + yymsp[0].minor.yy0->data;
    yymsp[0].minor.yy0->type = TOKEN_TEMP;
    yygotominor.yy0 = yymsp[0].minor.yy0;
    delete yymsp[-2].minor.yy0;
}
        break;
      case 80: /* fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArgs_nonEmpty */
{
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + ", " + yymsp[0].minor.yy0->data;
    yymsp[0].minor.yy0->type = TOKEN_TEMP;
    yygotominor.yy0 = yymsp[0].minor.yy0;
    delete yymsp[-2].minor.yy0;
}
        break;
      case 83: /* funcexpr ::= NAME LPAREN fArgs RPAREN */
{
    // Preprocess yymsp[-3].minor.yy0
    checkIsFunction(yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
        break;
      case 84: /* funcexpr ::= expr LPAREN fArgs RPAREN */
{
    // If calling function imported from another module, add f_ prefix to function yymsp[-3].minor.yy0.
    static std::regex prefixedFuncNameRegex("^[a-z][_a-zA-Z0-9]*");
    std::string& nameStr = yymsp[-3].minor.yy0->data;
    if(std::count(nameStr.begin(), nameStr.end(), '.') == 1) {
        size_t p = nameStr.find('.');
        std::string moduleName = nameStr.substr(0, p);
        std::string funcName = nameStr.substr(p + 1);
        if (closure->isModule(moduleName) && std::regex_match(funcName, prefixedFuncNameRegex)) {
            funcNamePreprocess(funcName);
            yymsp[-3].minor.yy0->data = moduleName + '.' + funcName;
        }
    }

    // Preprocess yymsp[-3].minor.yy0
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
        break;
      case 86: /* expr ::= LPAREN expr RPAREN */
{
    yymsp[-1].minor.yy0->data = "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 89: /* expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET */
{
    yymsp[-2].minor.yy0->data = "_ARR(FlattenList([" + yymsp[-2].minor.yy0->data + "]))";
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
        break;
      case 90: /* expr ::= L2V LPAREN expr RPAREN */
{
    yymsp[-1].minor.yy0->data = "_L2V(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 91: /* expr ::= MAPSTRING LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "GetStringIndex(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 92: /* expr ::= UNIT LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "EncodeUnit(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 93: /* expr ::= SWITCH LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "EncodeSwitch(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 94: /* expr ::= LOCATION LPAREN STRING RPAREN */
{
    yymsp[-1].minor.yy0->data = "GetLocationIndex(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
        break;
      case 95: /* expr ::= expr QMARK expr COLON expr */
{
    std::stringstream ss;
    ss << "EUDTernary";
    applyNegativeOptimization(ss, yymsp[-4].minor.yy0);
    ss << "(" << yymsp[-2].minor.yy0->data << ")(" << yymsp[0].minor.yy0->data << ")";
    yymsp[0].minor.yy0->data = ss.str();
    delete yymsp[-4].minor.yy0;
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
}
        break;
      case 96: /* expr ::= expr PLUS expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "+",  yymsp[0].minor.yy0); }
        break;
      case 97: /* expr ::= expr MINUS expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "-",  yymsp[0].minor.yy0); }
        break;
      case 98: /* expr ::= expr MULTIPLY expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "*",  yymsp[0].minor.yy0); }
        break;
      case 99: /* expr ::= expr DIVIDE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "//", yymsp[0].minor.yy0); }
        break;
      case 100: /* expr ::= expr MOD expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "%",  yymsp[0].minor.yy0); }
        break;
      case 101: /* expr ::= expr LSHIFT expr */
{
    yymsp[0].minor.yy0->data = "_LSH(" + yymsp[-2].minor.yy0->data + "," + yymsp[0].minor.yy0->data + ")";
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
}
        break;
      case 102: /* expr ::= expr RSHIFT expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">>", yymsp[0].minor.yy0); }
        break;
      case 103: /* expr ::= expr BITAND expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "&",  yymsp[0].minor.yy0); }
        break;
      case 104: /* expr ::= expr BITOR expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "|",  yymsp[0].minor.yy0); }
        break;
      case 105: /* expr ::= expr BITXOR expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "^",  yymsp[0].minor.yy0); }
        break;
      case 106: /* expr ::= PLUS expr */
{ yymsp[0].minor.yy0->data = "+" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
        break;
      case 107: /* expr ::= MINUS expr */
{ yymsp[0].minor.yy0->data = "-" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
        break;
      case 108: /* expr ::= BITNOT expr */
{ yymsp[0].minor.yy0->data = "~" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
        break;
      case 109: /* expr ::= expr EQ expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "==", yymsp[0].minor.yy0); }
        break;
      case 110: /* expr ::= expr NE expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    yygotominor.yy0->type = TOKEN_NE;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;
    yygotominor.yy0->data = yymsp[-2].minor.yy0->data + " != " + yymsp[0].minor.yy0->data;
}
        break;
      case 111: /* expr ::= expr LE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "<=", yymsp[0].minor.yy0); }
        break;
      case 112: /* expr ::= expr LT expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "<",  yymsp[0].minor.yy0); }
        break;
      case 113: /* expr ::= expr GE expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">=", yymsp[0].minor.yy0); }
        break;
      case 114: /* expr ::= expr GT expr */
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">" , yymsp[0].minor.yy0); }
        break;
      case 115: /* expr ::= expr LAND expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yygotominor.yy0->type = TOKEN_LAND;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCAnd()";
    shortCircuitCondListGetter(ss, yygotominor.yy0, TOKEN_LAND);
    ss << "()";
    yygotominor.yy0->data = ss.str();
}
        break;
      case 116: /* expr ::= expr LOR expr */
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yygotominor.yy0->type = TOKEN_LOR;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCOr()";
    shortCircuitCondListGetter(ss, yygotominor.yy0, TOKEN_LOR);
    ss << "()";
    yygotominor.yy0->data = ss.str();
}
        break;
      case 117: /* expr ::= LNOT expr */
{
    if(yymsp[0].minor.yy0->type == TOKEN_LNOT) {
        yygotominor.yy0 = yymsp[0].minor.yy0->subToken[0];
        yymsp[0].minor.yy0->subToken[0] = nullptr;
        delete yymsp[0].minor.yy0;
    }
    else {
        yygotominor.yy0 = genEmpty();
        yygotominor.yy0->line = yymsp[0].minor.yy0->line;
        yygotominor.yy0->type = TOKEN_LNOT;
        yygotominor.yy0->data = "EUDNot(" + yymsp[0].minor.yy0->data + ")";
        yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    }
}
        break;
      case 118: /* vdef_stmt ::= VAR nameList_nonEmpty */
{
    std::string& s = yymsp[0].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"), yymsp[0].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
    }
    else {
        ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    }

    delete yymsp[0].minor.yy0;
}
        break;
      case 119: /* vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
        ps->gen << s << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    }
    else {
        ps->gen << s << " = _MVAR([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 120: /* vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    ps->gen << "_IGVA([" << s << "], lambda: [" << yymsp[0].minor.yy0->data << "])" << std::endl;

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 121: /* cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = " << yymsp[0].minor.yy0->data << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 122: /* cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = _CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], 1)[0]" << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable(_CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], " << nameCount << "))" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 123: /* lvalue ::= NAME */
{
    checkIsVariable(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
        break;
      case 124: /* lvalue ::= expr LSQBRACKET expr RSQBRACKET */
{
    checkIsConstant(yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    yymsp[-1].minor.yy0->data = "_ARRW(" + yymsp[-3].minor.yy0->data + ", " + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
    delete yymsp[-3].minor.yy0;
}
        break;
      case 125: /* lvalue ::= expr PERIOD NAME */
{
    checkIsConstant(yymsp[-2].minor.yy0->data, yymsp[-2].minor.yy0->line);
    yymsp[0].minor.yy0->data = "_ATTW(" + yymsp[-2].minor.yy0->data + ", '" + yymsp[0].minor.yy0->data + "')";
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
    delete yymsp[-2].minor.yy0;
}
        break;
      case 128: /* assign_stmt ::= lvalue ASSIGN expr */
{
    ps->gen << yymsp[-2].minor.yy0->data << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 129: /* assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty */
{
    ps->gen << "_SV([" << yymsp[-2].minor.yy0->data << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
        break;
      case 130: /* assign_stmt ::= INC expr */
{ ps->gen << yymsp[0].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[0].minor.yy0; }
        break;
      case 131: /* assign_stmt ::= expr INC */
{ ps->gen << yymsp[-1].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[-1].minor.yy0; }
        break;
      case 132: /* assign_stmt ::= DEC expr */
{ ps->gen << yymsp[0].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[0].minor.yy0; }
        break;
      case 133: /* assign_stmt ::= expr DEC */
{ ps->gen << yymsp[-1].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[-1].minor.yy0; }
        break;
      case 134: /* assign_stmt ::= lvalue IADD expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__iadd__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 135: /* assign_stmt ::= lvalue ISUB expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__isub__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 136: /* assign_stmt ::= lvalue IMUL expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__imul__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 137: /* assign_stmt ::= lvalue IDIV expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ifloordiv__("  << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 138: /* assign_stmt ::= lvalue IMOD expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__imod__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 139: /* assign_stmt ::= lvalue ILSH expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ilshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 140: /* assign_stmt ::= lvalue IRSH expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__irshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 141: /* assign_stmt ::= lvalue IBND expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__iand__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 142: /* assign_stmt ::= lvalue IBOR expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ior__("        << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 143: /* assign_stmt ::= lvalue IBXR expr */
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ixor__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
        break;
      case 144: /* if_start ::= IF */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDIf()" << std::endl;
}
        break;
      case 145: /* if_header ::= if_start LPAREN expr */
      case 148: /* elif_header ::= elif_start LPAREN expr */ yytestcase(yyruleno == 148);
{
    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0;
    delete yymsp[0].minor.yy0;
}
        break;
      case 147: /* elif_start ::= ELSE IF */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen.unindent(false);
    ps->gen << yygotominor.yy0->data << " = EUDElseIf()" << std::endl;
}
        break;
      case 150: /* else_header ::= ELSE */
{
    ps->gen.unindent(false);
    ps->gen << "if EUDElse()():" << std::endl;
    ps->gen.indent();
}
        break;
      case 151: /* if_stmt ::= if_block */
      case 152: /* if_stmt ::= if_block else_header stmt */ yytestcase(yyruleno==152);
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
}
        break;
      case 153: /* while_start ::= WHILE */
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
          break;
      case 154: /* while_header ::= while_start LPAREN expr RPAREN */
      {
          writeCsOpener(*pGen, yymsp[-3].minor.yy0, yymsp[-1].minor.yy0);
          ps->gen.indent();
          delete yymsp[-3].minor.yy0;
          delete yymsp[-1].minor.yy0;
      }
        break;
      case 155: /* while_stmt ::= while_header stmt */
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
}
        break;
      case 156: /* for_opener ::= FOR LPAREN */
      case 172: /* foreach_opener ::= FOREACH LPAREN */ yytestcase(yyruleno==172);
{
    ps->closure.pushScope();
}
        break;
      case 168: /* for_header1 ::= for_opener for_init_stmt SEMICOLON */
{
    // opening for expr
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 169: /* for_header2 ::= for_header1 expr SEMICOLON */
{
    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0; delete yymsp[-1].minor.yy0;

    // Opening for assign_statement
    yygotominor.yy0 = genTemp(yymsp[-1].minor.yy0);
    ps->gen << "def " << yygotominor.yy0->data <<"():" << std::endl;
    ps->gen.indent();
}
        break;
      case 170: /* for_header ::= for_header2 for_action_stmt RPAREN */
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    ps->gen.unindent(false);
}
        break;
      case 171: /* for_stmt ::= for_header stmt */
{
    ps->gen << "EUDSetContinuePoint()" << std::endl;
    ps->gen << yymsp[-1].minor.yy0->data << "()" << std::endl;
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
    ps->closure.popScope();
}
        break;
      case 173: /* foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty RPAREN */
{
    commaListIter(yymsp[-3].minor.yy0->data, [&](std::string& s) {
        ps->closure.defVariable(s);
    });
    ps->gen << "for " << yymsp[-3].minor.yy0->data << " in " << yymsp[-1].minor.yy0->data << ":" << std::endl;
    ps->gen.indent();
}
        break;
      case 174: /* foreach_stmt ::= foreach_header stmt */
{
    ps->gen.unindent(true);
    ps->closure.popScope();
}
        break;
      case 175: /* continue_stmt ::= CONTINUE */
{
    ps->gen << "EUDContinue()" << std::endl;
}
        break;
      case 176: /* break_stmt ::= BREAK */
{
    ps->gen << "EUDBreak()" << std::endl;
}
        break;
      case 177: /* return_stmt ::= RETURN exprList */
{
    if(MAP_DEBUG){
        ps->gen << "EUDTracePop()" << std::endl;
    }
    ps->gen << "EUDReturn(" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[0].minor.yy0;
}
        break;
      case 178: /* expr ::= CONDITIONNAME LPAREN fArgs RPAREN */
      case 179: /* expr ::= KILLS LPAREN fArgs RPAREN */ yytestcase(yyruleno==179);
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "(" + yymsp[-1].minor.yy0->data + ")";
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
        break;
      case 180: /* actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN */
{
    ps->gen << "DoActions(" << yymsp[-3].minor.yy0->data << "(" << yymsp[-1].minor.yy0->data << "))" << std::endl;
    delete yymsp[-3].minor.yy0;
    delete yymsp[-1].minor.yy0;
}
        break;
      default:
      /* (0) program ::= chunks */ yytestcase(yyruleno==0);
      /* (1) chunks ::= */ yytestcase(yyruleno==1);
      /* (2) chunks ::= chunks chunk */ yytestcase(yyruleno==2);
      /* (4) chunk ::= import_chunk SEMICOLON */ yytestcase(yyruleno==4);
      /* (5) chunk ::= fdef_chunk */ yytestcase(yyruleno==5);
      /* (6) chunk ::= fdecl_chunk */ yytestcase(yyruleno==6);
      /* (7) chunk ::= object_chunk */ yytestcase(yyruleno==7);
      /* (8) chunk ::= vdef_stmt SEMICOLON */ yytestcase(yyruleno==8);
      /* (9) chunk ::= vdefAssign_global_stmt SEMICOLON */ yytestcase(yyruleno==9);
      /* (10) chunk ::= cdef_global_stmt SEMICOLON */ yytestcase(yyruleno==10);
      /* (28) stmt ::= bodyStmt */ yytestcase(yyruleno==28);
      /* (29) stmt ::= return_stmt SEMICOLON */ yytestcase(yyruleno==29);
      /* (33) blockStmt ::= lbracket return_stmt SEMICOLON rbracket */ yytestcase(yyruleno==33);
      /* (34) blockStmt ::= lbracket bodyStmtList rbracket */ yytestcase(yyruleno==34);
      /* (35) blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket */ yytestcase(yyruleno==35);
      /* (37) bodyStmt ::= blockStmt */ yytestcase(yyruleno==37);
      /* (38) bodyStmt ::= SEMICOLON */ yytestcase(yyruleno==38);
      /* (39) bodyStmt ::= vdef_stmt SEMICOLON */ yytestcase(yyruleno==39);
      /* (40) bodyStmt ::= vdefAssign_stmt SEMICOLON */ yytestcase(yyruleno==40);
      /* (41) bodyStmt ::= cdef_stmt SEMICOLON */ yytestcase(yyruleno==41);
      /* (42) bodyStmt ::= assign_stmt SEMICOLON */ yytestcase(yyruleno==42);
          /* (44) bodyStmt ::= actionStmt SEMICOLON */ yytestcase(yyruleno == 44);
      /* (45) bodyStmt ::= if_stmt */ yytestcase(yyruleno==45);
      /* (46) bodyStmt ::= while_stmt */ yytestcase(yyruleno==46);
      /* (47) bodyStmt ::= for_stmt */ yytestcase(yyruleno==47);
      /* (48) bodyStmt ::= foreach_stmt */ yytestcase(yyruleno==48);
      /* (49) bodyStmt ::= continue_stmt SEMICOLON */ yytestcase(yyruleno==49);
      /* (50) bodyStmt ::= break_stmt SEMICOLON */ yytestcase(yyruleno==50);
      /* (51) bodyStmtList ::= bodyStmt */ yytestcase(yyruleno==51);
      /* (52) bodyStmtList ::= bodyStmtList bodyStmt */ yytestcase(yyruleno==52);
      /* (87) commaSkippable ::= COMMA */ yytestcase(yyruleno==87);
      /* (88) commaSkippable ::= */ yytestcase(yyruleno==88);
          /* (146) if_block ::= if_header RPAREN stmt */ yytestcase(yyruleno == 146);
          /* (149) if_block ::= if_block elif_header RPAREN stmt */ yytestcase(yyruleno == 149);
      /* (157) for_init_stmt_nonEmpty ::= vdef_stmt */ yytestcase(yyruleno==157);
      /* (158) for_init_stmt_nonEmpty ::= vdefAssign_stmt */ yytestcase(yyruleno==158);
      /* (159) for_init_stmt_nonEmpty ::= cdef_stmt */ yytestcase(yyruleno==159);
      /* (160) for_init_stmt_nonEmpty ::= assign_stmt */ yytestcase(yyruleno==160);
      /* (161) for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty */ yytestcase(yyruleno==161);
      /* (162) for_init_stmt ::= for_init_stmt_nonEmpty */ yytestcase(yyruleno==162);
      /* (163) for_init_stmt ::= */ yytestcase(yyruleno==163);
      /* (164) for_action_stmt_nonEmpty ::= assign_stmt */ yytestcase(yyruleno==164);
      /* (165) for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty */ yytestcase(yyruleno==165);
      /* (166) for_action_stmt ::= */ yytestcase(yyruleno==166);
      /* (167) for_action_stmt ::= for_action_stmt_nonEmpty */ yytestcase(yyruleno==167);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */

    throw_error(-1, "Unrecoverable error");
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
        /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}


PyGenerator* pGen;
ClosureManager* closure;

std::string ParseString(const std::string& fname, const std::string& code, bool addComment)
{
    // Module name from fname
    // last \/ ~ first .
    auto lpos = fname.find_last_of("\\/");
    if(lpos == std::string::npos) lpos = 0;
    else lpos++;
    auto rpos = fname.find_first_of(".", lpos);
    if(rpos == std::string::npos) rpos = fname.size();
    currentModule = fname.substr(lpos, rpos - lpos);
    currentFile = fname;

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(stdout, "--");
#endif

    // Main code
    Tokenizer tok(code);
    void* pParser = ParseAlloc (malloc);
    ParserStruct ps;
    Token* token;
    currentTokenizingLine = 0;
    pGen = &ps.gen;
    closure = &ps.closure;
    lambdaIndex = 0;

    if(PARSER_DEBUG) std::cout << "Parsing string [[[\n" << code.c_str() << "\n]]]\n";
    tmpIndex = 1;
    resetParserErrorNum();
    while ((token = tok.getToken()) != nullptr) {
        if (currentTokenizingLine != tok.getCurrentLine()) {
            currentTokenizingLine = tok.getCurrentLine();
            if(addComment) ps.gen << "# (Line " << currentTokenizingLine << ") " << trim(tok.getCurrentLineString()) << std::endl;
            if(MAP_DEBUG && !currentFunction.empty()) {
                ps.gen << "EUDTraceLog(\'" << currentFile << "|" << currentFunction << "|" << currentTokenizingLine
                       << "\')" << std::endl;
            }
            if(PARSER_DEBUG) printf("# reading line %s\n", tok.getCurrentLineString().c_str());
        }
        if (tokenTypeConv(token)) {
            Parse (pParser, token->type, token, &ps);
        }
        else {
            throw_error(8104, "Invalid token");
        }
    }
    Parse (pParser, 0, nullptr, &ps);
    ParseFree(pParser, free );

    std::string ret = iwCollapse(ps.gen.str());
    if(getParseErrorNum() > 0) {
        ret += "\nraise RuntimeError('Compile error')\n";
    }

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(NULL, "--");
#endif

    return ret;
}
