/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 1 "parser\\epparser.lemon"

#include <stdio.h>
#include <assert.h>
#include <string>
#include <sstream>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <regex>

#include "epparser.h"
#include "generator/pygen.h"
#include "generator/closure.h"
#include "parser.h"
#include "tokenAdapter.h"
#include "parserUtilities.h"

struct ParserStruct {
   PyGenerator gen;
    ClosureManager closure;
};

int currentTokenizingLine;
std::string currentFunction;
std::string currentModule;
bool functionCalledInMultipleActions;
bool PARSER_DEBUG = false;
bool MAP_DEBUG = false;

#line 38 "parser\\epparser.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 141
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token*
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy281;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL  ParserStruct* ps ;
#define ParseARG_PDECL , ParserStruct* ps 
#define ParseARG_FETCH  ParserStruct* ps  = yypParser->ps 
#define ParseARG_STORE yypParser->ps  = ps 
#define YYNSTATE 344
#define YYNRULE 174
#define YYERRORSYMBOL 75
#define YYERRSYMDT yy281
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (7187)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   460,  411,  460,  411,  411,  226,  411,  411,  411,  411,
 /*    10 */   411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
 /*    20 */   411,  411,    3,  232,   19,  411,  411,  227,  343,  225,
 /*    30 */   224,  223,  342,  341,  340,  219,  222,   10,  362,  183,
 /*    40 */   235,   80,  362,  362,   49,  221,  463,    2,  248,  182,
 /*    50 */   281,  411,  411,  460,  460,  460,  460,  460,  460,  460,
 /*    60 */   460,  460,  460,  462,  412,  462,  412,  412,  220,  412,
 /*    70 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
 /*    80 */   412,  412,  412,  412,  412,   50,  241,  412,  412,  412,
 /*    90 */   355,  355,  339,  358,  355,  337,  338,   48,   47,   46,
 /*   100 */    45,   44,   43,   42,   41,   40,   39,  356,  356,  357,
 /*   110 */   456,  356,  397,  316,  412,  412,  462,  462,  462,  462,
 /*   120 */   462,  462,  462,  462,  462,  462,  461,  413,  461,  413,
 /*   130 */   413,  403,  413,  413,  413,  413,  413,  413,  413,  413,
 /*   140 */   413,  413,  413,  413,  413,  413,  413,  413,  321,  315,
 /*   150 */   413,  413,  413,  176,  176,  363,  403,  398,  176,  363,
 /*   160 */   363,  403,  176,  201,  211,  269,  296,  403,  201,  260,
 /*   170 */   269,  297,  201,  335,  269,  298,   50,  413,  413,  461,
 /*   180 */   461,  461,  461,  461,  461,  461,  461,  461,  461,  369,
 /*   190 */   176,  369,  333,  398,  176,   32,   29,  369,  333,  333,
 /*   200 */   201,  458,  269,  300,  201,   50,  269,  279,  334,  369,
 /*   210 */   369,   27,  271,   28,  229,  369,  369,  369,  401,  369,
 /*   220 */   369,  369,  402,  369,  183,  369,  369,  369,  369,  369,
 /*   230 */    82,  425,  369,   83,  182,  139,  369,  369,  369,  369,
 /*   240 */   369,  183,  369,  369,  369,  370,   26,  370,  415,  180,
 /*   250 */   264,  182,  464,  370,  464,  369,  369,  369,  369,  369,
 /*   260 */   369,  369,  369,  369,  364,  370,  370,  228,  364,  364,
 /*   270 */   132,  370,  370,  370,   23,  370,  370,  370,  415,  370,
 /*   280 */   183,  370,  370,  370,  370,  370,  130,  273,  370,  262,
 /*   290 */   182,  271,  370,  370,  370,  370,  370,  183,  370,  370,
 /*   300 */   370,  371,   92,  371,  419,   91,  237,  182,   24,  371,
 /*   310 */   333,  370,  370,  370,  370,  370,  370,  370,  370,  370,
 /*   320 */   366,  371,  371,  122,  366,  366,  121,  371,  371,  371,
 /*   330 */   417,  371,  371,  371,  501,  371,  494,  371,  371,  371,
 /*   340 */   371,  371,  519,   11,  371,  291,    8,    4,  371,  371,
 /*   350 */   371,  371,  371,  183,  371,  371,  371,  374,  120,  374,
 /*   360 */   417,  494,  249,  182,  501,  374,  119,  371,  371,  371,
 /*   370 */   371,  371,  371,  371,  371,  371,  367,  374,  374,  323,
 /*   380 */   367,  367,  176,  374,  374,  374,   15,  374,  374,  374,
 /*   390 */   502,  374,  200,  374,  374,  374,  374,  374,  322,  112,
 /*   400 */   374,  111,  321,  179,  374,  374,  374,  374,  374,  183,
 /*   410 */   374,  374,  374,  373,  174,  373,  504,  495,  246,  182,
 /*   420 */   502,  373,   90,  374,  374,  374,  374,  374,  374,  374,
 /*   430 */   374,  374,  275,  373,  373,  265,   86,  272,  230,  373,
 /*   440 */   373,  373,  495,  373,  373,  373,   56,  373,  496,  373,
 /*   450 */   373,  373,  373,  373,  312,  311,  373,  157,  309,  308,
 /*   460 */   373,  373,  373,  373,  373,  183,  373,  373,  373,  375,
 /*   470 */   156,  375,  306,  496,  244,  182,  155,  375,  305,  373,
 /*   480 */   373,  373,  373,  373,  373,  373,  373,  373,  497,  375,
 /*   490 */   375,  303,  176,  302,  176,  375,  375,  375,  154,  375,
 /*   500 */   375,  375,  210,  375,  209,  375,  375,  375,  375,  375,
 /*   510 */   149,  176,  375,  497,   17,  148,  375,  375,  375,  375,
 /*   520 */   375,  208,  375,  375,  375,  376,  147,  376,  146,   13,
 /*   530 */   145,   95,  481,  376,   36,  375,  375,  375,  375,  375,
 /*   540 */   375,  375,  375,  375,  498,  376,  376,  484,   35,  490,
 /*   550 */    34,  376,  376,  376,  499,  376,  376,  376,  212,  376,
 /*   560 */    50,  376,  376,  376,  376,  376,  214,  176,  376,  498,
 /*   570 */   140,  284,  376,  376,  376,  376,  376,  171,  376,  376,
 /*   580 */   376,  377,  509,  377,  512,  408,  513,   16,  514,  377,
 /*   590 */   276,  376,  376,  376,  376,  376,  376,  376,  376,  376,
 /*   600 */   333,  377,  377,  278,  236,   99,  176,  377,  377,  377,
 /*   610 */   274,  377,  377,  377,   81,  377,  170,  377,  377,  377,
 /*   620 */   377,  377,  216,  176,  377,  234,  138,  243,  377,  377,
 /*   630 */   377,  377,  377,  169,  377,  377,  377,  379,  242,  379,
 /*   640 */   127,   50,  128,  125,  267,  379,  266,  377,  377,  377,
 /*   650 */   377,  377,  377,  377,  377,  377,   50,  379,  379,  238,
 /*   660 */   229,  299,  176,  379,  379,  379,  457,  379,  379,  379,
 /*   670 */   263,  379,  168,  379,  379,  379,  379,  379,  250,  176,
 /*   680 */   379,  459,  247,  231,  379,  379,  379,  379,  379,  167,
 /*   690 */   379,  379,  379,  380,  245,  380,  520,  520,  520,  520,
 /*   700 */   520,  380,  176,  379,  379,  379,  379,  379,  379,  379,
 /*   710 */   379,  379,  166,  380,  380,  520,  520,  520,  176,  380,
 /*   720 */   380,  380,  520,  380,  380,  380,  520,  380,  165,  380,
 /*   730 */   380,  380,  380,  380,  520,  176,  380,  520,  520,  520,
 /*   740 */   380,  380,  380,  380,  380,  164,  380,  380,  380,  381,
 /*   750 */   520,  381,  520,  520,  520,  520,  520,  381,  176,  380,
 /*   760 */   380,  380,  380,  380,  380,  380,  380,  380,  163,  381,
 /*   770 */   381,  520,  176,  520,  176,  381,  381,  381,  520,  381,
 /*   780 */   381,  381,  162,  381,  161,  381,  381,  381,  381,  381,
 /*   790 */   520,  176,  381,  520,  520,  520,  381,  381,  381,  381,
 /*   800 */   381,  110,  381,  381,  381,  382,  520,  382,  520,  520,
 /*   810 */   520,  520,  520,  382,  176,  381,  381,  381,  381,  381,
 /*   820 */   381,  381,  381,  381,  109,  382,  382,  520,  520,  520,
 /*   830 */   176,  382,  382,  382,  520,  382,  382,  382,  520,  382,
 /*   840 */   108,  382,  382,  382,  382,  382,  520,  176,  382,  520,
 /*   850 */   520,  520,  382,  382,  382,  382,  382,  107,  382,  382,
 /*   860 */   382,  383,  520,  383,  520,  520,  520,  520,  520,  383,
 /*   870 */   176,  382,  382,  382,  382,  382,  382,  382,  382,  382,
 /*   880 */   106,  383,  383,  520,  520,  520,  176,  383,  383,  383,
 /*   890 */   520,  383,  383,  383,  520,  383,  105,  383,  383,  383,
 /*   900 */   383,  383,  520,  176,  383,  520,  520,  520,  383,  383,
 /*   910 */   383,  383,  383,  160,  383,  383,  383,  384,  520,  384,
 /*   920 */   520,  520,  520,  520,  520,  384,  176,  383,  383,  383,
 /*   930 */   383,  383,  383,  383,  383,  383,  159,  384,  384,  520,
 /*   940 */   520,  520,  176,  384,  384,  384,  520,  384,  384,  384,
 /*   950 */   520,  384,  207,  384,  384,  384,  384,  384,  520,  176,
 /*   960 */   384,  520,  520,  520,  384,  384,  384,  384,  384,  153,
 /*   970 */   384,  384,  384,  385,  520,  385,  520,  520,  520,  520,
 /*   980 */   520,  385,  176,  384,  384,  384,  384,  384,  384,  384,
 /*   990 */   384,  384,  152,  385,  385,  520,  520,  520,  176,  385,
 /*  1000 */   385,  385,  520,  385,  385,  385,  520,  385,  151,  385,
 /*  1010 */   385,  385,  385,  385,  520,  176,  385,  520,  520,  520,
 /*  1020 */   385,  385,  385,  385,  385,  150,  385,  385,  385,  386,
 /*  1030 */   520,  386,  520,  520,  520,  520,  520,  386,  176,  385,
 /*  1040 */   385,  385,  385,  385,  385,  385,  385,  385,  206,  386,
 /*  1050 */   386,  520,  520,  520,  176,  386,  386,  386,  520,  386,
 /*  1060 */   386,  386,  520,  386,  181,  386,  386,  386,  386,  386,
 /*  1070 */   520,  176,  386,  520,  520,  520,  386,  386,  386,  386,
 /*  1080 */   386,  196,  386,  386,  386,  387,  520,  387,  520,  520,
 /*  1090 */   520,  520,  520,  387,  176,  386,  386,  386,  386,  386,
 /*  1100 */   386,  386,  386,  386,  195,  387,  387,  520,  520,  520,
 /*  1110 */   176,  387,  387,  387,  520,  387,  387,  387,  520,  387,
 /*  1120 */   194,  387,  387,  387,  387,  387,  520,  176,  387,  520,
 /*  1130 */   520,  520,  387,  387,  387,  387,  387,  193,  387,  387,
 /*  1140 */   387,  388,  520,  388,  520,  520,  520,  520,  520,  388,
 /*  1150 */   176,  387,  387,  387,  387,  387,  387,  387,  387,  387,
 /*  1160 */   192,  388,  388,  520,  520,  520,  176,  388,  388,  388,
 /*  1170 */   520,  388,  388,  388,  520,  388,  191,  388,  388,  388,
 /*  1180 */   388,  388,  520,  176,  388,  520,  520,  520,  388,  388,
 /*  1190 */   388,  388,  388,  190,  388,  388,  388,  389,  520,  389,
 /*  1200 */   520,  520,  520,  520,  520,  389,  176,  388,  388,  388,
 /*  1210 */   388,  388,  388,  388,  388,  388,  189,  389,  389,  520,
 /*  1220 */   520,  520,  176,  389,  389,  389,  520,  389,  389,  389,
 /*  1230 */   520,  389,  188,  389,  389,  389,  389,  389,  520,  176,
 /*  1240 */   389,  520,  520,  520,  389,  389,  389,  389,  389,  187,
 /*  1250 */   389,  389,  389,  390,  520,  390,  520,  520,  520,  520,
 /*  1260 */   520,  390,  176,  389,  389,  389,  389,  389,  389,  389,
 /*  1270 */   389,  389,  186,  390,  390,  520,  520,  520,  176,  390,
 /*  1280 */   390,  390,  520,  390,  390,  390,  520,  390,  185,  390,
 /*  1290 */   390,  390,  390,  390,  520,  176,  390,  520,  520,  520,
 /*  1300 */   390,  390,  390,  390,  390,  184,  390,  390,  390,  391,
 /*  1310 */   520,  391,  520,  520,  520,  520,  520,  391,  176,  390,
 /*  1320 */   390,  390,  390,  390,  390,  390,  390,  390,  205,  391,
 /*  1330 */   391,  520,  520,  520,  176,  391,  391,  391,  520,  391,
 /*  1340 */   391,  391,  520,  391,  204,  391,  391,  391,  391,  391,
 /*  1350 */   520,  176,  391,  520,  520,  520,  391,  391,  391,  391,
 /*  1360 */   391,  203,  391,  391,  391,  392,  520,  392,  520,  520,
 /*  1370 */   520,  520,  520,  392,  176,  391,  391,  391,  391,  391,
 /*  1380 */   391,  391,  391,  391,  202,  392,  392,  520,  520,  520,
 /*  1390 */   520,  392,  392,  392,  520,  392,  392,  392,  468,  392,
 /*  1400 */   520,  392,  392,  392,  392,  392,  520,  520,  392,  520,
 /*  1410 */   520,  520,  392,  392,  392,  392,  392,  176,  392,  392,
 /*  1420 */   392,  520,  520,  468,  520,  520,  520,  201,  468,  268,
 /*  1430 */   520,  392,  392,  392,  392,  392,  392,  392,  392,  392,
 /*  1440 */   446,  446,  446,  446,  346,  446,  446,  446,  446,  446,
 /*  1450 */   446,   66,   65,   67,   69,   68,   74,   73,   71,   72,
 /*  1460 */    70,  520,  470,   18,   78,  318,  446,  520,  520,  520,
 /*  1470 */   520,  446,  520,  520,  520,  520,  346,  446,  346,  520,
 /*  1480 */   346,  346,  346,  520,  520,  520,  520,  470,  446,  520,
 /*  1490 */   446,  446,  470,  447,  447,  447,  447,  346,  447,  447,
 /*  1500 */   447,  447,  447,  447,   66,   65,   67,   69,   68,   74,
 /*  1510 */    73,   71,   72,   70,  520,   50,   18,   78,  318,  447,
 /*  1520 */   520,  520,  520,  520,  447,  520,  520,  520,  520,  520,
 /*  1530 */   447,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  1540 */   466,  447,  520,  447,  447,  466,  448,  448,  448,  448,
 /*  1550 */   347,  448,  448,  448,  448,  448,  448,   66,   65,   67,
 /*  1560 */    69,   68,   74,   73,   71,   72,   70,  520,  520,   18,
 /*  1570 */    78,  318,  448,  520,  520,  520,  520,  448,  520,  520,
 /*  1580 */   520,  520,  347,  448,  347,  520,  347,  347,  347,  520,
 /*  1590 */   520,  520,  520,  520,  448,  520,  448,  448,  520,  449,
 /*  1600 */   449,  449,  449,  347,  449,  449,  449,  449,  449,  449,
 /*  1610 */    66,   65,   67,   69,   68,   74,   73,   71,   72,   70,
 /*  1620 */   520,  520,   18,   78,  318,  449,  520,  520,  520,  520,
 /*  1630 */   449,  520,  520,  520,  520,  520,  449,  520,  520,  520,
 /*  1640 */   520,  520,  520,  520,  520,  520,  520,  449,  520,  449,
 /*  1650 */   449,  520,  450,  450,  450,  450,  348,  450,  450,  450,
 /*  1660 */   450,  450,  450,   66,   65,   67,   69,   68,   74,   73,
 /*  1670 */    71,   72,   70,  520,  520,   18,   78,  318,  450,  520,
 /*  1680 */   520,  520,  520,  450,  520,  520,  520,  520,  348,  450,
 /*  1690 */   348,  520,  348,  348,  348,  520,  520,  520,  520,  520,
 /*  1700 */   450,  520,  450,  450,  520,  451,  451,  451,  451,  348,
 /*  1710 */   451,  451,  451,  451,  451,  451,   66,   65,   67,   69,
 /*  1720 */    68,   74,   73,   71,   72,   70,  520,  520,   18,   78,
 /*  1730 */   318,  451,   30,   25,  333,  333,  451,  483,  520,  483,
 /*  1740 */   520,  520,  451,  520,  520,  483,  520,  520,  520,  520,
 /*  1750 */   520,  520,  520,  451,  520,  451,  451,  483,  483,  455,
 /*  1760 */   455,  520,  520,  483,  483,  483,  520,  483,  483,  483,
 /*  1770 */   520,  483,  520,  483,  483,  483,  483,  483,  520,  520,
 /*  1780 */   483,  520,  520,  520,  483,  483,  483,  483,  483,  520,
 /*  1790 */   483,  483,  483,  486,  520,  486,  520,  520,  520,  520,
 /*  1800 */   520,  486,  520,  483,  483,  483,  483,  483,  483,  483,
 /*  1810 */   483,  483,  520,  486,  486,  520,  520,  520,  520,  486,
 /*  1820 */   486,  486,  520,  486,  486,  486,  520,  486,  520,  486,
 /*  1830 */   486,  486,  486,  486,  520,  520,  486,  520,  520,  520,
 /*  1840 */   486,  486,  486,  486,  486,  520,  486,  486,  486,  492,
 /*  1850 */   520,  492,  520,  520,  520,  520,  520,  492,  520,  486,
 /*  1860 */   486,  486,  486,  486,  486,  486,  486,  486,  520,  492,
 /*  1870 */   492,  520,  520,  520,  520,  492,  492,  492,  520,  492,
 /*  1880 */   492,  492,  520,  492,  520,  492,  492,  492,  492,  492,
 /*  1890 */   520,  520,  492,  520,  520,  520,  492,  492,  492,  492,
 /*  1900 */   492,  520,  492,  492,  492,  508,  520,  508,  520,  520,
 /*  1910 */   520,  520,  520,  508,  520,  492,  492,  492,  492,  492,
 /*  1920 */   492,  492,  492,  492,  520,  508,  508,  520,  520,  520,
 /*  1930 */   520,  508,  508,  508,  520,  508,  508,  508,  520,  508,
 /*  1940 */   520,  508,  508,  508,  508,  508,  520,  520,  508,  520,
 /*  1950 */   520,  520,  508,  508,  508,  508,  508,  520,  508,  508,
 /*  1960 */   508,  511,  520,  511,  520,  520,  520,  520,  520,  511,
 /*  1970 */   520,  508,  508,  508,  508,  508,  508,  508,  508,  508,
 /*  1980 */   520,  511,  511,  520,  520,  520,  520,  511,  511,  511,
 /*  1990 */   520,  511,  511,  511,  520,  511,  520,  511,  511,  511,
 /*  2000 */   511,  511,  520,  520,  511,  520,  520,  520,  511,  511,
 /*  2010 */   511,  511,  511,  520,  511,  511,  511,  517,  520,  517,
 /*  2020 */   520,  520,  520,  520,  520,  517,  520,  511,  511,  511,
 /*  2030 */   511,  511,  511,  511,  511,  511,  520,  517,  517,  520,
 /*  2040 */   520,  520,  520,  517,  517,  517,  520,  517,  517,  517,
 /*  2050 */   520,  517,  520,  517,  517,  517,  517,  517,  520,  520,
 /*  2060 */   517,  520,  520,  520,  517,  517,  517,  517,  517,  520,
 /*  2070 */   517,  517,  517,  489,  520,  489,  520,  520,  520,  520,
 /*  2080 */   520,  489,  520,  517,  517,  517,  517,  517,  517,  517,
 /*  2090 */   517,  517,  520,  489,  489,  520,  520,  520,  520,  489,
 /*  2100 */   489,  489,  520,  489,  489,  489,  520,  489,  520,  489,
 /*  2110 */   489,  489,  489,  489,  520,  520,  489,  520,  520,  520,
 /*  2120 */   489,  489,  489,  489,  489,  520,  489,  489,  489,  378,
 /*  2130 */   520,  378,  520,  520,  520,  520,  520,  378,  520,  489,
 /*  2140 */   489,  489,  489,  489,  489,  489,  489,  489,  520,  378,
 /*  2150 */   378,  520,  520,  520,  520,  378,  378,  378,  520,  378,
 /*  2160 */   378,  378,  520,  378,  520,  378,  378,  378,  378,  378,
 /*  2170 */   520,  520,  378,  520,  520,  520,  378,  378,  378,  378,
 /*  2180 */   378,  520,  378,  378,  378,  488,  520,  143,  520,  520,
 /*  2190 */   520,  520,  520,  488,  520,  378,  378,  378,  378,  378,
 /*  2200 */   378,  378,  378,  378,  520,  488,  488,  520,  520,  520,
 /*  2210 */   520,  488,  488,  488,  520,  488,  488,  488,  520,  488,
 /*  2220 */   520,  488,  488,  488,  488,  488,  520,  520,  488,  259,
 /*  2230 */   520,  520,  488,  488,  488,  488,  488,  520,  488,  488,
 /*  2240 */   488,  520,  520,  520,  520,  520,  520,  258,  257,  256,
 /*  2250 */   176,  488,  488,  488,  488,  488,  488,  488,  488,  488,
 /*  2260 */   199,  332,  520,  520,  520,  215,  261,  520,  520,  520,
 /*  2270 */   328,  520,  520,  124,  520,  520,  254,  217,  520,  520,
 /*  2280 */   520,  520,  520,  131,  331,    2,  520,  520,  327,  326,
 /*  2290 */   325,  198,  117,  116,  115,  114,  113,  320,  319,  520,
 /*  2300 */   520,  199,  253,  176,  520,  520,  215,  261,  293,    9,
 /*  2310 */    22,  520,  520,  199,  289,    7,   12,  520,  215,  261,
 /*  2320 */   520,   33,   14,    6,   87,    5,  520,  332,  520,  520,
 /*  2330 */   520,  252,  286,  520,  520,  520,  328,  520,  520,  124,
 /*  2340 */   520,  520,  520,  104,  520,  520,  520,  520,  520,  131,
 /*  2350 */   331,    2,  520,  520,  327,  326,  325,  198,  117,  116,
 /*  2360 */   115,  114,  113,  320,  319,  520,  520,  199,  520,  520,
 /*  2370 */   520,  520,  215,  261,  293,    9,   22,  399,  520,  399,
 /*  2380 */   289,    7,   12,  332,  520,  520,  520,   33,   14,    6,
 /*  2390 */    87,    5,  328,  520,  520,  124,  520,  520,  520,  103,
 /*  2400 */   520,  520,  520,  520,  399,  131,  331,    2,  520,  399,
 /*  2410 */   327,  326,  325,  198,  117,  116,  115,  114,  113,  320,
 /*  2420 */   319,  520,  520,  199,  253,  176,  399,  520,  215,  261,
 /*  2430 */   293,    9,   22,  520,  520,  199,  289,    7,   12,  332,
 /*  2440 */   215,  261,  520,   33,   14,    6,   87,    5,  328,  520,
 /*  2450 */   520,  124,  520,  251,  520,  102,  520,  520,  520,  520,
 /*  2460 */   520,  131,  331,    2,  520,  520,  327,  326,  325,  198,
 /*  2470 */   117,  116,  115,  114,  113,  320,  319,  520,  520,  199,
 /*  2480 */   520,  520,  520,  520,  215,  261,  293,    9,   22,  400,
 /*  2490 */   520,  400,  289,    7,   12,  332,  520,  520,  520,   33,
 /*  2500 */    14,    6,   87,    5,  328,  520,  520,  124,  520,  520,
 /*  2510 */   520,  101,  520,  520,  520,  520,  400,  131,  331,    2,
 /*  2520 */   520,  400,  327,  326,  325,  198,  117,  116,  115,  114,
 /*  2530 */   113,  320,  319,  520,  520,  199,  520,  520,  400,  520,
 /*  2540 */   215,  261,  293,    9,   22,  520,  520,  520,  289,    7,
 /*  2550 */    12,  332,  520,  520,  520,   33,   14,    6,   87,    5,
 /*  2560 */   328,  520,  520,  124,  520,  520,  520,  100,  520,  520,
 /*  2570 */   520,  520,  520,  131,  331,    2,  520,  520,  327,  326,
 /*  2580 */   325,  198,  117,  116,  115,  114,  113,  320,  319,  520,
 /*  2590 */   520,  199,  520,  520,  520,  520,  215,  261,  293,    9,
 /*  2600 */    22,  520,  520,  520,  289,    7,   12,  332,  520,  520,
 /*  2610 */   520,   33,   14,    6,   87,    5,  328,  520,  520,  124,
 /*  2620 */   520,  520,  520,   98,  520,  520,  520,  520,  520,  131,
 /*  2630 */   331,    2,  520,  520,  327,  326,  325,  198,  117,  116,
 /*  2640 */   115,  114,  113,  320,  319,  520,  520,  199,  520,  520,
 /*  2650 */   520,  520,  215,  261,  293,    9,   22,  520,  520,  520,
 /*  2660 */   289,    7,   12,  332,  520,  520,  520,   33,   14,    6,
 /*  2670 */    87,    5,  328,  520,  520,  124,  520,  520,  520,  233,
 /*  2680 */   520,  520,  520,  520,  520,  131,  331,    2,  520,  520,
 /*  2690 */   327,  326,  325,  198,  117,  116,  115,  114,  113,  320,
 /*  2700 */   319,  520,  520,  199,  520,  520,  520,  520,  215,  261,
 /*  2710 */   293,    9,   22,  520,  520,  520,  289,    7,   12,  134,
 /*  2720 */   520,  520,  520,   33,   14,    6,   87,    5,  328,  520,
 /*  2730 */   520,  124,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  2740 */   520,  133,  330,    2,  520,    1,  327,  326,  325,  198,
 /*  2750 */   117,  116,  115,  114,  113,  320,  319,  520,  520,  199,
 /*  2760 */   520,  520,  520,  520,  215,  261,  293,    9,   22,  520,
 /*  2770 */   520,  520,  289,    7,   12,  135,  520,  520,  520,   33,
 /*  2780 */    14,    6,   87,    5,  328,  520,  520,  124,  520,  520,
 /*  2790 */   520,  520,  520,  520,  520,  520,  520,  136,  329,    2,
 /*  2800 */   126,  520,  327,  326,  325,  198,  117,  116,  115,  114,
 /*  2810 */   113,  320,  319,  520,  520,  199,  520,  520,  520,  520,
 /*  2820 */   215,  261,  293,    9,   22,  520,  520,  520,  289,    7,
 /*  2830 */    12,  372,  520,  520,  520,   33,   14,    6,   87,    5,
 /*  2840 */   520,  520,  520,  372,  372,  520,  520,  520,  520,  372,
 /*  2850 */   372,  372,  520,  372,  372,  520,  520,  520,  520,  520,
 /*  2860 */   372,  372,  372,  372,  520,  520,  372,  520,  520,  520,
 /*  2870 */   372,  372,  372,  372,  372,  520,  372,  372,  372,  520,
 /*  2880 */   520,  520,  520,  520,  520,  520,  395,  520,  520,  372,
 /*  2890 */   372,  372,  372,  372,  372,  372,  372,  372,  395,  395,
 /*  2900 */   520,  520,  520,  520,  395,  395,  395,  520,  395,  395,
 /*  2910 */   520,  520,  520,  520,  520,  395,  395,  395,  395,  520,
 /*  2920 */   520,  395,  520,  520,  520,  395,  395,  395,  395,  395,
 /*  2930 */   520,  395,  395,  395,  520,  520,  520,  520,  520,  520,
 /*  2940 */   520,  396,  520,  520,  395,  395,  395,  395,  395,  395,
 /*  2950 */   395,  395,  395,  396,  396,  520,  520,  520,  520,  396,
 /*  2960 */   396,  396,  520,  396,  396,  520,  520,  520,  520,  520,
 /*  2970 */   396,  396,  396,  396,  520,  520,  396,  520,  520,  520,
 /*  2980 */   396,  396,  396,  396,  396,  520,  396,  396,  396,  520,
 /*  2990 */   520,  520,  520,  520,  520,  520,  393,  520,  520,  396,
 /*  3000 */   396,  396,  396,  396,  396,  396,  396,  396,  393,  393,
 /*  3010 */   520,  520,  520,  520,  393,  393,  393,  520,  393,  393,
 /*  3020 */   520,  520,  520,  520,  520,  393,  393,   97,  393,  520,
 /*  3030 */   520,  393,  520,  520,  520,  393,  393,  393,  393,  393,
 /*  3040 */   520,  393,  393,  393,  520,  520,  520,  520,  520,  520,
 /*  3050 */   520,  394,  520,  520,  393,  393,  393,  393,  393,  393,
 /*  3060 */   393,  393,  393,  394,  394,  520,  520,  520,  520,  394,
 /*  3070 */   394,  394,  520,  394,  394,  520,  520,  520,  520,  520,
 /*  3080 */   394,  394,  394,  394,  520,  520,  394,  520,  520,  520,
 /*  3090 */   394,  394,  394,  394,  394,  520,  394,  394,  394,  520,
 /*  3100 */   520,  520,  520,  520,  520,  520,   52,  520,  520,  394,
 /*  3110 */   394,  394,  394,  394,  394,  394,  394,  394,   55,   54,
 /*  3120 */   520,  520,  520,  520,   53,   77,   31,  520,  123,   96,
 /*  3130 */   520,  520,  520,  520,  520,  137,   89,  129,  178,  520,
 /*  3140 */   520,  177,  520,  520,  520,  314,  313,  310,  307,  304,
 /*  3150 */   520,   88,   38,   37,  520,  520,  520,  520,  520,  520,
 /*  3160 */   520,   52,  520,  520,  294,  290,  288,  285,  283,  282,
 /*  3170 */    21,  301,  280,   55,   54,  520,  520,  520,  520,   53,
 /*  3180 */    77,   31,  520,  123,   96,  520,  520,  520,  520,  520,
 /*  3190 */   137,   89,  128,  178,  520,  520,  177,  520,  520,  520,
 /*  3200 */   314,  313,  310,  307,  304,  520,   88,   38,   37,  520,
 /*  3210 */   520,  520,  520,  520,  520,  520,  359,  520,  520,  294,
 /*  3220 */   290,  288,  285,  283,  282,   21,  301,  280,  359,  359,
 /*  3230 */   520,  520,  520,  520,  359,  359,  359,  520,  218,  359,
 /*  3240 */   520,  520,  520,  520,  520,  359,  359,  520,  359,  520,
 /*  3250 */   520,  359,  520,  520,  520,  359,  359,  359,  359,  359,
 /*  3260 */   520,  359,  359,  359,  520,  520,  520,  520,  520,  520,
 /*  3270 */   520,  520,  520,  520,  359,  359,  359,  359,  359,  359,
 /*  3280 */   359,  359,  359,  404,  404,  404,  404,  349,  404,  404,
 /*  3290 */   404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
 /*  3300 */   404,  404,  404,  404,  520,  520,  404,  404,  404,  404,
 /*  3310 */   520,  520,  520,  520,  404,  520,  520,  520,  520,  349,
 /*  3320 */   404,  349,  520,  349,  349,  349,  520,  520,  520,  520,
 /*  3330 */   520,  404,  520,  404,  404,  520,  409,  409,  409,  409,
 /*  3340 */   349,  409,  409,  409,  409,  409,  409,  409,  409,  409,
 /*  3350 */   409,  409,  409,  409,  409,  409,  409,  520,  520,  409,
 /*  3360 */   409,  409,  409,  520,  520,  520,  520,  409,  520,  520,
 /*  3370 */   520,  520,  520,  409,  520,  520,  520,  520,  520,  520,
 /*  3380 */   520,  520,  520,  520,  409,  520,  409,  409,  520,  410,
 /*  3390 */   410,  410,  410,  350,  410,  410,  410,  410,  410,  410,
 /*  3400 */   410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
 /*  3410 */   520,  520,   20,  410,  410,  410,  520,  520,  520,  520,
 /*  3420 */   410,  520,  520,  520,  520,  350,  410,  350,  520,  350,
 /*  3430 */   350,  350,  520,  520,  520,  520,  520,  410,  520,  410,
 /*  3440 */   410,  520,  422,  422,  422,  422,  350,  422,  422,  422,
 /*  3450 */   422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
 /*  3460 */   422,  422,  422,  520,  520,  422,  324,  422,  422,  520,
 /*  3470 */   520,  520,  520,  422,  520,  520,  520,  520,  520,  422,
 /*  3480 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  3490 */   422,  520,  422,  422,  520,  411,  411,  411,  411,  351,
 /*  3500 */   411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
 /*  3510 */   411,  411,  411,  411,  411,  411,  520,  520,   19,  411,
 /*  3520 */   411,  411,  520,  520,  520,  520,  411,  520,  520,  520,
 /*  3530 */   520,  351,  411,  351,  520,  351,  351,  351,  520,  520,
 /*  3540 */   520,  520,  520,  411,  520,  411,  411,  520,  412,  412,
 /*  3550 */   412,  412,  351,  412,  412,  412,  412,  412,  412,  412,
 /*  3560 */   412,  412,  412,  412,  412,  412,  412,  412,  412,  520,
 /*  3570 */   520,  412,  412,  412,  412,  520,  520,  520,  520,  412,
 /*  3580 */   520,  520,  520,  520,  520,  412,  520,  520,  520,  520,
 /*  3590 */   520,  520,  520,  520,  520,  520,  412,  520,  412,  412,
 /*  3600 */   520,  413,  413,  413,  413,  352,  413,  413,  413,  413,
 /*  3610 */   413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
 /*  3620 */   413,  413,  520,  520,  413,  413,  413,  413,  520,  520,
 /*  3630 */   520,  520,  413,  520,  520,  520,  520,  352,  413,  352,
 /*  3640 */   520,  352,  352,  352,  520,  520,  520,  520,  520,  413,
 /*  3650 */   520,  413,  413,  520,  423,  423,  423,  423,  352,  423,
 /*  3660 */   423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
 /*  3670 */   423,  423,  423,  423,  423,  520,  520,  423,  423,  423,
 /*  3680 */   423,  520,  520,  520,  520,  423,  520,  520,  520,  520,
 /*  3690 */   520,  423,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  3700 */   520,  520,  423,  520,  423,  423,  520,   76,  432,   57,
 /*  3710 */    58,  353,   64,   62,   61,   60,   59,   63,   66,   65,
 /*  3720 */    67,   69,   68,   74,   73,   71,   72,   70,  520,  520,
 /*  3730 */    18,   78,  318,  432,  520,  520,  520,  520,  432,  520,
 /*  3740 */   520,  520,  520,  353,  432,  353,  520,  353,  353,  353,
 /*  3750 */   520,  520,  520,  520,  520,  432,  520,  432,  432,  520,
 /*  3760 */   433,  433,  433,  433,  353,  433,  433,  433,  433,  433,
 /*  3770 */   433,  433,  433,  433,  433,  433,  433,  433,   71,   72,
 /*  3780 */    70,  520,  520,   18,   78,  318,  433,  520,  520,  520,
 /*  3790 */   520,  433,  520,  520,  520,  520,  520,  433,  520,  520,
 /*  3800 */   520,  520,  520,  520,  520,  520,  520,  520,  433,  520,
 /*  3810 */   433,  433,  520,  434,  434,  434,  434,  354,  434,  434,
 /*  3820 */   434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
 /*  3830 */   434,   71,   72,   70,  520,  520,   18,   78,  318,  434,
 /*  3840 */   520,  520,  520,  520,  434,  520,  520,  520,  520,  354,
 /*  3850 */   434,  354,  520,  354,  354,  354,  520,  520,  520,  520,
 /*  3860 */   520,  434,  520,  434,  434,  520,  435,  435,  435,  435,
 /*  3870 */   354,  435,  435,  435,  435,  435,  435,  435,  435,  435,
 /*  3880 */   435,  435,  435,  435,  435,  435,  435,  520,  520,   18,
 /*  3890 */    78,  318,  435,  520,  520,  520,  520,  435,  520,  520,
 /*  3900 */   520,  520,  520,  435,  520,  520,  520,  520,  520,  520,
 /*  3910 */   520,  520,  520,  520,  435,  520,  435,  435,  520,  436,
 /*  3920 */   436,  436,  436,  361,  436,  436,  436,  436,  436,  436,
 /*  3930 */   436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
 /*  3940 */   520,  520,   18,   78,  318,  436,  520,  520,  520,  520,
 /*  3950 */   436,  520,  520,  520,  520,  361,  436,  361,  520,  361,
 /*  3960 */   361,  361,  520,  520,  520,  520,  520,  436,  520,  436,
 /*  3970 */   436,  520,  437,  437,  437,  437,  361,  437,  437,  437,
 /*  3980 */   437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
 /*  3990 */   437,  437,  437,  520,  520,   18,   78,  318,  437,  520,
 /*  4000 */   520,  520,  520,  437,  520,  520,  520,  520,  520,  437,
 /*  4010 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  4020 */   437,  520,  437,  437,  520,  438,  438,  438,  438,  360,
 /*  4030 */   438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
 /*  4040 */   438,   74,   73,   71,   72,   70,  520,  520,   18,   78,
 /*  4050 */   318,  438,  520,  520,  520,  520,  438,  520,  520,  520,
 /*  4060 */   520,  360,  438,  360,  520,  360,  360,  360,  520,  520,
 /*  4070 */   520,  520,  520,  438,  520,  438,  438,  520,  439,  439,
 /*  4080 */   439,  439,  360,  439,  439,  439,  439,  439,  439,  439,
 /*  4090 */   439,  439,  439,  439,   74,   73,   71,   72,   70,  520,
 /*  4100 */   520,   18,   78,  318,  439,  520,  520,  520,  520,  439,
 /*  4110 */   520,  520,  520,  520,  520,  439,  520,  520,  520,  520,
 /*  4120 */   520,  520,  520,  520,  520,  520,  439,  520,  439,  439,
 /*  4130 */   520,  440,  440,  440,  440,  368,  440,  440,  440,  440,
 /*  4140 */   440,  440,  440,  440,  440,   69,   68,   74,   73,   71,
 /*  4150 */    72,   70,  520,  520,   18,   78,  318,  440,  520,  520,
 /*  4160 */   520,  520,  440,  520,  520,  520,  520,  368,  440,  368,
 /*  4170 */   520,  368,  368,  368,  520,  520,  520,  520,  520,  440,
 /*  4180 */   520,  440,  440,  520,  441,  441,  441,  441,  368,  441,
 /*  4190 */   441,  441,  441,  441,  441,  441,   65,   67,   69,   68,
 /*  4200 */    74,   73,   71,   72,   70,  520,  520,   18,   78,  318,
 /*  4210 */   441,  520,  520,  520,  520,  441,  520,  520,  520,  520,
 /*  4220 */   520,  441,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  4230 */   520,  520,  441,  520,  441,  441,  520,  442,  442,  442,
 /*  4240 */   442,  344,  442,  442,  442,  442,  442,  442,  442,  442,
 /*  4250 */    67,   69,   68,   74,   73,   71,   72,   70,  520,  520,
 /*  4260 */    18,   78,  318,  442,  520,  520,  520,  520,  442,  520,
 /*  4270 */   520,  520,  520,   93,  442,  336,  520,  277,  137,   85,
 /*  4280 */   520,  520,  520,  520,  520,  442,  520,  442,  442,  520,
 /*  4290 */   452,  452,  452,  452,   84,   64,   62,   61,   60,   59,
 /*  4300 */    63,   66,   65,   67,   69,   68,   74,   73,   71,   72,
 /*  4310 */    70,  520,  520,   18,   78,  318,  452,  520,  520,  520,
 /*  4320 */   520,  452,  520,  520,  520,  520,  520,  452,  520,  520,
 /*  4330 */   520,  520,  520,  520,  520,  520,  520,  520,  452,  520,
 /*  4340 */   452,  452,  520,  453,  453,  453,   58,  345,   64,   62,
 /*  4350 */    61,   60,   59,   63,   66,   65,   67,   69,   68,   74,
 /*  4360 */    73,   71,   72,   70,  520,  520,   18,   78,  318,  453,
 /*  4370 */   520,  520,  520,  520,  453,  520,  520,  520,  520,  345,
 /*  4380 */   453,  345,  520,  345,  345,  345,  520,  520,  520,  520,
 /*  4390 */   520,  453,  520,  453,  453,  520,  427,  427,  427,  427,
 /*  4400 */   345,  427,  427,  427,  427,  427,  427,  427,  427,  427,
 /*  4410 */   427,  427,  427,  427,  427,  427,  427,  520,  520,  427,
 /*  4420 */   427,  427,  427,  520,  520,  520,  520,  427,  520,  520,
 /*  4430 */   520,  520,  520,  427,  520,  520,  520,  520,  520,  520,
 /*  4440 */   520,  520,  520,  520,  427,  520,  427,  427,  520,  428,
 /*  4450 */   428,  428,  428,  520,  428,  428,  428,  428,  428,  428,
 /*  4460 */   428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
 /*  4470 */   520,  520,  428,  428,  428,  428,  520,  520,  520,  520,
 /*  4480 */   428,  520,  520,  520,  520,  520,  428,  520,  520,  520,
 /*  4490 */   520,  520,  520,  520,  520,  520,  520,  428,  520,  428,
 /*  4500 */   428,  520,  429,  429,  429,  429,  520,  429,  429,  429,
 /*  4510 */   429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
 /*  4520 */   429,  429,  429,  520,  520,  429,  429,  429,  429,  520,
 /*  4530 */   520,  520,  520,  429,  520,  520,  520,  520,  520,  429,
 /*  4540 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  4550 */   429,  520,  429,  429,  520,  430,  430,  430,  430,  520,
 /*  4560 */   430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
 /*  4570 */   430,  430,  430,  430,  430,  430,  520,  520,  430,  430,
 /*  4580 */   430,  430,  520,  520,  520,  520,  430,  520,  520,  520,
 /*  4590 */   520,  520,  430,  520,  520,  520,  520,  520,  520,  520,
 /*  4600 */   520,  520,  520,  430,  520,  430,  430,  520,  431,  431,
 /*  4610 */   431,  431,  520,  431,  431,  431,  431,  431,  431,  431,
 /*  4620 */   431,  431,  431,  431,  431,  431,  431,  431,  431,  520,
 /*  4630 */   520,  431,  431,  431,  431,  520,  520,  520,  520,  431,
 /*  4640 */   520,  520,  520,  520,  520,  431,  520,  520,  520,  520,
 /*  4650 */   520,  520,  520,  520,  520,  520,  431,  520,  431,  431,
 /*  4660 */   520,  443,  443,  443,  443,  520,  443,  443,  443,  443,
 /*  4670 */   443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
 /*  4680 */   443,  443,  520,  520,   18,   78,  318,  443,  520,  520,
 /*  4690 */   520,  520,  443,  520,  520,  520,  520,  520,  443,  520,
 /*  4700 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  443,
 /*  4710 */   520,  443,  443,  520,  444,  444,  444,  444,  520,  444,
 /*  4720 */   444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
 /*  4730 */   444,  444,  444,  444,  444,  520,  520,   18,   78,  318,
 /*  4740 */   444,  520,  520,  520,  520,  444,  520,  520,  520,  520,
 /*  4750 */   520,  444,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  4760 */   520,  520,  444,  520,  444,  444,  520,  445,  445,  445,
 /*  4770 */   445,  520,  445,  445,  445,  445,  445,  445,  445,  445,
 /*  4780 */   445,  445,  445,  445,  445,  445,  445,  445,  520,  520,
 /*  4790 */    18,   78,  318,  445,  520,  520,  520,  520,  445,  520,
 /*  4800 */   520,  520,  520,  520,  445,  520,  520,  520,  520,  520,
 /*  4810 */   520,  520,  520,  520,  520,  445,  520,  445,  445,  520,
 /*  4820 */   454,  454,  454,  454,  520,   64,   62,   61,   60,   59,
 /*  4830 */    63,   66,   65,   67,   69,   68,   74,   73,   71,   72,
 /*  4840 */    70,  520,  520,   18,   78,  318,  454,  520,  520,  520,
 /*  4850 */   520,  454,  520,  520,  520,  520,  520,  454,  520,  520,
 /*  4860 */   520,  520,  520,  520,  520,  520,  520,  520,  454,  520,
 /*  4870 */   454,  454,  520,  515,  515,  515,  515,  520,  515,  515,
 /*  4880 */   515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
 /*  4890 */   515,  515,  515,  515,  520,  520,  515,  515,  515,  515,
 /*  4900 */   520,  520,  520,  520,  515,  520,  520,  520,  520,  520,
 /*  4910 */   515,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  4920 */   520,  515,  520,  515,  515,  520,  426,  426,  426,  426,
 /*  4930 */   520,  426,  426,  426,  426,  426,  426,  426,  426,  426,
 /*  4940 */   426,  426,  426,  426,  426,  426,  426,  520,  520,  426,
 /*  4950 */   426,  426,  426,  520,  520,  520,  520,  426,  520,  520,
 /*  4960 */   520,  520,  520,  426,  520,  520,  520,  520,  520,  520,
 /*  4970 */   520,  520,  520,  520,  426,  520,  426,  426,  520,  421,
 /*  4980 */   421,  421,  421,  520,  421,  421,  421,  421,  421,  421,
 /*  4990 */   421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
 /*  5000 */   520,  520,  421,  421,  421,  421,  520,  520,  520,  520,
 /*  5010 */   421,  520,  520,  520,  520,  520,  421,  520,  520,  520,
 /*  5020 */   520,  520,  520,  520,  520,  520,  520,  421,  520,  421,
 /*  5030 */   421,  520,  420,  420,  420,  420,  520,  420,  420,  420,
 /*  5040 */   420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
 /*  5050 */   420,  420,  420,  520,  520,  420,  420,  420,  420,  520,
 /*  5060 */   520,  520,  520,  420,  520,  520,  520,  520,  520,  420,
 /*  5070 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  5080 */   420,  520,  420,  420,  520,  516,  516,  516,  516,  520,
 /*  5090 */   516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
 /*  5100 */   516,  516,  516,  516,  516,  516,  520,  520,  516,  516,
 /*  5110 */   516,  516,  520,  520,  520,  520,  516,  520,  520,  482,
 /*  5120 */   520,  520,  516,  520,  520,  520,  520,  520,  520,  520,
 /*  5130 */   520,  482,  482,  516,  520,  516,  516,  482,  482,  482,
 /*  5140 */   520,  482,  482,  520,  520,  520,  520,  520,  482,  482,
 /*  5150 */   520,  482,  520,  520,  482,  520,  520,  520,  482,  482,
 /*  5160 */   482,  482,  482,  520,  482,  482,  482,  520,  520,  520,
 /*  5170 */   520,  520,  520,  520,  487,  520,  520,  482,  482,  482,
 /*  5180 */   482,  482,  482,  482,  482,  482,  487,  487,  520,  520,
 /*  5190 */   520,  520,  487,  487,  487,  520,  487,  487,  520,  520,
 /*  5200 */   520,  520,  520,  487,  487,  520,  487,  520,  520,  487,
 /*  5210 */   520,  520,  520,  487,  487,  487,  487,  487,  520,  487,
 /*  5220 */   487,  487,  520,  520,  520,  520,  520,  520,  520,  485,
 /*  5230 */   520,  520,  292,  487,  487,  487,  487,  487,  487,  487,
 /*  5240 */   487,  485,  485,  520,  520,  520,  520,  485,  485,  485,
 /*  5250 */   520,  485,  485,  520,  520,  520,  520,  520,  485,  485,
 /*  5260 */   520,  485,  520,  520,  485,  520,  520,  520,  485,  485,
 /*  5270 */   485,  485,  485,  520,  485,  485,  485,  520,  520,  520,
 /*  5280 */   520,  520,  520,  520,  491,  520,  520,  485,  485,  485,
 /*  5290 */   485,  485,  485,  485,  485,  485,  491,  491,  520,  520,
 /*  5300 */   520,  520,  491,  491,  491,  520,  491,  491,  520,  520,
 /*  5310 */   520,  520,  520,  491,  491,  520,  491,  520,  520,  491,
 /*  5320 */   520,  520,  520,  491,  491,  491,  491,  491,  520,  491,
 /*  5330 */   491,  491,  520,  520,  520,  520,  520,  520,  520,  507,
 /*  5340 */   520,  520,  491,  491,  491,  491,  491,  491,  491,  491,
 /*  5350 */   491,  507,  507,  520,  520,  520,  520,  507,  507,  507,
 /*  5360 */   520,  507,  507,  520,  520,  520,  520,  520,  507,  507,
 /*  5370 */   520,  507,  520,  520,  507,  520,  520,  520,  507,  507,
 /*  5380 */   507,  507,  507,  520,  507,  507,  507,  520,  520,  520,
 /*  5390 */   520,  520,  520,  520,  510,  520,  520,  507,  507,  507,
 /*  5400 */   507,  507,  507,  507,  507,  507,  510,  510,  520,  520,
 /*  5410 */   520,  520,  510,  510,  510,  520,  510,  510,  520,  520,
 /*  5420 */   520,  520,  520,  510,  510,  520,  510,  520,  520,  510,
 /*  5430 */   520,  520,  520,  510,  510,  510,  510,  510,  520,  510,
 /*  5440 */   510,  510,  520,  520,  520,  520,  520,  520,  520,  365,
 /*  5450 */   520,  520,  510,  510,  510,  510,  510,  510,  510,  510,
 /*  5460 */   510,  365,  365,  520,  520,  520,  520,  365,  365,  365,
 /*  5470 */   520,  365,  365,  520,  520,  520,  520,  520,  365,  365,
 /*  5480 */   520,  365,  520,  520,  365,  520,  520,  520,  365,  365,
 /*  5490 */   365,  365,  365,  520,  365,  365,  365,  520,  520,  520,
 /*  5500 */   520,  520,  520,  520,   52,  520,  520,  365,  365,  365,
 /*  5510 */   365,  365,  365,  365,  365,  365,   55,   54,  520,  520,
 /*  5520 */   520,  520,   53,   77,   31,  520,  123,   96,  520,  520,
 /*  5530 */   520,  520,  520,  137,   89,  520,  178,  520,  520,  177,
 /*  5540 */   520,  520,  520,  314,  313,  310,  307,  304,  520,   88,
 /*  5550 */    38,   37,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  5560 */   520,  520,  294,  290,  288,  285,  283,  282,   21,  301,
 /*  5570 */   280,  422,  422,  422,  422,  520,  422,  422,  422,  422,
 /*  5580 */   422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
 /*  5590 */   422,  422,  520,  520,  422,  317,  422,  422,  520,  520,
 /*  5600 */   520,  520,  422,  520,  520,  520,  520,  520,  422,  520,
 /*  5610 */   520,  520,  520,   76,  405,   57,   58,  520,   64,   62,
 /*  5620 */    61,   60,   59,   63,   66,   65,   67,   69,   68,   74,
 /*  5630 */    73,   71,   72,   70,  520,  520,   18,   78,  318,  405,
 /*  5640 */   520,  520,  520,  520,  405,  520,  520,  520,  520,  520,
 /*  5650 */   405,  520,  520,  520,  520,   76,  406,   57,   58,  520,
 /*  5660 */    64,   62,   61,   60,   59,   63,   66,   65,   67,   69,
 /*  5670 */    68,   74,   73,   71,   72,   70,  520,  520,   18,   78,
 /*  5680 */   318,  406,  520,  520,  520,  520,  406,  520,  520,  520,
 /*  5690 */   520,  422,  406,  422,  422,  520,  422,  422,  422,  422,
 /*  5700 */   422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
 /*  5710 */   422,  422,  520,  520,  422,  324,  422,  118,  520,   79,
 /*  5720 */   411,  411,  411,  411,  520,  411,  411,  411,  411,  411,
 /*  5730 */   411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
 /*  5740 */   411,  422,  422,   19,  411,  411,  520,   76,  465,   57,
 /*  5750 */    58,  411,   64,   62,   61,   60,   59,   63,   66,   65,
 /*  5760 */    67,   69,   68,   74,   73,   71,   72,   70,  520,  520,
 /*  5770 */    18,   78,  318,  465,  520,  520,  520,  520,  465,  520,
 /*  5780 */   520,  520,  520,   76,  471,   57,   58,  520,   64,   62,
 /*  5790 */    61,   60,   59,   63,   66,   65,   67,   69,   68,   74,
 /*  5800 */    73,   71,   72,   70,  520,  520,   18,   78,  318,  471,
 /*  5810 */   520,  520,  520,  520,  471,  520,  520,  520,  520,   76,
 /*  5820 */   472,   57,   58,  520,   64,   62,   61,   60,   59,   63,
 /*  5830 */    66,   65,   67,   69,   68,   74,   73,   71,   72,   70,
 /*  5840 */   520,  520,   18,   78,  318,  472,  520,  520,  520,  520,
 /*  5850 */   472,  520,  520,  520,  520,   76,  473,   57,   58,  520,
 /*  5860 */    64,   62,   61,   60,   59,   63,   66,   65,   67,   69,
 /*  5870 */    68,   74,   73,   71,   72,   70,  520,  520,   18,   78,
 /*  5880 */   318,  473,  520,  520,  520,  520,  473,  520,  520,  520,
 /*  5890 */   520,   76,  474,   57,   58,  520,   64,   62,   61,   60,
 /*  5900 */    59,   63,   66,   65,   67,   69,   68,   74,   73,   71,
 /*  5910 */    72,   70,  520,  520,   18,   78,  318,  474,  520,  520,
 /*  5920 */   520,  520,  474,  520,  520,  520,  520,   76,  475,   57,
 /*  5930 */    58,  520,   64,   62,   61,   60,   59,   63,   66,   65,
 /*  5940 */    67,   69,   68,   74,   73,   71,   72,   70,  520,  520,
 /*  5950 */    18,   78,  318,  475,  520,  520,  520,  520,  475,  520,
 /*  5960 */   520,  520,  520,   76,  476,   57,   58,  520,   64,   62,
 /*  5970 */    61,   60,   59,   63,   66,   65,   67,   69,   68,   74,
 /*  5980 */    73,   71,   72,   70,  520,  520,   18,   78,  318,  476,
 /*  5990 */   520,  520,  520,  520,  476,  520,  520,  520,  520,   76,
 /*  6000 */   477,   57,   58,  520,   64,   62,   61,   60,   59,   63,
 /*  6010 */    66,   65,   67,   69,   68,   74,   73,   71,   72,   70,
 /*  6020 */   520,  520,   18,   78,  318,  477,  520,  520,  520,  520,
 /*  6030 */   477,  520,  520,  520,  520,   76,  478,   57,   58,  520,
 /*  6040 */    64,   62,   61,   60,   59,   63,   66,   65,   67,   69,
 /*  6050 */    68,   74,   73,   71,   72,   70,  520,  520,   18,   78,
 /*  6060 */   318,  478,  520,  520,  520,  520,  478,  520,  520,  520,
 /*  6070 */   520,   76,  479,   57,   58,  520,   64,   62,   61,   60,
 /*  6080 */    59,   63,   66,   65,   67,   69,   68,   74,   73,   71,
 /*  6090 */    72,   70,  520,  520,   18,   78,  318,  479,  520,  520,
 /*  6100 */   520,  520,  479,  520,  520,  520,  520,   76,  480,   57,
 /*  6110 */    58,  520,   64,   62,   61,   60,   59,   63,   66,   65,
 /*  6120 */    67,   69,   68,   74,   73,   71,   72,   70,  520,  520,
 /*  6130 */    18,   78,  318,  480,  520,  520,  520,  520,  480,  520,
 /*  6140 */   520,  520,  520,   76,  467,   57,   58,  520,   64,   62,
 /*  6150 */    61,   60,   59,   63,   66,   65,   67,   69,   68,   74,
 /*  6160 */    73,   71,   72,   70,  520,  520,   18,   78,  318,  467,
 /*  6170 */   520,  520,  520,  520,  467,  520,  520,  520,  520,   76,
 /*  6180 */   469,   57,   58,  520,   64,   62,   61,   60,   59,   63,
 /*  6190 */    66,   65,   67,   69,   68,   74,   73,   71,   72,   70,
 /*  6200 */   520,  520,   18,   78,  318,  469,  520,  520,  520,  520,
 /*  6210 */   469,  520,  520,  520,  520,   76,  414,   57,   58,  520,
 /*  6220 */    64,   62,   61,   60,   59,   63,   66,   65,   67,   69,
 /*  6230 */    68,   74,   73,   71,   72,   70,  520,  520,   18,   78,
 /*  6240 */   318,  520,  520,  520,  520,  520,  414,  520,  520,  520,
 /*  6250 */   520,   76,  416,   57,   58,  520,   64,   62,   61,   60,
 /*  6260 */    59,   63,   66,   65,   67,   69,   68,   74,   73,   71,
 /*  6270 */    72,   70,  520,  520,   18,   78,  318,  520,  520,  520,
 /*  6280 */   520,   76,  416,   57,   58,  520,   64,   62,   61,   60,
 /*  6290 */    59,   63,   66,   65,   67,   69,   68,   74,   73,   71,
 /*  6300 */    72,   70,  520,  520,   18,   51,  295,  520,  520,  520,
 /*  6310 */    76,  520,   57,   58,  520,   64,   62,   61,   60,   59,
 /*  6320 */    63,   66,   65,   67,   69,   68,   74,   73,   71,   72,
 /*  6330 */    70,  240,  239,   18,   78,  318,  520,  520,  520,  520,
 /*  6340 */   520,  520,  520,  520,  520,  520,  520,  173,  520,  520,
 /*  6350 */   520,  520,   76,  520,   57,   58,  520,   64,   62,   61,
 /*  6360 */    60,   59,   63,   66,   65,   67,   69,   68,   74,   73,
 /*  6370 */    71,   72,   70,  520,  520,   18,   78,  318,  520,  520,
 /*  6380 */   520,  520,   76,  172,   57,   58,  520,   64,   62,   61,
 /*  6390 */    60,   59,   63,   66,   65,   67,   69,   68,   74,   73,
 /*  6400 */    71,   72,   70,  520,  520,   18,   78,  318,  520,  520,
 /*  6410 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  6420 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  6430 */    75,  520,  520,  520,  520,   76,  520,   57,   58,  520,
 /*  6440 */    64,   62,   61,   60,   59,   63,   66,   65,   67,   69,
 /*  6450 */    68,   74,   73,   71,   72,   70,  520,  520,   18,   78,
 /*  6460 */   318,  520,  520,  520,  520,   76,  158,   57,   58,  520,
 /*  6470 */    64,   62,   61,   60,   59,   63,   66,   65,   67,   69,
 /*  6480 */    68,   74,   73,   71,   72,   70,  520,  520,   18,   78,
 /*  6490 */   318,  520,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  6500 */   520,  520,   94,  520,  520,  520,  520,   76,  520,   57,
 /*  6510 */    58,  520,   64,   62,   61,   60,   59,   63,   66,   65,
 /*  6520 */    67,   69,   68,   74,   73,   71,   72,   70,  520,  520,
 /*  6530 */    18,   78,  318,  520,  520,  520,  520,   76,  144,   57,
 /*  6540 */    58,  520,   64,   62,   61,   60,   59,   63,   66,   65,
 /*  6550 */    67,   69,   68,   74,   73,   71,   72,   70,  520,  520,
 /*  6560 */    18,   78,  318,  520,  520,  520,  520,   76,  142,   57,
 /*  6570 */    58,  520,   64,   62,   61,   60,   59,   63,   66,   65,
 /*  6580 */    67,   69,   68,   74,   73,   71,   72,   70,  520,  520,
 /*  6590 */    18,   78,  318,  520,  520,  520,  520,   76,  141,   57,
 /*  6600 */    58,  520,   64,   62,   61,   60,   59,   63,   66,   65,
 /*  6610 */    67,   69,   68,   74,   73,   71,   72,   70,  520,  520,
 /*  6620 */    18,   78,  318,  213,  520,   76,  520,   57,   58,  520,
 /*  6630 */    64,   62,   61,   60,   59,   63,   66,   65,   67,   69,
 /*  6640 */    68,   74,   73,   71,   72,   70,  493,  520,   18,   51,
 /*  6650 */   295,  520,  520,  520,  520,  520,  520,  520,  493,  493,
 /*  6660 */   520,  520,  520,  520,  493,  493,  493,  520,  493,  493,
 /*  6670 */   520,  520,  520,  520,  520,  520,  493,  520,  493,  520,
 /*  6680 */   520,  493,  520,  520,  520,  493,  493,  493,  493,  493,
 /*  6690 */    52,  493,  493,  493,  520,  520,  520,  520,  520,  520,
 /*  6700 */   520,  520,   55,   54,  520,  520,  520,  520,   53,   77,
 /*  6710 */    31,  493,  500,   96,  520,  520,  520,  520,  520,  520,
 /*  6720 */    89,  520,  178,  520,  520,  177,  520,  520,  520,  314,
 /*  6730 */   313,  310,  307,  304,   52,   88,   38,   37,  520,  520,
 /*  6740 */   520,  520,  520,  520,  520,  520,   55,   54,  520,  520,
 /*  6750 */   520,  520,   53,   77,   31,  301,  520,   96,  520,  520,
 /*  6760 */   520,  520,  520,  520,   89,  520,  178,  520,  520,  177,
 /*  6770 */   520,  520,  520,  314,  313,  310,  307,  304,  506,   88,
 /*  6780 */    38,   37,  520,  520,  520,  520,  520,  520,  520,  520,
 /*  6790 */   506,  506,  520,  520,  520,  520,  506,  506,  506,  301,
 /*  6800 */   520,  506,  520,  520,  520,  506,  520,  520,  520,  520,
 /*  6810 */   506,  520,  520,  506,   52,  520,  520,  506,  506,  506,
 /*  6820 */   506,  506,  520,  520,  506,  506,   55,   54,  520,  520,
 /*  6830 */   520,  520,   53,   77,   31,  520,  520,   96,  520,  520,
 /*  6840 */   520,  503,  520,  506,  520,  520,  178,  520,  520,  177,
 /*  6850 */    52,  520,  520,  314,  313,  310,  307,  304,  520,  520,
 /*  6860 */    38,   37,   55,   54,  520,  520,  520,  520,   53,   77,
 /*  6870 */    31,  520,  520,  197,  520,  520,  520,  418,  520,  301,
 /*  6880 */   520,  520,  178,  520,  520,  177,   52,  270,  520,  314,
 /*  6890 */   313,  310,  307,  304,  520,  520,  520,  520,   55,   54,
 /*  6900 */   520,  520,  520,  520,   53,   77,   31,  520,  520,   96,
 /*  6910 */   520,  520,  520,  520,  520,  301,  520,  520,  178,  520,
 /*  6920 */   520,  177,  520,  520,   52,  314,  313,  310,  307,  304,
 /*  6930 */   520,  520,   38,   37,  520,  520,   55,   54,  520,  520,
 /*  6940 */   520,  520,   53,   77,   31,  520,  520,  175,  520,  520,
 /*  6950 */   520,  301,  520,  520,  520,  520,  178,  424,  520,  177,
 /*  6960 */    52,  520,  520,  314,  313,  310,  307,  304,  520,  520,
 /*  6970 */   520,  520,   55,   54,  520,  520,  520,  520,   53,   77,
 /*  6980 */    31,  520,  520,  197,  520,  520,  520,  520,  520,  301,
 /*  6990 */   520,  520,  178,  520,  520,  177,  520,  270,   52,  314,
 /*  7000 */   313,  310,  307,  304,  520,  520,  520,  520,  520,  520,
 /*  7010 */    55,   54,  520,  520,  520,  520,   53,   77,   31,  520,
 /*  7020 */   407,  175,  520,  520,  520,  301,  520,  520,  520,  520,
 /*  7030 */   178,  520,  520,  177,  505,  520,  520,  314,  313,  310,
 /*  7040 */   307,  304,  520,  520,  520,  520,  505,  505,  520,  520,
 /*  7050 */   520,  520,  505,  505,  505,  520,  520,  505,  520,  520,
 /*  7060 */   520,  520,  520,  301,  520,  520,  505,  520,  520,  505,
 /*  7070 */   520,  520,   52,  505,  505,  505,  505,  505,  520,  520,
 /*  7080 */   520,  520,  520,  520,   55,   54,  520,  520,  520,  520,
 /*  7090 */    53,   77,   31,  520,  520,  175,  520,  520,  520,  505,
 /*  7100 */   520,  520,  520,  520,  178,  520,  520,  177,   52,  520,
 /*  7110 */   520,  314,  313,  310,  307,  304,  520,  520,  520,  520,
 /*  7120 */    55,   54,  520,  520,  520,  520,   53,   77,   31,  520,
 /*  7130 */   520,   96,  520,  520,  520,  520,  520,  301,  259,  520,
 /*  7140 */   178,  520,  520,  177,  520,  520,  520,  314,  313,  310,
 /*  7150 */   307,  304,  520,  520,  520,  520,  258,  257,  256,  176,
 /*  7160 */   520,  520,  520,  520,  520,  520,  520,  520,  520,  199,
 /*  7170 */   520,  520,  520,  301,  215,  261,  520,  520,  520,  520,
 /*  7180 */   520,  520,  520,  520,  520,  255,  287,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     3,    4,    5,    6,    7,   30,    9,   10,   11,   12,
 /*    10 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*    20 */    23,   24,   95,   96,   27,   28,   29,   79,   80,   81,
 /*    30 */    82,   83,   84,   85,   86,   87,   30,   89,   34,  105,
 /*    40 */    92,   93,   38,   39,    3,   30,    5,   99,  114,  115,
 /*    50 */   116,   54,   55,   56,   57,   58,   59,   60,   61,   62,
 /*    60 */    63,   64,   65,    3,    4,    5,    6,    7,   30,    9,
 /*    70 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*    80 */    20,   21,   22,   23,   24,    5,   31,   27,   28,   29,
 /*    90 */    29,   30,   29,   30,   33,   31,   33,   56,   57,   58,
 /*   100 */    59,   60,   61,   62,   63,   64,   65,   29,   30,   30,
 /*   110 */    30,   33,    5,    5,   54,   55,   56,   57,   58,   59,
 /*   120 */    60,   61,   62,   63,   64,   65,    3,    4,    5,    6,
 /*   130 */     7,    5,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   140 */    17,   18,   19,   20,   21,   22,   23,   24,   41,   41,
 /*   150 */    27,   28,   29,  105,  105,   34,   30,    5,  105,   38,
 /*   160 */    39,   35,  105,  115,  115,  117,  118,   41,  115,  120,
 /*   170 */   117,  118,  115,   31,  117,  118,    5,   54,   55,   56,
 /*   180 */    57,   58,   59,   60,   61,   62,   63,   64,   65,    0,
 /*   190 */   105,    2,    5,   41,  105,    5,    3,    8,    5,    5,
 /*   200 */   115,   30,  117,  118,  115,    5,  117,  118,   90,   20,
 /*   210 */    21,    3,   94,    5,   31,   26,   27,   28,   35,   30,
 /*   220 */    31,   32,   35,   34,  105,   36,   37,   38,   39,   40,
 /*   230 */    27,   41,   43,  114,  115,   35,   47,   48,   49,   50,
 /*   240 */    51,  105,   53,   54,   55,    0,   52,    2,    5,   35,
 /*   250 */   114,  115,    3,    8,    5,   66,   67,   68,   69,   70,
 /*   260 */    71,   72,   73,   74,   34,   20,   21,   31,   38,   39,
 /*   270 */    30,   26,   27,   28,    5,   30,   31,   32,   35,   34,
 /*   280 */   105,   36,   37,   38,   39,   40,   30,   90,   43,  114,
 /*   290 */   115,   94,   47,   48,   49,   50,   51,  105,   53,   54,
 /*   300 */    55,    0,   30,    2,   35,   30,  114,  115,    3,    8,
 /*   310 */     5,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*   320 */    34,   20,   21,   30,   38,   39,   30,   26,   27,   28,
 /*   330 */     5,   30,   31,   32,    5,   34,    5,   36,   37,   38,
 /*   340 */    39,   40,   77,   78,   43,  125,  126,  127,   47,   48,
 /*   350 */    49,   50,   51,  105,   53,   54,   55,    0,   30,    2,
 /*   360 */    35,   30,  114,  115,   35,    8,   30,   66,   67,   68,
 /*   370 */    69,   70,   71,   72,   73,   74,   34,   20,   21,   28,
 /*   380 */    38,   39,  105,   26,   27,   28,    5,   30,   31,   32,
 /*   390 */     5,   34,  115,   36,   37,   38,   39,   40,   40,   30,
 /*   400 */    43,   30,   41,   41,   47,   48,   49,   50,   51,  105,
 /*   410 */    53,   54,   55,    0,   31,    2,   35,    5,  114,  115,
 /*   420 */    35,    8,   28,   66,   67,   68,   69,   70,   71,   72,
 /*   430 */    73,   74,   34,   20,   21,   40,   38,   39,   41,   26,
 /*   440 */    27,   28,   30,   30,   31,   32,   27,   34,    5,   36,
 /*   450 */    37,   38,   39,   40,   27,   45,   43,   35,   27,   45,
 /*   460 */    47,   48,   49,   50,   51,  105,   53,   54,   55,    0,
 /*   470 */    35,    2,   27,   30,  114,  115,   35,    8,   45,   66,
 /*   480 */    67,   68,   69,   70,   71,   72,   73,   74,    5,   20,
 /*   490 */    21,   27,  105,   45,  105,   26,   27,   28,   35,   30,
 /*   500 */    31,   32,  115,   34,  115,   36,   37,   38,   39,   40,
 /*   510 */    35,  105,   43,   30,   27,   41,   47,   48,   49,   50,
 /*   520 */    51,  115,   53,   54,   55,    0,   35,    2,   35,    5,
 /*   530 */    35,   31,   27,    8,   27,   66,   67,   68,   69,   70,
 /*   540 */    71,   72,   73,   74,    5,   20,   21,   27,   27,   27,
 /*   550 */    27,   26,   27,   28,   30,   30,   31,   32,   27,   34,
 /*   560 */     5,   36,   37,   38,   39,   40,   30,  105,   43,   30,
 /*   570 */    35,   27,   47,   48,   49,   50,   51,  115,   53,   54,
 /*   580 */    55,    0,   31,    2,   30,   30,   30,   27,   30,    8,
 /*   590 */    31,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*   600 */     5,   20,   21,   35,   37,   30,  105,   26,   27,   28,
 /*   610 */    31,   30,   31,   32,   27,   34,  115,   36,   37,   38,
 /*   620 */    39,   40,   30,  105,   43,   30,   35,   31,   47,   48,
 /*   630 */    49,   50,   51,  115,   53,   54,   55,    0,   88,    2,
 /*   640 */   100,    5,   39,  100,   40,    8,  113,   66,   67,   68,
 /*   650 */    69,   70,   71,   72,   73,   74,    5,   20,   21,   94,
 /*   660 */    31,  119,  105,   26,   27,   28,   30,   30,   31,   32,
 /*   670 */    94,   34,  115,   36,   37,   38,   39,   40,   94,  105,
 /*   680 */    43,   30,   94,   94,   47,   48,   49,   50,   51,  115,
 /*   690 */    53,   54,   55,    0,   94,    2,  140,  140,  140,  140,
 /*   700 */   140,    8,  105,   66,   67,   68,   69,   70,   71,   72,
 /*   710 */    73,   74,  115,   20,   21,  140,  140,  140,  105,   26,
 /*   720 */    27,   28,  140,   30,   31,   32,  140,   34,  115,   36,
 /*   730 */    37,   38,   39,   40,  140,  105,   43,  140,  140,  140,
 /*   740 */    47,   48,   49,   50,   51,  115,   53,   54,   55,    0,
 /*   750 */   140,    2,  140,  140,  140,  140,  140,    8,  105,   66,
 /*   760 */    67,   68,   69,   70,   71,   72,   73,   74,  115,   20,
 /*   770 */    21,  140,  105,  140,  105,   26,   27,   28,  140,   30,
 /*   780 */    31,   32,  115,   34,  115,   36,   37,   38,   39,   40,
 /*   790 */   140,  105,   43,  140,  140,  140,   47,   48,   49,   50,
 /*   800 */    51,  115,   53,   54,   55,    0,  140,    2,  140,  140,
 /*   810 */   140,  140,  140,    8,  105,   66,   67,   68,   69,   70,
 /*   820 */    71,   72,   73,   74,  115,   20,   21,  140,  140,  140,
 /*   830 */   105,   26,   27,   28,  140,   30,   31,   32,  140,   34,
 /*   840 */   115,   36,   37,   38,   39,   40,  140,  105,   43,  140,
 /*   850 */   140,  140,   47,   48,   49,   50,   51,  115,   53,   54,
 /*   860 */    55,    0,  140,    2,  140,  140,  140,  140,  140,    8,
 /*   870 */   105,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*   880 */   115,   20,   21,  140,  140,  140,  105,   26,   27,   28,
 /*   890 */   140,   30,   31,   32,  140,   34,  115,   36,   37,   38,
 /*   900 */    39,   40,  140,  105,   43,  140,  140,  140,   47,   48,
 /*   910 */    49,   50,   51,  115,   53,   54,   55,    0,  140,    2,
 /*   920 */   140,  140,  140,  140,  140,    8,  105,   66,   67,   68,
 /*   930 */    69,   70,   71,   72,   73,   74,  115,   20,   21,  140,
 /*   940 */   140,  140,  105,   26,   27,   28,  140,   30,   31,   32,
 /*   950 */   140,   34,  115,   36,   37,   38,   39,   40,  140,  105,
 /*   960 */    43,  140,  140,  140,   47,   48,   49,   50,   51,  115,
 /*   970 */    53,   54,   55,    0,  140,    2,  140,  140,  140,  140,
 /*   980 */   140,    8,  105,   66,   67,   68,   69,   70,   71,   72,
 /*   990 */    73,   74,  115,   20,   21,  140,  140,  140,  105,   26,
 /*  1000 */    27,   28,  140,   30,   31,   32,  140,   34,  115,   36,
 /*  1010 */    37,   38,   39,   40,  140,  105,   43,  140,  140,  140,
 /*  1020 */    47,   48,   49,   50,   51,  115,   53,   54,   55,    0,
 /*  1030 */   140,    2,  140,  140,  140,  140,  140,    8,  105,   66,
 /*  1040 */    67,   68,   69,   70,   71,   72,   73,   74,  115,   20,
 /*  1050 */    21,  140,  140,  140,  105,   26,   27,   28,  140,   30,
 /*  1060 */    31,   32,  140,   34,  115,   36,   37,   38,   39,   40,
 /*  1070 */   140,  105,   43,  140,  140,  140,   47,   48,   49,   50,
 /*  1080 */    51,  115,   53,   54,   55,    0,  140,    2,  140,  140,
 /*  1090 */   140,  140,  140,    8,  105,   66,   67,   68,   69,   70,
 /*  1100 */    71,   72,   73,   74,  115,   20,   21,  140,  140,  140,
 /*  1110 */   105,   26,   27,   28,  140,   30,   31,   32,  140,   34,
 /*  1120 */   115,   36,   37,   38,   39,   40,  140,  105,   43,  140,
 /*  1130 */   140,  140,   47,   48,   49,   50,   51,  115,   53,   54,
 /*  1140 */    55,    0,  140,    2,  140,  140,  140,  140,  140,    8,
 /*  1150 */   105,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  1160 */   115,   20,   21,  140,  140,  140,  105,   26,   27,   28,
 /*  1170 */   140,   30,   31,   32,  140,   34,  115,   36,   37,   38,
 /*  1180 */    39,   40,  140,  105,   43,  140,  140,  140,   47,   48,
 /*  1190 */    49,   50,   51,  115,   53,   54,   55,    0,  140,    2,
 /*  1200 */   140,  140,  140,  140,  140,    8,  105,   66,   67,   68,
 /*  1210 */    69,   70,   71,   72,   73,   74,  115,   20,   21,  140,
 /*  1220 */   140,  140,  105,   26,   27,   28,  140,   30,   31,   32,
 /*  1230 */   140,   34,  115,   36,   37,   38,   39,   40,  140,  105,
 /*  1240 */    43,  140,  140,  140,   47,   48,   49,   50,   51,  115,
 /*  1250 */    53,   54,   55,    0,  140,    2,  140,  140,  140,  140,
 /*  1260 */   140,    8,  105,   66,   67,   68,   69,   70,   71,   72,
 /*  1270 */    73,   74,  115,   20,   21,  140,  140,  140,  105,   26,
 /*  1280 */    27,   28,  140,   30,   31,   32,  140,   34,  115,   36,
 /*  1290 */    37,   38,   39,   40,  140,  105,   43,  140,  140,  140,
 /*  1300 */    47,   48,   49,   50,   51,  115,   53,   54,   55,    0,
 /*  1310 */   140,    2,  140,  140,  140,  140,  140,    8,  105,   66,
 /*  1320 */    67,   68,   69,   70,   71,   72,   73,   74,  115,   20,
 /*  1330 */    21,  140,  140,  140,  105,   26,   27,   28,  140,   30,
 /*  1340 */    31,   32,  140,   34,  115,   36,   37,   38,   39,   40,
 /*  1350 */   140,  105,   43,  140,  140,  140,   47,   48,   49,   50,
 /*  1360 */    51,  115,   53,   54,   55,    0,  140,    2,  140,  140,
 /*  1370 */   140,  140,  140,    8,  105,   66,   67,   68,   69,   70,
 /*  1380 */    71,   72,   73,   74,  115,   20,   21,  140,  140,  140,
 /*  1390 */   140,   26,   27,   28,  140,   30,   31,   32,    5,   34,
 /*  1400 */   140,   36,   37,   38,   39,   40,  140,  140,   43,  140,
 /*  1410 */   140,  140,   47,   48,   49,   50,   51,  105,   53,   54,
 /*  1420 */    55,  140,  140,   30,  140,  140,  140,  115,   35,  117,
 /*  1430 */   140,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  1440 */     4,    5,    6,    7,    0,    9,   10,   11,   12,   13,
 /*  1450 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  1460 */    24,  140,    5,   27,   28,   29,   30,  140,  140,  140,
 /*  1470 */   140,   35,  140,  140,  140,  140,   32,   41,   34,  140,
 /*  1480 */    36,   37,   38,  140,  140,  140,  140,   30,   52,  140,
 /*  1490 */    54,   55,   35,    4,    5,    6,    7,   53,    9,   10,
 /*  1500 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  1510 */    21,   22,   23,   24,  140,    5,   27,   28,   29,   30,
 /*  1520 */   140,  140,  140,  140,   35,  140,  140,  140,  140,  140,
 /*  1530 */    41,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  1540 */    30,   52,  140,   54,   55,   35,    4,    5,    6,    7,
 /*  1550 */     0,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  1560 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  1570 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  1580 */   140,  140,   32,   41,   34,  140,   36,   37,   38,  140,
 /*  1590 */   140,  140,  140,  140,   52,  140,   54,   55,  140,    4,
 /*  1600 */     5,    6,    7,   53,    9,   10,   11,   12,   13,   14,
 /*  1610 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  1620 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  1630 */    35,  140,  140,  140,  140,  140,   41,  140,  140,  140,
 /*  1640 */   140,  140,  140,  140,  140,  140,  140,   52,  140,   54,
 /*  1650 */    55,  140,    4,    5,    6,    7,    0,    9,   10,   11,
 /*  1660 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  1670 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  1680 */   140,  140,  140,   35,  140,  140,  140,  140,   32,   41,
 /*  1690 */    34,  140,   36,   37,   38,  140,  140,  140,  140,  140,
 /*  1700 */    52,  140,   54,   55,  140,    4,    5,    6,    7,   53,
 /*  1710 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  1720 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  1730 */    29,   30,    3,    3,    5,    5,   35,    0,  140,    2,
 /*  1740 */   140,  140,   41,  140,  140,    8,  140,  140,  140,  140,
 /*  1750 */   140,  140,  140,   52,  140,   54,   55,   20,   21,   30,
 /*  1760 */    30,  140,  140,   26,   27,   28,  140,   30,   31,   32,
 /*  1770 */   140,   34,  140,   36,   37,   38,   39,   40,  140,  140,
 /*  1780 */    43,  140,  140,  140,   47,   48,   49,   50,   51,  140,
 /*  1790 */    53,   54,   55,    0,  140,    2,  140,  140,  140,  140,
 /*  1800 */   140,    8,  140,   66,   67,   68,   69,   70,   71,   72,
 /*  1810 */    73,   74,  140,   20,   21,  140,  140,  140,  140,   26,
 /*  1820 */    27,   28,  140,   30,   31,   32,  140,   34,  140,   36,
 /*  1830 */    37,   38,   39,   40,  140,  140,   43,  140,  140,  140,
 /*  1840 */    47,   48,   49,   50,   51,  140,   53,   54,   55,    0,
 /*  1850 */   140,    2,  140,  140,  140,  140,  140,    8,  140,   66,
 /*  1860 */    67,   68,   69,   70,   71,   72,   73,   74,  140,   20,
 /*  1870 */    21,  140,  140,  140,  140,   26,   27,   28,  140,   30,
 /*  1880 */    31,   32,  140,   34,  140,   36,   37,   38,   39,   40,
 /*  1890 */   140,  140,   43,  140,  140,  140,   47,   48,   49,   50,
 /*  1900 */    51,  140,   53,   54,   55,    0,  140,    2,  140,  140,
 /*  1910 */   140,  140,  140,    8,  140,   66,   67,   68,   69,   70,
 /*  1920 */    71,   72,   73,   74,  140,   20,   21,  140,  140,  140,
 /*  1930 */   140,   26,   27,   28,  140,   30,   31,   32,  140,   34,
 /*  1940 */   140,   36,   37,   38,   39,   40,  140,  140,   43,  140,
 /*  1950 */   140,  140,   47,   48,   49,   50,   51,  140,   53,   54,
 /*  1960 */    55,    0,  140,    2,  140,  140,  140,  140,  140,    8,
 /*  1970 */   140,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  1980 */   140,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  1990 */   140,   30,   31,   32,  140,   34,  140,   36,   37,   38,
 /*  2000 */    39,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  2010 */    49,   50,   51,  140,   53,   54,   55,    0,  140,    2,
 /*  2020 */   140,  140,  140,  140,  140,    8,  140,   66,   67,   68,
 /*  2030 */    69,   70,   71,   72,   73,   74,  140,   20,   21,  140,
 /*  2040 */   140,  140,  140,   26,   27,   28,  140,   30,   31,   32,
 /*  2050 */   140,   34,  140,   36,   37,   38,   39,   40,  140,  140,
 /*  2060 */    43,  140,  140,  140,   47,   48,   49,   50,   51,  140,
 /*  2070 */    53,   54,   55,    0,  140,    2,  140,  140,  140,  140,
 /*  2080 */   140,    8,  140,   66,   67,   68,   69,   70,   71,   72,
 /*  2090 */    73,   74,  140,   20,   21,  140,  140,  140,  140,   26,
 /*  2100 */    27,   28,  140,   30,   31,   32,  140,   34,  140,   36,
 /*  2110 */    37,   38,   39,   40,  140,  140,   43,  140,  140,  140,
 /*  2120 */    47,   48,   49,   50,   51,  140,   53,   54,   55,    0,
 /*  2130 */   140,    2,  140,  140,  140,  140,  140,    8,  140,   66,
 /*  2140 */    67,   68,   69,   70,   71,   72,   73,   74,  140,   20,
 /*  2150 */    21,  140,  140,  140,  140,   26,   27,   28,  140,   30,
 /*  2160 */    31,   32,  140,   34,  140,   36,   37,   38,   39,   40,
 /*  2170 */   140,  140,   43,  140,  140,  140,   47,   48,   49,   50,
 /*  2180 */    51,  140,   53,   54,   55,    0,  140,    2,  140,  140,
 /*  2190 */   140,  140,  140,    8,  140,   66,   67,   68,   69,   70,
 /*  2200 */    71,   72,   73,   74,  140,   20,   21,  140,  140,  140,
 /*  2210 */   140,   26,   27,   28,  140,   30,   31,   32,  140,   34,
 /*  2220 */   140,   36,   37,   38,   39,   40,  140,  140,   43,   84,
 /*  2230 */   140,  140,   47,   48,   49,   50,   51,  140,   53,   54,
 /*  2240 */    55,  140,  140,  140,  140,  140,  140,  102,  103,  104,
 /*  2250 */   105,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  2260 */   115,   75,  140,  140,  140,  120,  121,  140,  140,  140,
 /*  2270 */    84,  140,  140,   87,  140,  140,  131,   91,  140,  140,
 /*  2280 */   140,  140,  140,   97,   98,   99,  140,  140,  102,  103,
 /*  2290 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  140,
 /*  2300 */   140,  115,  104,  105,  140,  140,  120,  121,  122,  123,
 /*  2310 */   124,  140,  140,  115,  128,  129,  130,  140,  120,  121,
 /*  2320 */   140,  135,  136,  137,  138,  139,  140,   75,  140,  140,
 /*  2330 */   140,  133,  134,  140,  140,  140,   84,  140,  140,   87,
 /*  2340 */   140,  140,  140,   91,  140,  140,  140,  140,  140,   97,
 /*  2350 */    98,   99,  140,  140,  102,  103,  104,  105,  106,  107,
 /*  2360 */   108,  109,  110,  111,  112,  140,  140,  115,  140,  140,
 /*  2370 */   140,  140,  120,  121,  122,  123,  124,    3,  140,    5,
 /*  2380 */   128,  129,  130,   75,  140,  140,  140,  135,  136,  137,
 /*  2390 */   138,  139,   84,  140,  140,   87,  140,  140,  140,   91,
 /*  2400 */   140,  140,  140,  140,   30,   97,   98,   99,  140,   35,
 /*  2410 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2420 */   112,  140,  140,  115,  104,  105,   52,  140,  120,  121,
 /*  2430 */   122,  123,  124,  140,  140,  115,  128,  129,  130,   75,
 /*  2440 */   120,  121,  140,  135,  136,  137,  138,  139,   84,  140,
 /*  2450 */   140,   87,  140,  133,  140,   91,  140,  140,  140,  140,
 /*  2460 */   140,   97,   98,   99,  140,  140,  102,  103,  104,  105,
 /*  2470 */   106,  107,  108,  109,  110,  111,  112,  140,  140,  115,
 /*  2480 */   140,  140,  140,  140,  120,  121,  122,  123,  124,    3,
 /*  2490 */   140,    5,  128,  129,  130,   75,  140,  140,  140,  135,
 /*  2500 */   136,  137,  138,  139,   84,  140,  140,   87,  140,  140,
 /*  2510 */   140,   91,  140,  140,  140,  140,   30,   97,   98,   99,
 /*  2520 */   140,   35,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  2530 */   110,  111,  112,  140,  140,  115,  140,  140,   52,  140,
 /*  2540 */   120,  121,  122,  123,  124,  140,  140,  140,  128,  129,
 /*  2550 */   130,   75,  140,  140,  140,  135,  136,  137,  138,  139,
 /*  2560 */    84,  140,  140,   87,  140,  140,  140,   91,  140,  140,
 /*  2570 */   140,  140,  140,   97,   98,   99,  140,  140,  102,  103,
 /*  2580 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  140,
 /*  2590 */   140,  115,  140,  140,  140,  140,  120,  121,  122,  123,
 /*  2600 */   124,  140,  140,  140,  128,  129,  130,   75,  140,  140,
 /*  2610 */   140,  135,  136,  137,  138,  139,   84,  140,  140,   87,
 /*  2620 */   140,  140,  140,   91,  140,  140,  140,  140,  140,   97,
 /*  2630 */    98,   99,  140,  140,  102,  103,  104,  105,  106,  107,
 /*  2640 */   108,  109,  110,  111,  112,  140,  140,  115,  140,  140,
 /*  2650 */   140,  140,  120,  121,  122,  123,  124,  140,  140,  140,
 /*  2660 */   128,  129,  130,   75,  140,  140,  140,  135,  136,  137,
 /*  2670 */   138,  139,   84,  140,  140,   87,  140,  140,  140,   91,
 /*  2680 */   140,  140,  140,  140,  140,   97,   98,   99,  140,  140,
 /*  2690 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2700 */   112,  140,  140,  115,  140,  140,  140,  140,  120,  121,
 /*  2710 */   122,  123,  124,  140,  140,  140,  128,  129,  130,   75,
 /*  2720 */   140,  140,  140,  135,  136,  137,  138,  139,   84,  140,
 /*  2730 */   140,   87,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  2740 */   140,   97,   98,   99,  140,  101,  102,  103,  104,  105,
 /*  2750 */   106,  107,  108,  109,  110,  111,  112,  140,  140,  115,
 /*  2760 */   140,  140,  140,  140,  120,  121,  122,  123,  124,  140,
 /*  2770 */   140,  140,  128,  129,  130,   75,  140,  140,  140,  135,
 /*  2780 */   136,  137,  138,  139,   84,  140,  140,   87,  140,  140,
 /*  2790 */   140,  140,  140,  140,  140,  140,  140,   97,   98,   99,
 /*  2800 */   100,  140,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  2810 */   110,  111,  112,  140,  140,  115,  140,  140,  140,  140,
 /*  2820 */   120,  121,  122,  123,  124,  140,  140,  140,  128,  129,
 /*  2830 */   130,    8,  140,  140,  140,  135,  136,  137,  138,  139,
 /*  2840 */   140,  140,  140,   20,   21,  140,  140,  140,  140,   26,
 /*  2850 */    27,   28,  140,   30,   31,  140,  140,  140,  140,  140,
 /*  2860 */    37,   38,   39,   40,  140,  140,   43,  140,  140,  140,
 /*  2870 */    47,   48,   49,   50,   51,  140,   53,   54,   55,  140,
 /*  2880 */   140,  140,  140,  140,  140,  140,    8,  140,  140,   66,
 /*  2890 */    67,   68,   69,   70,   71,   72,   73,   74,   20,   21,
 /*  2900 */   140,  140,  140,  140,   26,   27,   28,  140,   30,   31,
 /*  2910 */   140,  140,  140,  140,  140,   37,   38,   39,   40,  140,
 /*  2920 */   140,   43,  140,  140,  140,   47,   48,   49,   50,   51,
 /*  2930 */   140,   53,   54,   55,  140,  140,  140,  140,  140,  140,
 /*  2940 */   140,    8,  140,  140,   66,   67,   68,   69,   70,   71,
 /*  2950 */    72,   73,   74,   20,   21,  140,  140,  140,  140,   26,
 /*  2960 */    27,   28,  140,   30,   31,  140,  140,  140,  140,  140,
 /*  2970 */    37,   38,   39,   40,  140,  140,   43,  140,  140,  140,
 /*  2980 */    47,   48,   49,   50,   51,  140,   53,   54,   55,  140,
 /*  2990 */   140,  140,  140,  140,  140,  140,    8,  140,  140,   66,
 /*  3000 */    67,   68,   69,   70,   71,   72,   73,   74,   20,   21,
 /*  3010 */   140,  140,  140,  140,   26,   27,   28,  140,   30,   31,
 /*  3020 */   140,  140,  140,  140,  140,   37,   38,   39,   40,  140,
 /*  3030 */   140,   43,  140,  140,  140,   47,   48,   49,   50,   51,
 /*  3040 */   140,   53,   54,   55,  140,  140,  140,  140,  140,  140,
 /*  3050 */   140,    8,  140,  140,   66,   67,   68,   69,   70,   71,
 /*  3060 */    72,   73,   74,   20,   21,  140,  140,  140,  140,   26,
 /*  3070 */    27,   28,  140,   30,   31,  140,  140,  140,  140,  140,
 /*  3080 */    37,   38,   39,   40,  140,  140,   43,  140,  140,  140,
 /*  3090 */    47,   48,   49,   50,   51,  140,   53,   54,   55,  140,
 /*  3100 */   140,  140,  140,  140,  140,  140,    8,  140,  140,   66,
 /*  3110 */    67,   68,   69,   70,   71,   72,   73,   74,   20,   21,
 /*  3120 */   140,  140,  140,  140,   26,   27,   28,  140,   30,   31,
 /*  3130 */   140,  140,  140,  140,  140,   37,   38,   39,   40,  140,
 /*  3140 */   140,   43,  140,  140,  140,   47,   48,   49,   50,   51,
 /*  3150 */   140,   53,   54,   55,  140,  140,  140,  140,  140,  140,
 /*  3160 */   140,    8,  140,  140,   66,   67,   68,   69,   70,   71,
 /*  3170 */    72,   73,   74,   20,   21,  140,  140,  140,  140,   26,
 /*  3180 */    27,   28,  140,   30,   31,  140,  140,  140,  140,  140,
 /*  3190 */    37,   38,   39,   40,  140,  140,   43,  140,  140,  140,
 /*  3200 */    47,   48,   49,   50,   51,  140,   53,   54,   55,  140,
 /*  3210 */   140,  140,  140,  140,  140,  140,    8,  140,  140,   66,
 /*  3220 */    67,   68,   69,   70,   71,   72,   73,   74,   20,   21,
 /*  3230 */   140,  140,  140,  140,   26,   27,   28,  140,   30,   31,
 /*  3240 */   140,  140,  140,  140,  140,   37,   38,  140,   40,  140,
 /*  3250 */   140,   43,  140,  140,  140,   47,   48,   49,   50,   51,
 /*  3260 */   140,   53,   54,   55,  140,  140,  140,  140,  140,  140,
 /*  3270 */   140,  140,  140,  140,   66,   67,   68,   69,   70,   71,
 /*  3280 */    72,   73,   74,    4,    5,    6,    7,    0,    9,   10,
 /*  3290 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  3300 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  3310 */   140,  140,  140,  140,   35,  140,  140,  140,  140,   32,
 /*  3320 */    41,   34,  140,   36,   37,   38,  140,  140,  140,  140,
 /*  3330 */   140,   52,  140,   54,   55,  140,    4,    5,    6,    7,
 /*  3340 */    53,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  3350 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  3360 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  3370 */   140,  140,  140,   41,  140,  140,  140,  140,  140,  140,
 /*  3380 */   140,  140,  140,  140,   52,  140,   54,   55,  140,    4,
 /*  3390 */     5,    6,    7,    0,    9,   10,   11,   12,   13,   14,
 /*  3400 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  3410 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  3420 */    35,  140,  140,  140,  140,   32,   41,   34,  140,   36,
 /*  3430 */    37,   38,  140,  140,  140,  140,  140,   52,  140,   54,
 /*  3440 */    55,  140,    4,    5,    6,    7,   53,    9,   10,   11,
 /*  3450 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  3460 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  3470 */   140,  140,  140,   35,  140,  140,  140,  140,  140,   41,
 /*  3480 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  3490 */    52,  140,   54,   55,  140,    4,    5,    6,    7,    0,
 /*  3500 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  3510 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  3520 */    29,   30,  140,  140,  140,  140,   35,  140,  140,  140,
 /*  3530 */   140,   32,   41,   34,  140,   36,   37,   38,  140,  140,
 /*  3540 */   140,  140,  140,   52,  140,   54,   55,  140,    4,    5,
 /*  3550 */     6,    7,   53,    9,   10,   11,   12,   13,   14,   15,
 /*  3560 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  3570 */   140,   27,   28,   29,   30,  140,  140,  140,  140,   35,
 /*  3580 */   140,  140,  140,  140,  140,   41,  140,  140,  140,  140,
 /*  3590 */   140,  140,  140,  140,  140,  140,   52,  140,   54,   55,
 /*  3600 */   140,    4,    5,    6,    7,    0,    9,   10,   11,   12,
 /*  3610 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  3620 */    23,   24,  140,  140,   27,   28,   29,   30,  140,  140,
 /*  3630 */   140,  140,   35,  140,  140,  140,  140,   32,   41,   34,
 /*  3640 */   140,   36,   37,   38,  140,  140,  140,  140,  140,   52,
 /*  3650 */   140,   54,   55,  140,    4,    5,    6,    7,   53,    9,
 /*  3660 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  3670 */    20,   21,   22,   23,   24,  140,  140,   27,   28,   29,
 /*  3680 */    30,  140,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  3690 */   140,   41,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  3700 */   140,  140,   52,  140,   54,   55,  140,    4,    5,    6,
 /*  3710 */     7,    0,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  3720 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  3730 */    27,   28,   29,   30,  140,  140,  140,  140,   35,  140,
 /*  3740 */   140,  140,  140,   32,   41,   34,  140,   36,   37,   38,
 /*  3750 */   140,  140,  140,  140,  140,   52,  140,   54,   55,  140,
 /*  3760 */     4,    5,    6,    7,   53,    9,   10,   11,   12,   13,
 /*  3770 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  3780 */    24,  140,  140,   27,   28,   29,   30,  140,  140,  140,
 /*  3790 */   140,   35,  140,  140,  140,  140,  140,   41,  140,  140,
 /*  3800 */   140,  140,  140,  140,  140,  140,  140,  140,   52,  140,
 /*  3810 */    54,   55,  140,    4,    5,    6,    7,    0,    9,   10,
 /*  3820 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  3830 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  3840 */   140,  140,  140,  140,   35,  140,  140,  140,  140,   32,
 /*  3850 */    41,   34,  140,   36,   37,   38,  140,  140,  140,  140,
 /*  3860 */   140,   52,  140,   54,   55,  140,    4,    5,    6,    7,
 /*  3870 */    53,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  3880 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  3890 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  3900 */   140,  140,  140,   41,  140,  140,  140,  140,  140,  140,
 /*  3910 */   140,  140,  140,  140,   52,  140,   54,   55,  140,    4,
 /*  3920 */     5,    6,    7,    0,    9,   10,   11,   12,   13,   14,
 /*  3930 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  3940 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  3950 */    35,  140,  140,  140,  140,   32,   41,   34,  140,   36,
 /*  3960 */    37,   38,  140,  140,  140,  140,  140,   52,  140,   54,
 /*  3970 */    55,  140,    4,    5,    6,    7,   53,    9,   10,   11,
 /*  3980 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  3990 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  4000 */   140,  140,  140,   35,  140,  140,  140,  140,  140,   41,
 /*  4010 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  4020 */    52,  140,   54,   55,  140,    4,    5,    6,    7,    0,
 /*  4030 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  4040 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  4050 */    29,   30,  140,  140,  140,  140,   35,  140,  140,  140,
 /*  4060 */   140,   32,   41,   34,  140,   36,   37,   38,  140,  140,
 /*  4070 */   140,  140,  140,   52,  140,   54,   55,  140,    4,    5,
 /*  4080 */     6,    7,   53,    9,   10,   11,   12,   13,   14,   15,
 /*  4090 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  4100 */   140,   27,   28,   29,   30,  140,  140,  140,  140,   35,
 /*  4110 */   140,  140,  140,  140,  140,   41,  140,  140,  140,  140,
 /*  4120 */   140,  140,  140,  140,  140,  140,   52,  140,   54,   55,
 /*  4130 */   140,    4,    5,    6,    7,    0,    9,   10,   11,   12,
 /*  4140 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  4150 */    23,   24,  140,  140,   27,   28,   29,   30,  140,  140,
 /*  4160 */   140,  140,   35,  140,  140,  140,  140,   32,   41,   34,
 /*  4170 */   140,   36,   37,   38,  140,  140,  140,  140,  140,   52,
 /*  4180 */   140,   54,   55,  140,    4,    5,    6,    7,   53,    9,
 /*  4190 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  4200 */    20,   21,   22,   23,   24,  140,  140,   27,   28,   29,
 /*  4210 */    30,  140,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  4220 */   140,   41,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  4230 */   140,  140,   52,  140,   54,   55,  140,    4,    5,    6,
 /*  4240 */     7,    0,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  4250 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  4260 */    27,   28,   29,   30,  140,  140,  140,  140,   35,  140,
 /*  4270 */   140,  140,  140,   32,   41,   34,  140,   36,   37,   38,
 /*  4280 */   140,  140,  140,  140,  140,   52,  140,   54,   55,  140,
 /*  4290 */     4,    5,    6,    7,   53,    9,   10,   11,   12,   13,
 /*  4300 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  4310 */    24,  140,  140,   27,   28,   29,   30,  140,  140,  140,
 /*  4320 */   140,   35,  140,  140,  140,  140,  140,   41,  140,  140,
 /*  4330 */   140,  140,  140,  140,  140,  140,  140,  140,   52,  140,
 /*  4340 */    54,   55,  140,    4,    5,    6,    7,    0,    9,   10,
 /*  4350 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  4360 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  4370 */   140,  140,  140,  140,   35,  140,  140,  140,  140,   32,
 /*  4380 */    41,   34,  140,   36,   37,   38,  140,  140,  140,  140,
 /*  4390 */   140,   52,  140,   54,   55,  140,    4,    5,    6,    7,
 /*  4400 */    53,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  4410 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  4420 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  4430 */   140,  140,  140,   41,  140,  140,  140,  140,  140,  140,
 /*  4440 */   140,  140,  140,  140,   52,  140,   54,   55,  140,    4,
 /*  4450 */     5,    6,    7,  140,    9,   10,   11,   12,   13,   14,
 /*  4460 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  4470 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  4480 */    35,  140,  140,  140,  140,  140,   41,  140,  140,  140,
 /*  4490 */   140,  140,  140,  140,  140,  140,  140,   52,  140,   54,
 /*  4500 */    55,  140,    4,    5,    6,    7,  140,    9,   10,   11,
 /*  4510 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  4520 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  4530 */   140,  140,  140,   35,  140,  140,  140,  140,  140,   41,
 /*  4540 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  4550 */    52,  140,   54,   55,  140,    4,    5,    6,    7,  140,
 /*  4560 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  4570 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  4580 */    29,   30,  140,  140,  140,  140,   35,  140,  140,  140,
 /*  4590 */   140,  140,   41,  140,  140,  140,  140,  140,  140,  140,
 /*  4600 */   140,  140,  140,   52,  140,   54,   55,  140,    4,    5,
 /*  4610 */     6,    7,  140,    9,   10,   11,   12,   13,   14,   15,
 /*  4620 */    16,   17,   18,   19,   20,   21,   22,   23,   24,  140,
 /*  4630 */   140,   27,   28,   29,   30,  140,  140,  140,  140,   35,
 /*  4640 */   140,  140,  140,  140,  140,   41,  140,  140,  140,  140,
 /*  4650 */   140,  140,  140,  140,  140,  140,   52,  140,   54,   55,
 /*  4660 */   140,    4,    5,    6,    7,  140,    9,   10,   11,   12,
 /*  4670 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  4680 */    23,   24,  140,  140,   27,   28,   29,   30,  140,  140,
 /*  4690 */   140,  140,   35,  140,  140,  140,  140,  140,   41,  140,
 /*  4700 */   140,  140,  140,  140,  140,  140,  140,  140,  140,   52,
 /*  4710 */   140,   54,   55,  140,    4,    5,    6,    7,  140,    9,
 /*  4720 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*  4730 */    20,   21,   22,   23,   24,  140,  140,   27,   28,   29,
 /*  4740 */    30,  140,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  4750 */   140,   41,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  4760 */   140,  140,   52,  140,   54,   55,  140,    4,    5,    6,
 /*  4770 */     7,  140,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  4780 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  4790 */    27,   28,   29,   30,  140,  140,  140,  140,   35,  140,
 /*  4800 */   140,  140,  140,  140,   41,  140,  140,  140,  140,  140,
 /*  4810 */   140,  140,  140,  140,  140,   52,  140,   54,   55,  140,
 /*  4820 */     4,    5,    6,    7,  140,    9,   10,   11,   12,   13,
 /*  4830 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  4840 */    24,  140,  140,   27,   28,   29,   30,  140,  140,  140,
 /*  4850 */   140,   35,  140,  140,  140,  140,  140,   41,  140,  140,
 /*  4860 */   140,  140,  140,  140,  140,  140,  140,  140,   52,  140,
 /*  4870 */    54,   55,  140,    4,    5,    6,    7,  140,    9,   10,
 /*  4880 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  4890 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  4900 */   140,  140,  140,  140,   35,  140,  140,  140,  140,  140,
 /*  4910 */    41,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  4920 */   140,   52,  140,   54,   55,  140,    4,    5,    6,    7,
 /*  4930 */   140,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*  4940 */    18,   19,   20,   21,   22,   23,   24,  140,  140,   27,
 /*  4950 */    28,   29,   30,  140,  140,  140,  140,   35,  140,  140,
 /*  4960 */   140,  140,  140,   41,  140,  140,  140,  140,  140,  140,
 /*  4970 */   140,  140,  140,  140,   52,  140,   54,   55,  140,    4,
 /*  4980 */     5,    6,    7,  140,    9,   10,   11,   12,   13,   14,
 /*  4990 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  5000 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  5010 */    35,  140,  140,  140,  140,  140,   41,  140,  140,  140,
 /*  5020 */   140,  140,  140,  140,  140,  140,  140,   52,  140,   54,
 /*  5030 */    55,  140,    4,    5,    6,    7,  140,    9,   10,   11,
 /*  5040 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  5050 */    22,   23,   24,  140,  140,   27,   28,   29,   30,  140,
 /*  5060 */   140,  140,  140,   35,  140,  140,  140,  140,  140,   41,
 /*  5070 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  5080 */    52,  140,   54,   55,  140,    4,    5,    6,    7,  140,
 /*  5090 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  5100 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  5110 */    29,   30,  140,  140,  140,  140,   35,  140,  140,    8,
 /*  5120 */   140,  140,   41,  140,  140,  140,  140,  140,  140,  140,
 /*  5130 */   140,   20,   21,   52,  140,   54,   55,   26,   27,   28,
 /*  5140 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  5150 */   140,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  5160 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  5170 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  5180 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  5190 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  5200 */   140,  140,  140,   37,   38,  140,   40,  140,  140,   43,
 /*  5210 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  5220 */    54,   55,  140,  140,  140,  140,  140,  140,  140,    8,
 /*  5230 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  5240 */    74,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  5250 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  5260 */   140,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  5270 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  5280 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  5290 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  5300 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  5310 */   140,  140,  140,   37,   38,  140,   40,  140,  140,   43,
 /*  5320 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  5330 */    54,   55,  140,  140,  140,  140,  140,  140,  140,    8,
 /*  5340 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  5350 */    74,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  5360 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  5370 */   140,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  5380 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  5390 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  5400 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  5410 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  5420 */   140,  140,  140,   37,   38,  140,   40,  140,  140,   43,
 /*  5430 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  5440 */    54,   55,  140,  140,  140,  140,  140,  140,  140,    8,
 /*  5450 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  5460 */    74,   20,   21,  140,  140,  140,  140,   26,   27,   28,
 /*  5470 */   140,   30,   31,  140,  140,  140,  140,  140,   37,   38,
 /*  5480 */   140,   40,  140,  140,   43,  140,  140,  140,   47,   48,
 /*  5490 */    49,   50,   51,  140,   53,   54,   55,  140,  140,  140,
 /*  5500 */   140,  140,  140,  140,    8,  140,  140,   66,   67,   68,
 /*  5510 */    69,   70,   71,   72,   73,   74,   20,   21,  140,  140,
 /*  5520 */   140,  140,   26,   27,   28,  140,   30,   31,  140,  140,
 /*  5530 */   140,  140,  140,   37,   38,  140,   40,  140,  140,   43,
 /*  5540 */   140,  140,  140,   47,   48,   49,   50,   51,  140,   53,
 /*  5550 */    54,   55,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  5560 */   140,  140,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  5570 */    74,    4,    5,    6,    7,  140,    9,   10,   11,   12,
 /*  5580 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  5590 */    23,   24,  140,  140,   27,   28,   29,   30,  140,  140,
 /*  5600 */   140,  140,   35,  140,  140,  140,  140,  140,   41,  140,
 /*  5610 */   140,  140,  140,    4,    5,    6,    7,  140,    9,   10,
 /*  5620 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  5630 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  5640 */   140,  140,  140,  140,   35,  140,  140,  140,  140,  140,
 /*  5650 */    41,  140,  140,  140,  140,    4,    5,    6,    7,  140,
 /*  5660 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  5670 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  5680 */    29,   30,  140,  140,  140,  140,   35,  140,  140,  140,
 /*  5690 */   140,    4,   41,    6,    7,  140,    9,   10,   11,   12,
 /*  5700 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  5710 */    23,   24,  140,  140,   27,   28,   29,   30,  140,    3,
 /*  5720 */     4,    5,    6,    7,  140,    9,   10,   11,   12,   13,
 /*  5730 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  5740 */    24,   54,   55,   27,   28,   29,  140,    4,    5,    6,
 /*  5750 */     7,   35,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  5760 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  5770 */    27,   28,   29,   30,  140,  140,  140,  140,   35,  140,
 /*  5780 */   140,  140,  140,    4,    5,    6,    7,  140,    9,   10,
 /*  5790 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  5800 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  5810 */   140,  140,  140,  140,   35,  140,  140,  140,  140,    4,
 /*  5820 */     5,    6,    7,  140,    9,   10,   11,   12,   13,   14,
 /*  5830 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  5840 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  5850 */    35,  140,  140,  140,  140,    4,    5,    6,    7,  140,
 /*  5860 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  5870 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  5880 */    29,   30,  140,  140,  140,  140,   35,  140,  140,  140,
 /*  5890 */   140,    4,    5,    6,    7,  140,    9,   10,   11,   12,
 /*  5900 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  5910 */    23,   24,  140,  140,   27,   28,   29,   30,  140,  140,
 /*  5920 */   140,  140,   35,  140,  140,  140,  140,    4,    5,    6,
 /*  5930 */     7,  140,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  5940 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  5950 */    27,   28,   29,   30,  140,  140,  140,  140,   35,  140,
 /*  5960 */   140,  140,  140,    4,    5,    6,    7,  140,    9,   10,
 /*  5970 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  5980 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  5990 */   140,  140,  140,  140,   35,  140,  140,  140,  140,    4,
 /*  6000 */     5,    6,    7,  140,    9,   10,   11,   12,   13,   14,
 /*  6010 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  6020 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  6030 */    35,  140,  140,  140,  140,    4,    5,    6,    7,  140,
 /*  6040 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  6050 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  6060 */    29,   30,  140,  140,  140,  140,   35,  140,  140,  140,
 /*  6070 */   140,    4,    5,    6,    7,  140,    9,   10,   11,   12,
 /*  6080 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  6090 */    23,   24,  140,  140,   27,   28,   29,   30,  140,  140,
 /*  6100 */   140,  140,   35,  140,  140,  140,  140,    4,    5,    6,
 /*  6110 */     7,  140,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  6120 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  6130 */    27,   28,   29,   30,  140,  140,  140,  140,   35,  140,
 /*  6140 */   140,  140,  140,    4,    5,    6,    7,  140,    9,   10,
 /*  6150 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  6160 */    21,   22,   23,   24,  140,  140,   27,   28,   29,   30,
 /*  6170 */   140,  140,  140,  140,   35,  140,  140,  140,  140,    4,
 /*  6180 */     5,    6,    7,  140,    9,   10,   11,   12,   13,   14,
 /*  6190 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*  6200 */   140,  140,   27,   28,   29,   30,  140,  140,  140,  140,
 /*  6210 */    35,  140,  140,  140,  140,    4,    5,    6,    7,  140,
 /*  6220 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  6230 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  6240 */    29,  140,  140,  140,  140,  140,   35,  140,  140,  140,
 /*  6250 */   140,    4,    5,    6,    7,  140,    9,   10,   11,   12,
 /*  6260 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  6270 */    23,   24,  140,  140,   27,   28,   29,  140,  140,  140,
 /*  6280 */   140,    4,   35,    6,    7,  140,    9,   10,   11,   12,
 /*  6290 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*  6300 */    23,   24,  140,  140,   27,   28,   29,  140,  140,  140,
 /*  6310 */     4,  140,    6,    7,  140,    9,   10,   11,   12,   13,
 /*  6320 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
 /*  6330 */    24,   54,   55,   27,   28,   29,  140,  140,  140,  140,
 /*  6340 */   140,  140,  140,  140,  140,  140,  140,   41,  140,  140,
 /*  6350 */   140,  140,    4,  140,    6,    7,  140,    9,   10,   11,
 /*  6360 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  6370 */    22,   23,   24,  140,  140,   27,   28,   29,  140,  140,
 /*  6380 */   140,  140,    4,   35,    6,    7,  140,    9,   10,   11,
 /*  6390 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  6400 */    22,   23,   24,  140,  140,   27,   28,   29,  140,  140,
 /*  6410 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  6420 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  6430 */    52,  140,  140,  140,  140,    4,  140,    6,    7,  140,
 /*  6440 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  6450 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  6460 */    29,  140,  140,  140,  140,    4,   35,    6,    7,  140,
 /*  6470 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  6480 */    19,   20,   21,   22,   23,   24,  140,  140,   27,   28,
 /*  6490 */    29,  140,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  6500 */   140,  140,   41,  140,  140,  140,  140,    4,  140,    6,
 /*  6510 */     7,  140,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  6520 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  6530 */    27,   28,   29,  140,  140,  140,  140,    4,   35,    6,
 /*  6540 */     7,  140,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  6550 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  6560 */    27,   28,   29,  140,  140,  140,  140,    4,   35,    6,
 /*  6570 */     7,  140,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  6580 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  6590 */    27,   28,   29,  140,  140,  140,  140,    4,   35,    6,
 /*  6600 */     7,  140,    9,   10,   11,   12,   13,   14,   15,   16,
 /*  6610 */    17,   18,   19,   20,   21,   22,   23,   24,  140,  140,
 /*  6620 */    27,   28,   29,   30,  140,    4,  140,    6,    7,  140,
 /*  6630 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*  6640 */    19,   20,   21,   22,   23,   24,    8,  140,   27,   28,
 /*  6650 */    29,  140,  140,  140,  140,  140,  140,  140,   20,   21,
 /*  6660 */   140,  140,  140,  140,   26,   27,   28,  140,   30,   31,
 /*  6670 */   140,  140,  140,  140,  140,  140,   38,  140,   40,  140,
 /*  6680 */   140,   43,  140,  140,  140,   47,   48,   49,   50,   51,
 /*  6690 */     8,   53,   54,   55,  140,  140,  140,  140,  140,  140,
 /*  6700 */   140,  140,   20,   21,  140,  140,  140,  140,   26,   27,
 /*  6710 */    28,   73,   30,   31,  140,  140,  140,  140,  140,  140,
 /*  6720 */    38,  140,   40,  140,  140,   43,  140,  140,  140,   47,
 /*  6730 */    48,   49,   50,   51,    8,   53,   54,   55,  140,  140,
 /*  6740 */   140,  140,  140,  140,  140,  140,   20,   21,  140,  140,
 /*  6750 */   140,  140,   26,   27,   28,   73,  140,   31,  140,  140,
 /*  6760 */   140,  140,  140,  140,   38,  140,   40,  140,  140,   43,
 /*  6770 */   140,  140,  140,   47,   48,   49,   50,   51,    8,   53,
 /*  6780 */    54,   55,  140,  140,  140,  140,  140,  140,  140,  140,
 /*  6790 */    20,   21,  140,  140,  140,  140,   26,   27,   28,   73,
 /*  6800 */   140,   31,  140,  140,  140,   35,  140,  140,  140,  140,
 /*  6810 */    40,  140,  140,   43,    8,  140,  140,   47,   48,   49,
 /*  6820 */    50,   51,  140,  140,   54,   55,   20,   21,  140,  140,
 /*  6830 */   140,  140,   26,   27,   28,  140,  140,   31,  140,  140,
 /*  6840 */   140,   35,  140,   73,  140,  140,   40,  140,  140,   43,
 /*  6850 */     8,  140,  140,   47,   48,   49,   50,   51,  140,  140,
 /*  6860 */    54,   55,   20,   21,  140,  140,  140,  140,   26,   27,
 /*  6870 */    28,  140,  140,   31,  140,  140,  140,   35,  140,   73,
 /*  6880 */   140,  140,   40,  140,  140,   43,    8,   45,  140,   47,
 /*  6890 */    48,   49,   50,   51,  140,  140,  140,  140,   20,   21,
 /*  6900 */   140,  140,  140,  140,   26,   27,   28,  140,  140,   31,
 /*  6910 */   140,  140,  140,  140,  140,   73,  140,  140,   40,  140,
 /*  6920 */   140,   43,  140,  140,    8,   47,   48,   49,   50,   51,
 /*  6930 */   140,  140,   54,   55,  140,  140,   20,   21,  140,  140,
 /*  6940 */   140,  140,   26,   27,   28,  140,  140,   31,  140,  140,
 /*  6950 */   140,   73,  140,  140,  140,  140,   40,   41,  140,   43,
 /*  6960 */     8,  140,  140,   47,   48,   49,   50,   51,  140,  140,
 /*  6970 */   140,  140,   20,   21,  140,  140,  140,  140,   26,   27,
 /*  6980 */    28,  140,  140,   31,  140,  140,  140,  140,  140,   73,
 /*  6990 */   140,  140,   40,  140,  140,   43,  140,   45,    8,   47,
 /*  7000 */    48,   49,   50,   51,  140,  140,  140,  140,  140,  140,
 /*  7010 */    20,   21,  140,  140,  140,  140,   26,   27,   28,  140,
 /*  7020 */    30,   31,  140,  140,  140,   73,  140,  140,  140,  140,
 /*  7030 */    40,  140,  140,   43,    8,  140,  140,   47,   48,   49,
 /*  7040 */    50,   51,  140,  140,  140,  140,   20,   21,  140,  140,
 /*  7050 */   140,  140,   26,   27,   28,  140,  140,   31,  140,  140,
 /*  7060 */   140,  140,  140,   73,  140,  140,   40,  140,  140,   43,
 /*  7070 */   140,  140,    8,   47,   48,   49,   50,   51,  140,  140,
 /*  7080 */   140,  140,  140,  140,   20,   21,  140,  140,  140,  140,
 /*  7090 */    26,   27,   28,  140,  140,   31,  140,  140,  140,   73,
 /*  7100 */   140,  140,  140,  140,   40,  140,  140,   43,    8,  140,
 /*  7110 */   140,   47,   48,   49,   50,   51,  140,  140,  140,  140,
 /*  7120 */    20,   21,  140,  140,  140,  140,   26,   27,   28,  140,
 /*  7130 */   140,   31,  140,  140,  140,  140,  140,   73,   84,  140,
 /*  7140 */    40,  140,  140,   43,  140,  140,  140,   47,   48,   49,
 /*  7150 */    50,   51,  140,  140,  140,  140,  102,  103,  104,  105,
 /*  7160 */   140,  140,  140,  140,  140,  140,  140,  140,  140,  115,
 /*  7170 */   140,  140,  140,   73,  120,  121,  140,  140,  140,  140,
 /*  7180 */   140,  140,  140,  140,  140,  131,  132,
};
#define YY_SHIFT_USE_DFLT (-26)
#define YY_SHIFT_COUNT (343)
#define YY_SHIFT_MIN   (-25)
#define YY_SHIFT_MAX   (7100)
static const short yy_shift_ofst[] = {
 /*     0 */  4347, 3153, 3098, 5496, 5496, 5496, 5496, 5496, 5496, 5496,
 /*    10 */  5496, 4241, 6682, 6726, 6806, 6878, 6842, 6842, 6842, 6842,
 /*    20 */  6842, 6990, 2185, 6952, 7064, 7064, 7064, 7064, 7100, 7064,
 /*    30 */  7064, 7064, 6916, 7064, 7064, 7064, 7064, 7064, 7064, 7064,
 /*    40 */  7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064,
 /*    50 */  7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064,
 /*    60 */  7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064,
 /*    70 */  7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064, 7064,
 /*    80 */   398,  183,  183,  190,  629,  629,  629,  629,  629,  629,
 /*    90 */   604,  603,  603,  596,  123,   60,   -3, 2129, 2073, 2017,
 /*   100 */  1961, 1905, 1849, 1793, 1737, 1701, 1648, 1595, 1542, 1489,
 /*   110 */  1436, 1365, 1309, 1253, 1197, 1141, 1085, 1029,  973,  917,
 /*   120 */   861,  805,  749,  693,  637,  581,  525,  469,  413,  357,
 /*   130 */   301,  245,  189, 3043, 2988, 2933, 2878, 2823, 5441, 5386,
 /*   140 */  5331, 5276, 5221, 5166, 5111, 5081, 5028, 4975, 4922, 4869,
 /*   150 */  4816, 4763, 4710, 4657, 4604, 4551, 4498, 4445, 4392, 4339,
 /*   160 */  4286, 4233, 4180, 4127, 4074, 4021, 3968, 3915, 3862, 3809,
 /*   170 */  3756, 3703, 3650, 3597, 3544, 3491, 3438, 3385, 3332, 3279,
 /*   180 */  3208, 5651, 5609, 5567, 6175, 6139, 6103, 6067, 6031, 5995,
 /*   190 */  5959, 5923, 5887, 5851, 5815, 5779, 5743, 5716, 5687, 6277,
 /*   200 */  6247, 6211, 6593, 6563, 6533, 6503, 6461, 6431, 6378, 6348,
 /*   210 */  6306, 6621, 6638, 6770, 7026,   41, 4135, 4029, 3923, 3817,
 /*   220 */  3711, 3605, 3499, 3393, 3287, 1656, 1550, 1444, 2486, 2374,
 /*   230 */   126, 1730,  342,  286,  230,  121,    4, 1510, 1729, 1457,
 /*   240 */  1393,   78,   63,   61,  651,  305,  636,  595,  555,  200,
 /*   250 */   194,  385,  381,  329,  539,  524,  483,  443,  412,  331,
 /*   260 */   249,  208,  171,  193,   80,  152,  108,  107,  325,  269,
 /*   270 */   243,  187,  592,  591,  587,  579,  567,  559,  575,  568,
 /*   280 */   560,  558,  556,  554,  551,  544,  535,  536,  531,  523,
 /*   290 */   522,  521,  520,  507,  505,  500,  495,  493,  491,  474,
 /*   300 */   475,  487,  463,  448,  464,  441,  433,  445,  435,  414,
 /*   310 */   431,  422,  410,  427,  419,  397,  395,  394,  383,  371,
 /*   320 */   369,  362,  361,  358,  351,  336,  328,  296,  293,  275,
 /*   330 */   272,  256,  240,  236,  214,  203,  142,   79,   64,   55,
 /*   340 */    38,   15,    6,  -25,
};
#define YY_REDUCE_USE_DFLT (-74)
#define YY_REDUCE_COUNT (93)
#define YY_REDUCE_MIN   (-73)
#define YY_REDUCE_MAX   (7054)
static const short yy_reduce_ofst[] = {
 /*     0 */   265, 2700, 2644, 2588, 2532, 2476, 2420, 2364, 2308, 2252,
 /*    10 */  2186,  -52, 7054, 2145, 2198, 2320,   89,   85,   57,   53,
 /*    20 */    48,  -66,  220, 1312,  360,  304,  248,  192,   49,  175,
 /*    30 */   136,  119,  949, 1269, 1246, 1229, 1213, 1190, 1173, 1157,
 /*    40 */  1134, 1117, 1101, 1078, 1061, 1045, 1022, 1005,  989,  966,
 /*    50 */   949,  933,  910,  893,  877,  854,  837,  821,  798,  781,
 /*    60 */   765,  742,  725,  709,  686,  669,  667,  653,  630,  613,
 /*    70 */   597,  574,  557,  518,  501,  462,  406,  389,  387,  277,
 /*    80 */   -73,  197,  118,  542,  600,  589,  588,  584,  576,  565,
 /*    90 */   533,  543,  540,  550,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    10 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    20 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    30 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    40 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    50 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    60 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    70 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    80 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*    90 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   100 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   110 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   120 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   130 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   140 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   150 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   160 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   170 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   180 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   190 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   200 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   210 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   220 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   230 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   240 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   250 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   260 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   270 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   280 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   290 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   300 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   310 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   320 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   330 */   518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
 /*   340 */   518,  518,  518,  518,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "IFX",           "ELSE",          "ASSIGN",      
  "QMARK",         "COMMA",         "LOR",           "LAND",        
  "LNOT",          "EQ",            "LE",            "LT",          
  "GE",            "GT",            "NE",            "BITOR",       
  "BITXOR",        "BITAND",        "LSHIFT",        "RSHIFT",      
  "PLUS",          "MINUS",         "DIVIDE",        "MULTIPLY",    
  "MOD",           "UNARY",         "BITNOT",        "LPAREN",      
  "LSQBRACKET",    "PERIOD",        "SEMICOLON",     "NAME",        
  "IMPORT",        "AS",            "FUNCTION",      "RPAREN",      
  "OBJECT",        "LBRACKET",      "VAR",           "RBRACKET",    
  "NUMBER",        "RSQBRACKET",    "SUBSCRIPT",     "KILLS",       
  "MEMBER",        "STRING",        "FUNCCALL",      "L2V",         
  "MAPSTRING",     "UNIT",          "SWITCH",        "LOCATION",    
  "COLON",         "CONST",         "INC",           "DEC",         
  "IADD",          "ISUB",          "IMUL",          "IDIV",        
  "IMOD",          "ILSH",          "IRSH",          "IBND",        
  "IBOR",          "IBXR",          "IF",            "WHILE",       
  "FOR",           "FOREACH",       "CONTINUE",      "BREAK",       
  "RETURN",        "CONDITIONNAME",  "ACTIONNAME",    "error",       
  "nt",            "program",       "chunks",        "chunk",       
  "import_chunk",  "fdef_chunk",    "fdecl_chunk",   "object_chunk",
  "vdef_stmt",     "vdefAssign_global_stmt",  "cdef_global_stmt",  "blockStmt",   
  "dottedName",    "fdef_header",   "nameList",      "stmt",        
  "object_header",  "object_body",   "nameList_nonEmpty",  "method_header",
  "method_chunk",  "bodyStmt",      "return_stmt",   "lbracket",    
  "rbracket",      "bodyStmtList",  "vdefAssign_stmt",  "cdef_stmt",   
  "assign_stmt",   "funcexpr",      "actionStmt",    "if_stmt",     
  "while_stmt",    "for_stmt",      "foreach_stmt",  "continue_stmt",
  "break_stmt",    "numList_nonEmpty",  "exprList_nonEmpty",  "expr",        
  "exprList",      "fArgs_nonEmpty",  "fArgs",         "commaSkippable",
  "lvalue",        "lvalueList_nonEmpty",  "if_start",      "if_header",   
  "if_block",      "elif_start",    "elif_header",   "else_header", 
  "while_start",   "while_header",  "for_opener",    "for_init_stmt_nonEmpty",
  "for_init_stmt",  "for_action_stmt_nonEmpty",  "for_action_stmt",  "for_header1", 
  "for_header2",   "for_header",    "foreach_opener",  "foreach_header",
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= chunks",
 /*   1 */ "chunks ::=",
 /*   2 */ "chunks ::= chunks chunk",
 /*   3 */ "chunk ::= import_chunk SEMICOLON",
 /*   4 */ "chunk ::= fdef_chunk",
 /*   5 */ "chunk ::= fdecl_chunk",
 /*   6 */ "chunk ::= object_chunk",
 /*   7 */ "chunk ::= vdef_stmt SEMICOLON",
 /*   8 */ "chunk ::= vdefAssign_global_stmt SEMICOLON",
 /*   9 */ "chunk ::= cdef_global_stmt SEMICOLON",
 /*  10 */ "chunk ::= blockStmt",
 /*  11 */ "dottedName ::= NAME",
 /*  12 */ "dottedName ::= dottedName PERIOD NAME",
 /*  13 */ "import_chunk ::= IMPORT dottedName AS NAME",
 /*  14 */ "import_chunk ::= IMPORT dottedName",
 /*  15 */ "fdef_header ::= FUNCTION NAME LPAREN nameList RPAREN",
 /*  16 */ "fdef_chunk ::= fdef_header stmt",
 /*  17 */ "fdecl_chunk ::= FUNCTION NAME LPAREN nameList RPAREN SEMICOLON",
 /*  18 */ "object_header ::= OBJECT NAME LBRACKET",
 /*  19 */ "object_body ::= object_header",
 /*  20 */ "object_body ::= object_body VAR nameList_nonEmpty SEMICOLON",
 /*  21 */ "method_header ::= FUNCTION NAME LPAREN nameList RPAREN",
 /*  22 */ "method_chunk ::= method_header stmt",
 /*  23 */ "object_body ::= object_body method_chunk",
 /*  24 */ "object_chunk ::= object_body RBRACKET SEMICOLON",
 /*  25 */ "stmt ::= error SEMICOLON",
 /*  26 */ "stmt ::= bodyStmt",
 /*  27 */ "stmt ::= return_stmt SEMICOLON",
 /*  28 */ "lbracket ::= LBRACKET",
 /*  29 */ "rbracket ::= RBRACKET",
 /*  30 */ "blockStmt ::= lbracket RBRACKET",
 /*  31 */ "blockStmt ::= lbracket return_stmt SEMICOLON rbracket",
 /*  32 */ "blockStmt ::= lbracket bodyStmtList rbracket",
 /*  33 */ "blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket",
 /*  34 */ "blockStmt ::= lbracket error RBRACKET",
 /*  35 */ "bodyStmt ::= blockStmt",
 /*  36 */ "bodyStmt ::= SEMICOLON",
 /*  37 */ "bodyStmt ::= vdef_stmt SEMICOLON",
 /*  38 */ "bodyStmt ::= vdefAssign_stmt SEMICOLON",
 /*  39 */ "bodyStmt ::= cdef_stmt SEMICOLON",
 /*  40 */ "bodyStmt ::= assign_stmt SEMICOLON",
 /*  41 */ "bodyStmt ::= funcexpr SEMICOLON",
 /*  42 */ "bodyStmt ::= actionStmt",
 /*  43 */ "bodyStmt ::= if_stmt",
 /*  44 */ "bodyStmt ::= while_stmt",
 /*  45 */ "bodyStmt ::= for_stmt",
 /*  46 */ "bodyStmt ::= foreach_stmt",
 /*  47 */ "bodyStmt ::= continue_stmt SEMICOLON",
 /*  48 */ "bodyStmt ::= break_stmt SEMICOLON",
 /*  49 */ "bodyStmtList ::= error",
 /*  50 */ "bodyStmtList ::= bodyStmt",
 /*  51 */ "bodyStmtList ::= bodyStmtList bodyStmt",
 /*  52 */ "bodyStmtList ::= bodyStmtList error",
 /*  53 */ "numList_nonEmpty ::= NUMBER",
 /*  54 */ "numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER",
 /*  55 */ "nameList_nonEmpty ::= NAME",
 /*  56 */ "nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME",
 /*  57 */ "nameList ::=",
 /*  58 */ "nameList ::= nameList_nonEmpty",
 /*  59 */ "exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET",
 /*  60 */ "expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET",
 /*  61 */ "exprList_nonEmpty ::= expr",
 /*  62 */ "exprList_nonEmpty ::= exprList_nonEmpty COMMA expr",
 /*  63 */ "exprList ::=",
 /*  64 */ "exprList ::= exprList_nonEmpty",
 /*  65 */ "expr ::= NUMBER",
 /*  66 */ "expr ::= KILLS",
 /*  67 */ "expr ::= NAME",
 /*  68 */ "expr ::= expr PERIOD NAME",
 /*  69 */ "expr ::= expr LSQBRACKET expr RSQBRACKET",
 /*  70 */ "fArgs_nonEmpty ::= expr",
 /*  71 */ "fArgs_nonEmpty ::= STRING",
 /*  72 */ "fArgs_nonEmpty ::= NAME ASSIGN expr",
 /*  73 */ "fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArgs_nonEmpty",
 /*  74 */ "fArgs ::=",
 /*  75 */ "fArgs ::= fArgs_nonEmpty",
 /*  76 */ "funcexpr ::= NAME LPAREN fArgs RPAREN",
 /*  77 */ "funcexpr ::= expr LPAREN fArgs RPAREN",
 /*  78 */ "expr ::= funcexpr",
 /*  79 */ "expr ::= LPAREN expr RPAREN",
 /*  80 */ "commaSkippable ::= COMMA",
 /*  81 */ "commaSkippable ::=",
 /*  82 */ "expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET",
 /*  83 */ "expr ::= L2V LPAREN expr RPAREN",
 /*  84 */ "expr ::= MAPSTRING LPAREN STRING RPAREN",
 /*  85 */ "expr ::= UNIT LPAREN STRING RPAREN",
 /*  86 */ "expr ::= SWITCH LPAREN STRING RPAREN",
 /*  87 */ "expr ::= LOCATION LPAREN STRING RPAREN",
 /*  88 */ "expr ::= expr QMARK expr COLON expr",
 /*  89 */ "expr ::= expr PLUS expr",
 /*  90 */ "expr ::= expr MINUS expr",
 /*  91 */ "expr ::= expr MULTIPLY expr",
 /*  92 */ "expr ::= expr DIVIDE expr",
 /*  93 */ "expr ::= expr MOD expr",
 /*  94 */ "expr ::= expr LSHIFT expr",
 /*  95 */ "expr ::= expr RSHIFT expr",
 /*  96 */ "expr ::= expr BITAND expr",
 /*  97 */ "expr ::= expr BITOR expr",
 /*  98 */ "expr ::= expr BITXOR expr",
 /*  99 */ "expr ::= PLUS expr",
 /* 100 */ "expr ::= MINUS expr",
 /* 101 */ "expr ::= BITNOT expr",
 /* 102 */ "expr ::= expr EQ expr",
 /* 103 */ "expr ::= expr NE expr",
 /* 104 */ "expr ::= expr LE expr",
 /* 105 */ "expr ::= expr LT expr",
 /* 106 */ "expr ::= expr GE expr",
 /* 107 */ "expr ::= expr GT expr",
 /* 108 */ "expr ::= expr LAND expr",
 /* 109 */ "expr ::= expr LOR expr",
 /* 110 */ "expr ::= LNOT expr",
 /* 111 */ "vdef_stmt ::= VAR nameList_nonEmpty",
 /* 112 */ "vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 113 */ "vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 114 */ "cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 115 */ "cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 116 */ "lvalue ::= NAME",
 /* 117 */ "lvalue ::= expr LSQBRACKET expr RSQBRACKET",
 /* 118 */ "lvalue ::= expr PERIOD NAME",
 /* 119 */ "lvalueList_nonEmpty ::= lvalue",
 /* 120 */ "lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue",
 /* 121 */ "assign_stmt ::= lvalue ASSIGN expr",
 /* 122 */ "assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty",
 /* 123 */ "assign_stmt ::= INC expr",
 /* 124 */ "assign_stmt ::= expr INC",
 /* 125 */ "assign_stmt ::= DEC expr",
 /* 126 */ "assign_stmt ::= expr DEC",
 /* 127 */ "assign_stmt ::= lvalue IADD expr",
 /* 128 */ "assign_stmt ::= lvalue ISUB expr",
 /* 129 */ "assign_stmt ::= lvalue IMUL expr",
 /* 130 */ "assign_stmt ::= lvalue IDIV expr",
 /* 131 */ "assign_stmt ::= lvalue IMOD expr",
 /* 132 */ "assign_stmt ::= lvalue ILSH expr",
 /* 133 */ "assign_stmt ::= lvalue IRSH expr",
 /* 134 */ "assign_stmt ::= lvalue IBND expr",
 /* 135 */ "assign_stmt ::= lvalue IBOR expr",
 /* 136 */ "assign_stmt ::= lvalue IBXR expr",
 /* 137 */ "if_start ::= IF",
 /* 138 */ "if_header ::= if_start LPAREN expr RPAREN",
 /* 139 */ "if_block ::= if_header stmt",
 /* 140 */ "elif_start ::= ELSE IF",
 /* 141 */ "elif_header ::= elif_start LPAREN expr RPAREN",
 /* 142 */ "if_block ::= if_block elif_header stmt",
 /* 143 */ "else_header ::= ELSE",
 /* 144 */ "if_stmt ::= if_block",
 /* 145 */ "if_stmt ::= if_block else_header stmt",
 /* 146 */ "while_start ::= WHILE",
 /* 147 */ "while_header ::= while_start LPAREN expr RPAREN",
 /* 148 */ "while_stmt ::= while_header stmt",
 /* 149 */ "for_opener ::= FOR LPAREN",
 /* 150 */ "for_init_stmt_nonEmpty ::= vdef_stmt",
 /* 151 */ "for_init_stmt_nonEmpty ::= vdefAssign_stmt",
 /* 152 */ "for_init_stmt_nonEmpty ::= cdef_stmt",
 /* 153 */ "for_init_stmt_nonEmpty ::= assign_stmt",
 /* 154 */ "for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty",
 /* 155 */ "for_init_stmt ::= for_init_stmt_nonEmpty",
 /* 156 */ "for_init_stmt ::=",
 /* 157 */ "for_action_stmt_nonEmpty ::= assign_stmt",
 /* 158 */ "for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty",
 /* 159 */ "for_action_stmt ::=",
 /* 160 */ "for_action_stmt ::= for_action_stmt_nonEmpty",
 /* 161 */ "for_header1 ::= for_opener for_init_stmt SEMICOLON",
 /* 162 */ "for_header2 ::= for_header1 expr SEMICOLON",
 /* 163 */ "for_header ::= for_header2 for_action_stmt RPAREN",
 /* 164 */ "for_stmt ::= for_header stmt",
 /* 165 */ "foreach_opener ::= FOREACH LPAREN",
 /* 166 */ "foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty RPAREN",
 /* 167 */ "foreach_stmt ::= foreach_header stmt",
 /* 168 */ "continue_stmt ::= CONTINUE",
 /* 169 */ "break_stmt ::= BREAK",
 /* 170 */ "return_stmt ::= RETURN exprList",
 /* 171 */ "expr ::= CONDITIONNAME LPAREN fArgs RPAREN",
 /* 172 */ "expr ::= KILLS LPAREN fArgs RPAREN",
 /* 173 */ "actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN SEMICOLON",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    case 76: /* nt */
{
#line 40 "parser\\epparser.lemon"
 delete (yypminor->yy0); 
#line 2102 "parser\\epparser.c"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 77, 1 },
  { 78, 0 },
  { 78, 2 },
  { 79, 2 },
  { 79, 1 },
  { 79, 1 },
  { 79, 1 },
  { 79, 2 },
  { 79, 2 },
  { 79, 2 },
  { 79, 1 },
  { 88, 1 },
  { 88, 3 },
  { 80, 4 },
  { 80, 2 },
  { 89, 5 },
  { 81, 2 },
  { 82, 6 },
  { 92, 3 },
  { 93, 1 },
  { 93, 4 },
  { 95, 5 },
  { 96, 2 },
  { 93, 2 },
  { 83, 3 },
  { 91, 2 },
  { 91, 1 },
  { 91, 2 },
  { 99, 1 },
  { 100, 1 },
  { 87, 2 },
  { 87, 4 },
  { 87, 3 },
  { 87, 5 },
  { 87, 3 },
  { 97, 1 },
  { 97, 1 },
  { 97, 2 },
  { 97, 2 },
  { 97, 2 },
  { 97, 2 },
  { 97, 2 },
  { 97, 1 },
  { 97, 1 },
  { 97, 1 },
  { 97, 1 },
  { 97, 1 },
  { 97, 2 },
  { 97, 2 },
  { 101, 1 },
  { 101, 1 },
  { 101, 2 },
  { 101, 2 },
  { 113, 1 },
  { 113, 3 },
  { 94, 1 },
  { 94, 3 },
  { 90, 0 },
  { 90, 1 },
  { 114, 6 },
  { 115, 6 },
  { 114, 1 },
  { 114, 3 },
  { 116, 0 },
  { 116, 1 },
  { 115, 1 },
  { 115, 1 },
  { 115, 1 },
  { 115, 3 },
  { 115, 4 },
  { 117, 1 },
  { 117, 1 },
  { 117, 3 },
  { 117, 3 },
  { 118, 0 },
  { 118, 1 },
  { 105, 4 },
  { 105, 4 },
  { 115, 1 },
  { 115, 3 },
  { 119, 1 },
  { 119, 0 },
  { 115, 4 },
  { 115, 4 },
  { 115, 4 },
  { 115, 4 },
  { 115, 4 },
  { 115, 4 },
  { 115, 5 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 2 },
  { 115, 2 },
  { 115, 2 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 2 },
  { 84, 2 },
  { 102, 4 },
  { 85, 4 },
  { 103, 4 },
  { 86, 4 },
  { 120, 1 },
  { 120, 4 },
  { 120, 3 },
  { 121, 1 },
  { 121, 3 },
  { 104, 3 },
  { 104, 3 },
  { 104, 2 },
  { 104, 2 },
  { 104, 2 },
  { 104, 2 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 104, 3 },
  { 122, 1 },
  { 123, 4 },
  { 124, 2 },
  { 125, 2 },
  { 126, 4 },
  { 124, 3 },
  { 127, 1 },
  { 107, 1 },
  { 107, 3 },
  { 128, 1 },
  { 129, 4 },
  { 108, 2 },
  { 130, 2 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 1 },
  { 131, 3 },
  { 132, 1 },
  { 132, 0 },
  { 133, 1 },
  { 133, 3 },
  { 134, 0 },
  { 134, 1 },
  { 135, 3 },
  { 136, 3 },
  { 137, 3 },
  { 109, 2 },
  { 138, 2 },
  { 139, 5 },
  { 110, 2 },
  { 111, 1 },
  { 112, 1 },
  { 98, 2 },
  { 115, 4 },
  { 115, 4 },
  { 106, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 10: /* chunk ::= blockStmt */
#line 77 "parser\\epparser.lemon"
{
    throw_error(48993, "Misplaced block statement");
}
#line 2573 "parser\\epparser.c"
        break;
      case 11: /* dottedName ::= NAME */
      case 53: /* numList_nonEmpty ::= NUMBER */ yytestcase(yyruleno==53);
      case 55: /* nameList_nonEmpty ::= NAME */ yytestcase(yyruleno==55);
      case 58: /* nameList ::= nameList_nonEmpty */ yytestcase(yyruleno==58);
      case 61: /* exprList_nonEmpty ::= expr */ yytestcase(yyruleno==61);
      case 64: /* exprList ::= exprList_nonEmpty */ yytestcase(yyruleno==64);
      case 65: /* expr ::= NUMBER */ yytestcase(yyruleno==65);
      case 70: /* fArgs_nonEmpty ::= expr */ yytestcase(yyruleno==70);
      case 71: /* fArgs_nonEmpty ::= STRING */ yytestcase(yyruleno==71);
      case 75: /* fArgs ::= fArgs_nonEmpty */ yytestcase(yyruleno==75);
      case 78: /* expr ::= funcexpr */ yytestcase(yyruleno==78);
      case 119: /* lvalueList_nonEmpty ::= lvalue */ yytestcase(yyruleno==119);
#line 83 "parser\\epparser.lemon"
{ yygotominor.yy0 = yymsp[0].minor.yy0; }
#line 2589 "parser\\epparser.c"
        break;
      case 12: /* dottedName ::= dottedName PERIOD NAME */
#line 84 "parser\\epparser.lemon"
{
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 2598 "parser\\epparser.c"
        break;
      case 13: /* import_chunk ::= IMPORT dottedName AS NAME */
#line 90 "parser\\epparser.lemon"
{
    std::string impPath, impModname;
    impPathProcess(yymsp[-2].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(yymsp[0].minor.yy0->data)) {
        throw_error(6754, "Importing already-declared module " + yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << " as " << yymsp[0].minor.yy0->data << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 2614 "parser\\epparser.c"
        break;
      case 14: /* import_chunk ::= IMPORT dottedName */
#line 103 "parser\\epparser.lemon"
{
    std::string impPath, impModname;
    impPathProcess(yymsp[0].minor.yy0->data, impPath, impModname);

    if(!ps->closure.defModule(impModname)) {
        throw_error(6754, "Importing already-declared module " + impModname, yymsp[0].minor.yy0->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << std::endl;
    delete yymsp[0].minor.yy0;
}
#line 2630 "parser\\epparser.c"
        break;
      case 15: /* fdef_header ::= FUNCTION NAME LPAREN nameList RPAREN */
#line 117 "parser\\epparser.lemon"
{
    // Preprocess yymsp[-3].minor.yy0
    funcNamePreprocess(yymsp[-3].minor.yy0->data);
    if(!ps->closure.defFunction(yymsp[-3].minor.yy0->data)) {
        throw_error(4495, "Duplicate function " + yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    }

    ps->gen << "@EUDFunc" << std::endl;
    ps->gen << "def " << yymsp[-3].minor.yy0->data << "(" << yymsp[-1].minor.yy0->data << "):" << std::endl;
    ps->gen.indent();

    ps->closure.pushScope();
    currentFunction = yymsp[-3].minor.yy0->data;

    if(MAP_DEBUG) {
         ps->gen << "MDBG_PUSHF(\'" << currentFunction << "\', \'" << currentModule << "\')" << std::endl;
    }

    // Register variables.
    commaListIter(yymsp[-1].minor.yy0->data, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-1].minor.yy0->line);
        }
    });

    tmpIndex = 1;
    delete yymsp[-3].minor.yy0;
    delete yymsp[-1].minor.yy0;
}
#line 2663 "parser\\epparser.c"
        break;
      case 16: /* fdef_chunk ::= fdef_header stmt */
#line 147 "parser\\epparser.lemon"
{
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
}
#line 2675 "parser\\epparser.c"
        break;
      case 17: /* fdecl_chunk ::= FUNCTION NAME LPAREN nameList RPAREN SEMICOLON */
#line 156 "parser\\epparser.lemon"
{
    // Preprocess yymsp[-4].minor.yy0
    funcNamePreprocess(yymsp[-4].minor.yy0->data);
    if(!ps->closure.declareFunction(yymsp[-4].minor.yy0->data)) {
        throw_error(72461, "Declaring function with non-function yymsp[-4].minor.yy0 " + yymsp[-4].minor.yy0->data, yymsp[-4].minor.yy0->line);
    }
}
#line 2686 "parser\\epparser.c"
        break;
      case 18: /* object_header ::= OBJECT NAME LBRACKET */
#line 167 "parser\\epparser.lemon"
{
    ps->gen << "class " << yymsp[-1].minor.yy0->data << "(EUDStruct):\n";
    ps->gen.indent();

    funcNamePreprocess(yymsp[-1].minor.yy0->data);
    if(!ps->closure.declareFunction(yymsp[-1].minor.yy0->data)) {
        throw_error(8228, "Declaring object with non-function yymsp[-1].minor.yy0 " + yymsp[-1].minor.yy0->data, yymsp[-1].minor.yy0->line);
    }
    ps->closure.pushScope();

    yygotominor.yy0 = yymsp[-2].minor.yy0;
    yygotominor.yy0->data = yymsp[-1].minor.yy0->data;  // Add object yymsp[-1].minor.yy0
    delete yymsp[-1].minor.yy0;
}
#line 2704 "parser\\epparser.c"
        break;
      case 19: /* object_body ::= object_header */
#line 182 "parser\\epparser.lemon"
{
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 2711 "parser\\epparser.c"
        break;
      case 20: /* object_body ::= object_body VAR nameList_nonEmpty SEMICOLON */
#line 186 "parser\\epparser.lemon"
{
    yygotominor.yy0 = yymsp[-3].minor.yy0;
    yygotominor.yy0->line = yymsp[-1].minor.yy0->line;
    yygotominor.yy0->data += ", " + yymsp[-1].minor.yy0->data;
    delete yymsp[-1].minor.yy0;
}
#line 2721 "parser\\epparser.c"
        break;
      case 21: /* method_header ::= FUNCTION NAME LPAREN nameList RPAREN */
#line 193 "parser\\epparser.lemon"
{
    // Method can't be called directly, so we shouldn't have to register it to closure.
    // duplicate method names should be checked at python-compile time.

    ps->gen << "@EUDMethod" << std::endl;

    ps->closure.pushScope();
    // Register variables.
    std::string _this = "this";  // This may be modified...?
    if(!ps->closure.defConstant(_this)) {
        throw_error(656, ("Redeclaration of variable \'this\'"), yymsp[-1].minor.yy0->line);
    }
    commaListIter(yymsp[-1].minor.yy0->data, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(2656, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-1].minor.yy0->line);
        }
    });

    // Add default argument 'self'
    if (yymsp[-1].minor.yy0->data.size() != 0) {
        ps->gen << "def " << yymsp[-3].minor.yy0->data << "(" << _this << ", " << yymsp[-1].minor.yy0->data << "):" << std::endl;
    } else {
        ps->gen << "def " << yymsp[-3].minor.yy0->data << "(" << _this << "):" << std::endl;
    }
    ps->gen.indent();

    currentFunction = yymsp[-3].minor.yy0->data;

    if(MAP_DEBUG) {
         ps->gen << "MDBG_PUSHF(\'" << currentFunction << "\', \'" << currentModule << "\')" << std::endl;
    }

    tmpIndex = 1;
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
#line 2761 "parser\\epparser.c"
        break;
      case 22: /* method_chunk ::= method_header stmt */
#line 230 "parser\\epparser.lemon"
{
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
    yygotominor.yy0 = yymsp[-1].minor.yy0;
}
#line 2774 "parser\\epparser.c"
        break;
      case 23: /* object_body ::= object_body method_chunk */
#line 240 "parser\\epparser.lemon"
{
    yygotominor.yy0 = yymsp[-1].minor.yy0;
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;
    delete yymsp[0].minor.yy0;
}
#line 2783 "parser\\epparser.c"
        break;
      case 24: /* object_chunk ::= object_body RBRACKET SEMICOLON */
#line 246 "parser\\epparser.lemon"
{
    ps->gen << "_fields_ = [";
    bool isFirst = true;
    commaListIter(yymsp[-2].minor.yy0->data, [&](std::string& varname) {
        if (isFirst) {
            isFirst = false;
            return;
        }
        ps->gen << "'" << varname << "', ";
    });
    ps->gen << "]\n";
    ps->gen.unindent(true);
    ps->closure.popScope();
    delete yymsp[-2].minor.yy0;
}
#line 2802 "parser\\epparser.c"
        break;
      case 25: /* stmt ::= error SEMICOLON */
#line 263 "parser\\epparser.lemon"
{ throw_error(6974, "Error while parsing statement", yymsp[0].minor.yy0->line); delete yymsp[0].minor.yy0; }
#line 2807 "parser\\epparser.c"
        break;
      case 28: /* lbracket ::= LBRACKET */
#line 269 "parser\\epparser.lemon"
{ ps->closure.pushScope(); }
#line 2812 "parser\\epparser.c"
        break;
      case 29: /* rbracket ::= RBRACKET */
#line 270 "parser\\epparser.lemon"
{ ps->closure.popScope(); }
#line 2817 "parser\\epparser.c"
        break;
      case 30: /* blockStmt ::= lbracket RBRACKET */
#line 272 "parser\\epparser.lemon"
{
    ps->closure.popScope();
}
#line 2824 "parser\\epparser.c"
        break;
      case 34: /* blockStmt ::= lbracket error RBRACKET */
#line 278 "parser\\epparser.lemon"
{
    throw_error(6298, "Block not terminated properly.", yymsp[0].minor.yy0->line);
    ps->closure.popScope();
    delete yymsp[0].minor.yy0;
}
#line 2833 "parser\\epparser.c"
        break;
      case 41: /* bodyStmt ::= funcexpr SEMICOLON */
#line 290 "parser\\epparser.lemon"
{ ps->gen << yymsp[-1].minor.yy0->data << std::endl; }
#line 2838 "parser\\epparser.c"
        break;
      case 49: /* bodyStmtList ::= error */
      case 52: /* bodyStmtList ::= bodyStmtList error */ yytestcase(yyruleno==52);
#line 300 "parser\\epparser.lemon"
{
    throw_error(8510, "Incomplete statement");
}
#line 2846 "parser\\epparser.c"
        break;
      case 54: /* numList_nonEmpty ::= numList_nonEmpty COMMA NUMBER */
      case 56: /* nameList_nonEmpty ::= nameList_nonEmpty COMMA NAME */ yytestcase(yyruleno==56);
      case 120: /* lvalueList_nonEmpty ::= lvalueList_nonEmpty COMMA lvalue */ yytestcase(yyruleno==120);
#line 313 "parser\\epparser.lemon"
{ yygotominor.yy0 = commaConcat(yymsp[-2].minor.yy0, yymsp[0].minor.yy0); }
#line 2853 "parser\\epparser.c"
        break;
      case 57: /* nameList ::= */
      case 63: /* exprList ::= */ yytestcase(yyruleno==63);
      case 74: /* fArgs ::= */ yytestcase(yyruleno==74);
#line 316 "parser\\epparser.lemon"
{ yygotominor.yy0 = genEmpty(); }
#line 2860 "parser\\epparser.c"
        break;
      case 59: /* exprList_nonEmpty ::= funcexpr LSQBRACKET LSQBRACKET numList_nonEmpty RSQBRACKET RSQBRACKET */
#line 319 "parser\\epparser.lemon"
{
    yymsp[-2].minor.yy0->data = "_SRET(" + yymsp[-5].minor.yy0->data + ", [" + yymsp[-2].minor.yy0->data + "])";
    delete yymsp[-5].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
#line 2869 "parser\\epparser.c"
        break;
      case 60: /* expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET */
#line 326 "parser\\epparser.lemon"
{
    yymsp[-2].minor.yy0->data = yymsp[-5].minor.yy0->data + "[" + yymsp[-2].minor.yy0->data + "]";
    delete yymsp[-5].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
#line 2878 "parser\\epparser.c"
        break;
      case 62: /* exprList_nonEmpty ::= exprList_nonEmpty COMMA expr */
#line 334 "parser\\epparser.lemon"
{ yygotominor.yy0 = new Token((yymsp[-2].minor.yy0->data) + ", " + (yymsp[0].minor.yy0->data), yymsp[0].minor.yy0); delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 2883 "parser\\epparser.c"
        break;
      case 66: /* expr ::= KILLS */
#line 341 "parser\\epparser.lemon"
{
    yymsp[0].minor.yy0->data = "4";
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 2891 "parser\\epparser.c"
        break;
      case 67: /* expr ::= NAME */
#line 346 "parser\\epparser.lemon"
{
    checkIsRValue(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 2899 "parser\\epparser.c"
        break;
      case 68: /* expr ::= expr PERIOD NAME */
#line 351 "parser\\epparser.lemon"
{
    yymsp[-2].minor.yy0->data = yymsp[-2].minor.yy0->data + "." + yymsp[0].minor.yy0->data;
    delete yymsp[0].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
#line 2908 "parser\\epparser.c"
        break;
      case 69: /* expr ::= expr LSQBRACKET expr RSQBRACKET */
#line 357 "parser\\epparser.lemon"
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "[" + yymsp[-1].minor.yy0->data + "]";
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
#line 2917 "parser\\epparser.c"
        break;
      case 72: /* fArgs_nonEmpty ::= NAME ASSIGN expr */
#line 366 "parser\\epparser.lemon"
{  // Keyword argument
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + "=" + yymsp[0].minor.yy0->data;
    yymsp[0].minor.yy0->type = TOKEN_TEMP;
    yygotominor.yy0 = yymsp[0].minor.yy0;
    delete yymsp[-2].minor.yy0;
}
#line 2927 "parser\\epparser.c"
        break;
      case 73: /* fArgs_nonEmpty ::= fArgs_nonEmpty COMMA fArgs_nonEmpty */
#line 373 "parser\\epparser.lemon"
{
    yymsp[0].minor.yy0->data = yymsp[-2].minor.yy0->data + ", " + yymsp[0].minor.yy0->data;
    yymsp[0].minor.yy0->type = TOKEN_TEMP;
    yygotominor.yy0 = yymsp[0].minor.yy0;
    delete yymsp[-2].minor.yy0;
}
#line 2937 "parser\\epparser.c"
        break;
      case 76: /* funcexpr ::= NAME LPAREN fArgs RPAREN */
#line 383 "parser\\epparser.lemon"
{
    functionCalledInMultipleActions = true;

    // Preprocess yymsp[-3].minor.yy0
    funcNamePreprocess(yymsp[-3].minor.yy0->data);
    checkIsFunction(yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
#line 2950 "parser\\epparser.c"
        break;
      case 77: /* funcexpr ::= expr LPAREN fArgs RPAREN */
#line 393 "parser\\epparser.lemon"
{
    functionCalledInMultipleActions = true;

    // If calling function imported from another module, add f_ prefix to function yymsp[-3].minor.yy0.
    static std::regex prefixedFuncNameRegex("^[a-z][_a-zA-Z0-9]*");
    std::string& nameStr = yymsp[-3].minor.yy0->data;
    if(std::count(nameStr.begin(), nameStr.end(), '.') == 1) {
        size_t p = nameStr.find('.');
        std::string moduleName = nameStr.substr(0, p);
        std::string funcName = nameStr.substr(p + 1);
        if (closure->isModule(moduleName) && std::regex_match(funcName, prefixedFuncNameRegex)) {
            funcNamePreprocess(funcName);
            yymsp[-3].minor.yy0->data = moduleName + '.' + funcName;
        }
    }

    // Preprocess yymsp[-3].minor.yy0
    yymsp[-3].minor.yy0->data += "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
#line 2974 "parser\\epparser.c"
        break;
      case 79: /* expr ::= LPAREN expr RPAREN */
#line 421 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 2982 "parser\\epparser.c"
        break;
      case 82: /* expr ::= LSQBRACKET exprList_nonEmpty commaSkippable RSQBRACKET */
#line 429 "parser\\epparser.lemon"
{
    yymsp[-2].minor.yy0->data = "_ARR(FlattenList([" + yymsp[-2].minor.yy0->data + "]))";
    yygotominor.yy0 = mkTokenTemp(yymsp[-2].minor.yy0);
}
#line 2990 "parser\\epparser.c"
        break;
      case 83: /* expr ::= L2V LPAREN expr RPAREN */
#line 434 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "_L2V(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 2998 "parser\\epparser.c"
        break;
      case 84: /* expr ::= MAPSTRING LPAREN STRING RPAREN */
#line 439 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "GetStringIndex(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 3006 "parser\\epparser.c"
        break;
      case 85: /* expr ::= UNIT LPAREN STRING RPAREN */
#line 444 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "EncodeUnit(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 3014 "parser\\epparser.c"
        break;
      case 86: /* expr ::= SWITCH LPAREN STRING RPAREN */
#line 449 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "EncodeSwitch(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 3022 "parser\\epparser.c"
        break;
      case 87: /* expr ::= LOCATION LPAREN STRING RPAREN */
#line 454 "parser\\epparser.lemon"
{
    yymsp[-1].minor.yy0->data = "GetLocationIndex(" + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
}
#line 3030 "parser\\epparser.c"
        break;
      case 88: /* expr ::= expr QMARK expr COLON expr */
#line 460 "parser\\epparser.lemon"
{
    std::stringstream ss;
    ss << "EUDTernary";
    applyNegativeOptimization(ss, yymsp[-4].minor.yy0);
    ss << "(" << yymsp[-2].minor.yy0->data << ")(" << yymsp[0].minor.yy0->data << ")";
    yymsp[0].minor.yy0->data = ss.str();
    delete yymsp[-4].minor.yy0;
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
}
#line 3044 "parser\\epparser.c"
        break;
      case 89: /* expr ::= expr PLUS expr */
#line 472 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "+",  yymsp[0].minor.yy0); }
#line 3049 "parser\\epparser.c"
        break;
      case 90: /* expr ::= expr MINUS expr */
#line 473 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "-",  yymsp[0].minor.yy0); }
#line 3054 "parser\\epparser.c"
        break;
      case 91: /* expr ::= expr MULTIPLY expr */
#line 474 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "*",  yymsp[0].minor.yy0); }
#line 3059 "parser\\epparser.c"
        break;
      case 92: /* expr ::= expr DIVIDE expr */
#line 475 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "//", yymsp[0].minor.yy0); }
#line 3064 "parser\\epparser.c"
        break;
      case 93: /* expr ::= expr MOD expr */
#line 476 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "%",  yymsp[0].minor.yy0); }
#line 3069 "parser\\epparser.c"
        break;
      case 94: /* expr ::= expr LSHIFT expr */
#line 477 "parser\\epparser.lemon"
{
    yymsp[0].minor.yy0->data = "_LSH(" + yymsp[-2].minor.yy0->data + "," + yymsp[0].minor.yy0->data + ")";
    delete yymsp[-2].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
}
#line 3078 "parser\\epparser.c"
        break;
      case 95: /* expr ::= expr RSHIFT expr */
#line 482 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">>", yymsp[0].minor.yy0); }
#line 3083 "parser\\epparser.c"
        break;
      case 96: /* expr ::= expr BITAND expr */
#line 483 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "&",  yymsp[0].minor.yy0); }
#line 3088 "parser\\epparser.c"
        break;
      case 97: /* expr ::= expr BITOR expr */
#line 484 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "|",  yymsp[0].minor.yy0); }
#line 3093 "parser\\epparser.c"
        break;
      case 98: /* expr ::= expr BITXOR expr */
#line 485 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "^",  yymsp[0].minor.yy0); }
#line 3098 "parser\\epparser.c"
        break;
      case 99: /* expr ::= PLUS expr */
#line 488 "parser\\epparser.lemon"
{ yymsp[0].minor.yy0->data = "+" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
#line 3103 "parser\\epparser.c"
        break;
      case 100: /* expr ::= MINUS expr */
#line 489 "parser\\epparser.lemon"
{ yymsp[0].minor.yy0->data = "-" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
#line 3108 "parser\\epparser.c"
        break;
      case 101: /* expr ::= BITNOT expr */
#line 490 "parser\\epparser.lemon"
{ yymsp[0].minor.yy0->data = "~" + yymsp[0].minor.yy0->data; yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0); }
#line 3113 "parser\\epparser.c"
        break;
      case 102: /* expr ::= expr EQ expr */
#line 494 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "==", yymsp[0].minor.yy0); }
#line 3118 "parser\\epparser.c"
        break;
      case 103: /* expr ::= expr NE expr */
#line 495 "parser\\epparser.lemon"
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    yygotominor.yy0->type = TOKEN_NE;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;
    yygotominor.yy0->data = yymsp[-2].minor.yy0->data + " != " + yymsp[0].minor.yy0->data;
}
#line 3131 "parser\\epparser.c"
        break;
      case 104: /* expr ::= expr LE expr */
#line 505 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "<=", yymsp[0].minor.yy0); }
#line 3136 "parser\\epparser.c"
        break;
      case 105: /* expr ::= expr LT expr */
#line 506 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, "<",  yymsp[0].minor.yy0); }
#line 3141 "parser\\epparser.c"
        break;
      case 106: /* expr ::= expr GE expr */
#line 507 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">=", yymsp[0].minor.yy0); }
#line 3146 "parser\\epparser.c"
        break;
      case 107: /* expr ::= expr GT expr */
#line 508 "parser\\epparser.lemon"
{ yygotominor.yy0 = binopConcat(yymsp[-2].minor.yy0, ">" , yymsp[0].minor.yy0); }
#line 3151 "parser\\epparser.c"
        break;
      case 108: /* expr ::= expr LAND expr */
#line 511 "parser\\epparser.lemon"
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yygotominor.yy0->type = TOKEN_LAND;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCAnd()";
    shortCircuitCondListGetter(ss, yygotominor.yy0, TOKEN_LAND);
    ss << "()";
    yygotominor.yy0->data = ss.str();
}
#line 3170 "parser\\epparser.c"
        break;
      case 109: /* expr ::= expr LOR expr */
#line 528 "parser\\epparser.lemon"
{
    yygotominor.yy0 = genEmpty();
    yygotominor.yy0->line = yymsp[0].minor.yy0->line;

    // Generate data!
    yygotominor.yy0->type = TOKEN_LOR;
    yygotominor.yy0->subToken[0] = yymsp[-2].minor.yy0;
    yygotominor.yy0->subToken[1] = yymsp[0].minor.yy0;

    std::stringstream ss;
    ss << "EUDSCOr()";
    shortCircuitCondListGetter(ss, yygotominor.yy0, TOKEN_LOR);
    ss << "()";
    yygotominor.yy0->data = ss.str();
}
#line 3189 "parser\\epparser.c"
        break;
      case 110: /* expr ::= LNOT expr */
#line 544 "parser\\epparser.lemon"
{
    if(yymsp[0].minor.yy0->type == TOKEN_LNOT) {
        yygotominor.yy0 = yymsp[0].minor.yy0->subToken[0];
        yymsp[0].minor.yy0->subToken[0] = nullptr;
        delete yymsp[0].minor.yy0;
    }
    else {
        yygotominor.yy0 = genEmpty();
        yygotominor.yy0->line = yymsp[0].minor.yy0->line;
        yygotominor.yy0->type = TOKEN_LNOT;
        yygotominor.yy0->data = "EUDNot(" + yymsp[0].minor.yy0->data + ")";
        yygotominor.yy0->subToken[0] = yymsp[0].minor.yy0;
    }
}
#line 3207 "parser\\epparser.c"
        break;
      case 111: /* vdef_stmt ::= VAR nameList_nonEmpty */
#line 561 "parser\\epparser.lemon"
{
    std::string& s = yymsp[0].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"), yymsp[0].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
    }
    else {
        ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    }

    delete yymsp[0].minor.yy0;
}
#line 3231 "parser\\epparser.c"
        break;
      case 112: /* vdefAssign_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
#line 582 "parser\\epparser.lemon"
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
        ps->gen << s << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    }
    else {
        ps->gen << s << " = _MVAR([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3256 "parser\\epparser.c"
        break;
      case 113: /* vdefAssign_global_stmt ::= VAR nameList_nonEmpty ASSIGN exprList_nonEmpty */
#line 604 "parser\\epparser.lemon"
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });

    ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    ps->gen << "_IGVA([" << s << "], lambda: [" << yymsp[0].minor.yy0->data << "])" << std::endl;

    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3276 "parser\\epparser.c"
        break;
      case 114: /* cdef_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
#line 621 "parser\\epparser.lemon"
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = " << yymsp[0].minor.yy0->data << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable([" << yymsp[0].minor.yy0->data << "])" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3298 "parser\\epparser.c"
        break;
      case 115: /* cdef_global_stmt ::= CONST nameList_nonEmpty ASSIGN exprList_nonEmpty */
#line 640 "parser\\epparser.lemon"
{
    std::string& s = yymsp[-2].minor.yy0->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), yymsp[-2].minor.yy0->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = _CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], 1)[0]" << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable(_CGFW(lambda: [" << yymsp[0].minor.yy0->data << "], " << nameCount << "))" << std::endl;
    }
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3320 "parser\\epparser.c"
        break;
      case 116: /* lvalue ::= NAME */
#line 660 "parser\\epparser.lemon"
{
    checkIsVariable(yymsp[0].minor.yy0->data, yymsp[0].minor.yy0->line);
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 3328 "parser\\epparser.c"
        break;
      case 117: /* lvalue ::= expr LSQBRACKET expr RSQBRACKET */
#line 665 "parser\\epparser.lemon"
{
    checkIsConstant(yymsp[-3].minor.yy0->data, yymsp[-3].minor.yy0->line);
    yymsp[-1].minor.yy0->data = "_ARRW(" + yymsp[-3].minor.yy0->data + ", " + yymsp[-1].minor.yy0->data + ")";
    yygotominor.yy0 = mkTokenTemp(yymsp[-1].minor.yy0);
    delete yymsp[-3].minor.yy0;
}
#line 3338 "parser\\epparser.c"
        break;
      case 118: /* lvalue ::= expr PERIOD NAME */
#line 672 "parser\\epparser.lemon"
{
    checkIsConstant(yymsp[-2].minor.yy0->data, yymsp[-2].minor.yy0->line);
    yymsp[0].minor.yy0->data = "_ATTW(" + yymsp[-2].minor.yy0->data + ", '" + yymsp[0].minor.yy0->data + "')";
    yygotominor.yy0 = mkTokenTemp(yymsp[0].minor.yy0);
    delete yymsp[-2].minor.yy0;
}
#line 3348 "parser\\epparser.c"
        break;
      case 121: /* assign_stmt ::= lvalue ASSIGN expr */
#line 682 "parser\\epparser.lemon"
{
    ps->gen << yymsp[-2].minor.yy0->data << " << (" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3356 "parser\\epparser.c"
        break;
      case 122: /* assign_stmt ::= lvalueList_nonEmpty ASSIGN exprList_nonEmpty */
#line 687 "parser\\epparser.lemon"
{
    ps->gen << "_SV([" << yymsp[-2].minor.yy0->data << "], [" << yymsp[0].minor.yy0->data << "])" << std::endl;
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 3364 "parser\\epparser.c"
        break;
      case 123: /* assign_stmt ::= INC expr */
#line 695 "parser\\epparser.lemon"
{ ps->gen << yymsp[0].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[0].minor.yy0; }
#line 3369 "parser\\epparser.c"
        break;
      case 124: /* assign_stmt ::= expr INC */
#line 696 "parser\\epparser.lemon"
{ ps->gen << yymsp[-1].minor.yy0->data << ".__iadd__(1)" << std::endl; delete yymsp[-1].minor.yy0; }
#line 3374 "parser\\epparser.c"
        break;
      case 125: /* assign_stmt ::= DEC expr */
#line 697 "parser\\epparser.lemon"
{ ps->gen << yymsp[0].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[0].minor.yy0; }
#line 3379 "parser\\epparser.c"
        break;
      case 126: /* assign_stmt ::= expr DEC */
#line 698 "parser\\epparser.lemon"
{ ps->gen << yymsp[-1].minor.yy0->data << ".__isub__(1)" << std::endl; delete yymsp[-1].minor.yy0; }
#line 3384 "parser\\epparser.c"
        break;
      case 127: /* assign_stmt ::= lvalue IADD expr */
#line 699 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__iadd__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3389 "parser\\epparser.c"
        break;
      case 128: /* assign_stmt ::= lvalue ISUB expr */
#line 700 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__isub__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3394 "parser\\epparser.c"
        break;
      case 129: /* assign_stmt ::= lvalue IMUL expr */
#line 701 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__imul__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3399 "parser\\epparser.c"
        break;
      case 130: /* assign_stmt ::= lvalue IDIV expr */
#line 702 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ifloordiv__("  << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3404 "parser\\epparser.c"
        break;
      case 131: /* assign_stmt ::= lvalue IMOD expr */
#line 703 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__imod__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3409 "parser\\epparser.c"
        break;
      case 132: /* assign_stmt ::= lvalue ILSH expr */
#line 704 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ilshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3414 "parser\\epparser.c"
        break;
      case 133: /* assign_stmt ::= lvalue IRSH expr */
#line 705 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__irshift__("    << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3419 "parser\\epparser.c"
        break;
      case 134: /* assign_stmt ::= lvalue IBND expr */
#line 706 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__iand__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3424 "parser\\epparser.c"
        break;
      case 135: /* assign_stmt ::= lvalue IBOR expr */
#line 707 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ior__("        << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3429 "parser\\epparser.c"
        break;
      case 136: /* assign_stmt ::= lvalue IBXR expr */
#line 708 "parser\\epparser.lemon"
{ ps->gen << yymsp[-2].minor.yy0->data << ".__ixor__("       << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 3434 "parser\\epparser.c"
        break;
      case 137: /* if_start ::= IF */
#line 711 "parser\\epparser.lemon"
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDIf()" << std::endl;
}
#line 3442 "parser\\epparser.c"
        break;
      case 138: /* if_header ::= if_start LPAREN expr RPAREN */
      case 141: /* elif_header ::= elif_start LPAREN expr RPAREN */ yytestcase(yyruleno==141);
      case 147: /* while_header ::= while_start LPAREN expr RPAREN */ yytestcase(yyruleno==147);
#line 716 "parser\\epparser.lemon"
{
    writeCsOpener(*pGen, yymsp[-3].minor.yy0, yymsp[-1].minor.yy0);
    ps->gen.indent();
    delete yymsp[-3].minor.yy0; delete yymsp[-1].minor.yy0;
}
#line 3453 "parser\\epparser.c"
        break;
      case 140: /* elif_start ::= ELSE IF */
#line 724 "parser\\epparser.lemon"
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen.unindent(false);
    ps->gen << yygotominor.yy0->data << " = EUDElseIf()" << std::endl;
}
#line 3462 "parser\\epparser.c"
        break;
      case 143: /* else_header ::= ELSE */
#line 738 "parser\\epparser.lemon"
{
    ps->gen.unindent(false);
    ps->gen << "if EUDElse()():" << std::endl;
    ps->gen.indent();
}
#line 3471 "parser\\epparser.c"
        break;
      case 144: /* if_stmt ::= if_block */
      case 145: /* if_stmt ::= if_block else_header stmt */ yytestcase(yyruleno==145);
#line 744 "parser\\epparser.lemon"
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
}
#line 3480 "parser\\epparser.c"
        break;
      case 146: /* while_start ::= WHILE */
#line 756 "parser\\epparser.lemon"
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
#line 3489 "parser\\epparser.c"
        break;
      case 148: /* while_stmt ::= while_header stmt */
#line 768 "parser\\epparser.lemon"
{
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
}
#line 3497 "parser\\epparser.c"
        break;
      case 149: /* for_opener ::= FOR LPAREN */
      case 165: /* foreach_opener ::= FOREACH LPAREN */ yytestcase(yyruleno==165);
#line 774 "parser\\epparser.lemon"
{
    ps->closure.pushScope();
}
#line 3505 "parser\\epparser.c"
        break;
      case 161: /* for_header1 ::= for_opener for_init_stmt SEMICOLON */
#line 792 "parser\\epparser.lemon"
{
    // opening for expr
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    ps->gen << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
#line 3515 "parser\\epparser.c"
        break;
      case 162: /* for_header2 ::= for_header1 expr SEMICOLON */
#line 799 "parser\\epparser.lemon"
{
    writeCsOpener(*pGen, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0);
    ps->gen.indent();
    delete yymsp[-2].minor.yy0; delete yymsp[-1].minor.yy0;

    // Opening for assign_statement
    yygotominor.yy0 = genTemp(yymsp[-1].minor.yy0);
    ps->gen << "def " << yygotominor.yy0->data <<"():" << std::endl;
    ps->gen.indent();
}
#line 3529 "parser\\epparser.c"
        break;
      case 163: /* for_header ::= for_header2 for_action_stmt RPAREN */
#line 810 "parser\\epparser.lemon"
{
    yygotominor.yy0 = yymsp[-2].minor.yy0;
    ps->gen.unindent(false);
}
#line 3537 "parser\\epparser.c"
        break;
      case 164: /* for_stmt ::= for_header stmt */
#line 815 "parser\\epparser.lemon"
{
    ps->gen << "EUDSetContinuePoint()" << std::endl;
    ps->gen << yymsp[-1].minor.yy0->data << "()" << std::endl;
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
    ps->closure.popScope();
}
#line 3548 "parser\\epparser.c"
        break;
      case 166: /* foreach_header ::= foreach_opener nameList_nonEmpty COLON exprList_nonEmpty RPAREN */
#line 830 "parser\\epparser.lemon"
{
    commaListIter(yymsp[-3].minor.yy0->data, [&](std::string& s) {
        ps->closure.defVariable(s);
    });
    ps->gen << "for " << yymsp[-3].minor.yy0->data << " in " << yymsp[-1].minor.yy0->data << ":" << std::endl;
    ps->gen.indent();
}
#line 3559 "parser\\epparser.c"
        break;
      case 167: /* foreach_stmt ::= foreach_header stmt */
#line 838 "parser\\epparser.lemon"
{
    ps->gen.unindent(true);
    ps->closure.popScope();
}
#line 3567 "parser\\epparser.c"
        break;
      case 168: /* continue_stmt ::= CONTINUE */
#line 846 "parser\\epparser.lemon"
{
    ps->gen << "EUDContinue()" << std::endl;
}
#line 3574 "parser\\epparser.c"
        break;
      case 169: /* break_stmt ::= BREAK */
#line 850 "parser\\epparser.lemon"
{
    ps->gen << "EUDBreak()" << std::endl;
}
#line 3581 "parser\\epparser.c"
        break;
      case 170: /* return_stmt ::= RETURN exprList */
#line 857 "parser\\epparser.lemon"
{
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen << "EUDReturn(" << yymsp[0].minor.yy0->data << ")" << std::endl;
    delete yymsp[0].minor.yy0;
}
#line 3592 "parser\\epparser.c"
        break;
      case 171: /* expr ::= CONDITIONNAME LPAREN fArgs RPAREN */
      case 172: /* expr ::= KILLS LPAREN fArgs RPAREN */ yytestcase(yyruleno==172);
#line 868 "parser\\epparser.lemon"
{
    yymsp[-3].minor.yy0->data = yymsp[-3].minor.yy0->data + "(" + yymsp[-1].minor.yy0->data + ")";
    delete yymsp[-1].minor.yy0;
    yygotominor.yy0 = mkTokenTemp(yymsp[-3].minor.yy0);
}
#line 3602 "parser\\epparser.c"
        break;
      case 173: /* actionStmt ::= ACTIONNAME LPAREN fArgs RPAREN SEMICOLON */
#line 880 "parser\\epparser.lemon"
{
    ps->gen << "DoActions(" << yymsp[-4].minor.yy0->data << "(" << yymsp[-2].minor.yy0->data << "))" << std::endl;
    delete yymsp[-4].minor.yy0; delete yymsp[-2].minor.yy0;
}
#line 3610 "parser\\epparser.c"
        break;
      default:
      /* (0) program ::= chunks */ yytestcase(yyruleno==0);
      /* (1) chunks ::= */ yytestcase(yyruleno==1);
      /* (2) chunks ::= chunks chunk */ yytestcase(yyruleno==2);
      /* (3) chunk ::= import_chunk SEMICOLON */ yytestcase(yyruleno==3);
      /* (4) chunk ::= fdef_chunk */ yytestcase(yyruleno==4);
      /* (5) chunk ::= fdecl_chunk */ yytestcase(yyruleno==5);
      /* (6) chunk ::= object_chunk */ yytestcase(yyruleno==6);
      /* (7) chunk ::= vdef_stmt SEMICOLON */ yytestcase(yyruleno==7);
      /* (8) chunk ::= vdefAssign_global_stmt SEMICOLON */ yytestcase(yyruleno==8);
      /* (9) chunk ::= cdef_global_stmt SEMICOLON */ yytestcase(yyruleno==9);
      /* (26) stmt ::= bodyStmt */ yytestcase(yyruleno==26);
      /* (27) stmt ::= return_stmt SEMICOLON */ yytestcase(yyruleno==27);
      /* (31) blockStmt ::= lbracket return_stmt SEMICOLON rbracket */ yytestcase(yyruleno==31);
      /* (32) blockStmt ::= lbracket bodyStmtList rbracket */ yytestcase(yyruleno==32);
      /* (33) blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket */ yytestcase(yyruleno==33);
      /* (35) bodyStmt ::= blockStmt */ yytestcase(yyruleno==35);
      /* (36) bodyStmt ::= SEMICOLON */ yytestcase(yyruleno==36);
      /* (37) bodyStmt ::= vdef_stmt SEMICOLON */ yytestcase(yyruleno==37);
      /* (38) bodyStmt ::= vdefAssign_stmt SEMICOLON */ yytestcase(yyruleno==38);
      /* (39) bodyStmt ::= cdef_stmt SEMICOLON */ yytestcase(yyruleno==39);
      /* (40) bodyStmt ::= assign_stmt SEMICOLON */ yytestcase(yyruleno==40);
      /* (42) bodyStmt ::= actionStmt */ yytestcase(yyruleno==42);
      /* (43) bodyStmt ::= if_stmt */ yytestcase(yyruleno==43);
      /* (44) bodyStmt ::= while_stmt */ yytestcase(yyruleno==44);
      /* (45) bodyStmt ::= for_stmt */ yytestcase(yyruleno==45);
      /* (46) bodyStmt ::= foreach_stmt */ yytestcase(yyruleno==46);
      /* (47) bodyStmt ::= continue_stmt SEMICOLON */ yytestcase(yyruleno==47);
      /* (48) bodyStmt ::= break_stmt SEMICOLON */ yytestcase(yyruleno==48);
      /* (50) bodyStmtList ::= bodyStmt */ yytestcase(yyruleno==50);
      /* (51) bodyStmtList ::= bodyStmtList bodyStmt */ yytestcase(yyruleno==51);
      /* (80) commaSkippable ::= COMMA */ yytestcase(yyruleno==80);
      /* (81) commaSkippable ::= */ yytestcase(yyruleno==81);
      /* (139) if_block ::= if_header stmt */ yytestcase(yyruleno==139);
      /* (142) if_block ::= if_block elif_header stmt */ yytestcase(yyruleno==142);
      /* (150) for_init_stmt_nonEmpty ::= vdef_stmt */ yytestcase(yyruleno==150);
      /* (151) for_init_stmt_nonEmpty ::= vdefAssign_stmt */ yytestcase(yyruleno==151);
      /* (152) for_init_stmt_nonEmpty ::= cdef_stmt */ yytestcase(yyruleno==152);
      /* (153) for_init_stmt_nonEmpty ::= assign_stmt */ yytestcase(yyruleno==153);
      /* (154) for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty */ yytestcase(yyruleno==154);
      /* (155) for_init_stmt ::= for_init_stmt_nonEmpty */ yytestcase(yyruleno==155);
      /* (156) for_init_stmt ::= */ yytestcase(yyruleno==156);
      /* (157) for_action_stmt_nonEmpty ::= assign_stmt */ yytestcase(yyruleno==157);
      /* (158) for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty */ yytestcase(yyruleno==158);
      /* (159) for_action_stmt ::= */ yytestcase(yyruleno==159);
      /* (160) for_action_stmt ::= for_action_stmt_nonEmpty */ yytestcase(yyruleno==160);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
#line 32 "parser\\epparser.lemon"

    throw_error(-1, "Unrecoverable error");
#line 3706 "parser\\epparser.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
#line 888 "parser\\epparser.lemon"


PyGenerator* pGen;
ClosureManager* closure;

std::string ParseString(const std::string& fname, const std::string& code, bool addComment)
{
    // Module name from fname
    // last \/ ~ first .
    auto lpos = fname.find_last_of("\\/");
    if(lpos == std::string::npos) lpos = 0;
    else lpos++;
    auto rpos = fname.find_first_of(".", lpos);
    if(rpos == std::string::npos) rpos = fname.size();
    currentModule = fname.substr(lpos, rpos - lpos);

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(stdout, "--");
#endif

    // Main code
    Tokenizer tok(code);
    void* pParser = ParseAlloc (malloc);
    ParserStruct ps;
    Token* token;
    currentTokenizingLine = 0;
    pGen = &ps.gen;
    closure = &ps.closure;
    functionCalledInMultipleActions = false;

    if(PARSER_DEBUG) std::cout << "Parsing string [[[\n" << code.c_str() << "\n]]]\n";
    if(MAP_DEBUG) {
        ps.gen <<
            "try:\n"
            "   MDBG_LOG = GetEUDNamespace()['MDBG_LOG']\n"
            "   MDBG_PUSHF = GetEUDNamespace()['MDBG_PUSHF']\n"
            "   MDBG_POPF = GetEUDNamespace()['MDBG_POPF']\n"
            "except KeyError:\n"
            "    mdbg_dbepd = EPD(Db(b'0123456789ABCDEFFEDCBA9876543210' + bytes(32 * 2048)))\n"
            "    mdbg_dbc = EUDVariable()\n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_LOG(line):\n"
            "        lIdf = b2i4(u2b('%4d' % line))\n"
            "        DoActions(SetMemoryEPD(mdbg_dbepd + 3 + mdbg_dbc, SetTo, lIdf))\n"
            "    \n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_PUSHF(f_name, m_name):\n"
            "        global mdbg_dbc\n"
            "        data = ((u2b(m_name) + bytes(12))[:12] + b'   0' + (u2b(f_name) + bytes(16))[:16])\n"
            "        mdbg_dbc += 8\n"
            "        DoActions([SetMemoryEPD(mdbg_dbepd + i + mdbg_dbc, SetTo, b2i4(data, i * 4)) for i in range(8)])\n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_POPF():\n"
            "        global mdbg_dbc\n"
            "        DoActions([SetMemoryEPD(mdbg_dbepd + i + mdbg_dbc, SetTo, 0) for i in range(8)])\n"
            "        mdbg_dbc -= 8\n"
            "\n";
    }

    tmpIndex = 1;
    resetParserErrorNum();
    while ((token = tok.getToken()) != nullptr) {
        if (currentTokenizingLine != tok.getCurrentLine()) {
            if(addComment) {
                currentTokenizingLine = tok.getCurrentLine();
                ps.gen << "# (Line " << currentTokenizingLine << ") " << trim(tok.getCurrentLineString()) << std::endl;
                if(MAP_DEBUG && !currentFunction.empty()) {
                    ps.gen << "MDBG_LOG(" << currentTokenizingLine << ")" << std::endl;
                }
            }
            if(PARSER_DEBUG) printf("# reading line %s\n", tok.getCurrentLineString().c_str());
        }
        if (tokenTypeConv(token)) {
            Parse (pParser, token->type, token, &ps);
        }
        else {
            throw_error(8104, "Invalid token");
        }
    }
    Parse (pParser, 0, nullptr, &ps);
    ParseFree(pParser, free );

    std::string ret = iwCollapse(ps.gen.str());
    if(getParseErrorNum() > 0) {
        ret += "\nraise RuntimeError('Compile error')\n";
    }

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(NULL, "--");
#endif

    return ret;
}
#line 4008 "parser\\epparser.c"
