/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 1 "parser/epparser.lemon"

#include <stdio.h>
#include <assert.h>
#include <string>
#include <iostream>
#include <sstream>
#include "epparser.h"
#include "pygen.h"
#include "tokenAdapter.h"
#include "parserUtilities.h"
#line 19 "parser/epparser.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 84
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE Token*
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  int yy167;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL  PyGenerator* pGen ;
#define ParseARG_PDECL , PyGenerator* pGen 
#define ParseARG_FETCH  PyGenerator* pGen  = yypParser->pGen 
#define ParseARG_STORE yypParser->pGen  = pGen 
#define YYNSTATE 176
#define YYNRULE 87
#define YYERRORSYMBOL 48
#define YYERRSYMDT yy167
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   153,  140,  110,  113,  178,  141,  177,   48,  121,  170,
 /*    10 */    71,   69,   95,   98,   94,   93,    2,  100,   83,  167,
 /*    20 */     5,   89,    6,  160,    7,   88,    4,   87,   86,   85,
 /*    30 */   154,   12,   15,   84,  178,  141,  177,   48,  121,  171,
 /*    40 */    71,   69,   95,   98,   94,   93,  137,   91,   83,  167,
 /*    50 */     5,   89,    6,  160,    7,   88,    4,   87,   86,   85,
 /*    60 */   154,  107,  159,   84,  159,  141,  172,   48,  121,  165,
 /*    70 */    71,   69,   95,   98,   94,   93,  105,  135,   83,  167,
 /*    80 */     5,   89,    6,  160,    7,   88,    4,   87,   86,   85,
 /*    90 */   154,  213,  213,   84,  108,  141,  173,   48,  121,  123,
 /*   100 */    71,   69,   95,   98,   94,   93,   19,   97,   83,  167,
 /*   110 */     5,   89,    6,  160,    7,   88,    4,   87,   86,   85,
 /*   120 */   154,  213,   40,   84,   75,  141,   81,   48,  121,  134,
 /*   130 */    71,   69,   95,   98,   94,   93,   13,   92,   83,  167,
 /*   140 */     5,   89,    6,  160,    7,   88,    4,   87,   86,   85,
 /*   150 */   154,   12,   15,   84,  103,  141,   53,   48,  121,  229,
 /*   160 */    71,   69,   95,   98,   94,   93,  133,   70,   83,  167,
 /*   170 */     5,   89,    6,  160,    7,   88,    4,   87,   86,   85,
 /*   180 */   154,  104,   40,   84,  163,  141,  144,   48,  121,  236,
 /*   190 */    71,   69,   95,   98,   94,   93,  147,  102,   83,  167,
 /*   200 */     5,   89,    6,  160,    7,   88,    4,   87,   86,   85,
 /*   210 */   152,  110,  113,   84,   51,  189,  149,  189,  189,   48,
 /*   220 */   115,  189,  189,  189,  189,  189,  189,  189,  189,  189,
 /*   230 */   189,  189,  189,  189,  189,  189,  189,  159,   17,   48,
 /*   240 */   101,  138,  264,    8,  174,   40,  188,  189,  188,  188,
 /*   250 */    43,  189,  188,  188,  188,  188,  188,  188,  188,  188,
 /*   260 */   188,  188,  188,  188,  188,  188,  188,  188,   48,  101,
 /*   270 */   136,   48,  101,  129,  142,  188,  157,  187,  188,  187,
 /*   280 */   187,   76,  188,  187,  187,  187,  187,  187,  187,  187,
 /*   290 */   187,  187,  187,  187,  187,  187,  187,  187,  187,  180,
 /*   300 */   180,  179,  179,   48,  101,  125,  187,  165,  186,  187,
 /*   310 */   186,  186,  148,  187,  186,  186,  186,  186,  186,  186,
 /*   320 */   186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
 /*   330 */   171,  180,   47,  179,  175,  180,  150,  179,   14,    9,
 /*   340 */   186,  180,   75,  179,  186,   74,  194,  169,  194,  194,
 /*   350 */    48,  120,  194,  194,  194,  194,  194,  194,  194,  194,
 /*   360 */   194,  194,  194,  194,  194,  194,  194,  194,   42,   34,
 /*   370 */    24,   29,   27,   39,   28,   35,   30,   37,  194,   48,
 /*   380 */   101,  130,  194,   72,  193,  146,  193,  193,   55,  224,
 /*   390 */   193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
 /*   400 */   193,  193,  193,  193,  193,  193,  124,   33,   26,   48,
 /*   410 */   101,  128,  139,   41,   54,   49,  193,  143,  110,  113,
 /*   420 */   193,   25,  192,   45,  192,  192,   77,  265,  192,  192,
 /*   430 */   192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
 /*   440 */   192,   35,   30,   37,  265,   33,   26,  261,  176,   48,
 /*   450 */   117,   41,   54,   49,  192,  145,  110,  113,  192,   25,
 /*   460 */   190,  265,  190,  190,   48,   59,  190,  190,  190,  190,
 /*   470 */   190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
 /*   480 */   190,  190,  265,  261,   44,  151,  110,  113,   48,  116,
 /*   490 */   210,  210,  190,  261,  162,  259,  190,  181,  182,   40,
 /*   500 */   182,  182,  211,   15,  182,  182,  182,  182,  182,  182,
 /*   510 */   182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
 /*   520 */   210,  265,  157,   36,  159,   18,   48,   62,  159,  181,
 /*   530 */   182,  259,  211,  181,  182,   78,  185,  157,  185,  185,
 /*   540 */   265,  259,  185,  185,  185,  185,  185,  185,  185,  185,
 /*   550 */   185,  185,  185,  185,  185,  185,  185,  185,   99,  265,
 /*   560 */    90,  239,   48,  119,   90,   48,   58,  265,  185,   48,
 /*   570 */    64,  265,  185,   99,  202,   40,  202,  202,  212,  212,
 /*   580 */   202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
 /*   590 */   202,  202,  202,  202,  202,  202,  265,  239,   48,   65,
 /*   600 */    48,  114,   48,   63,   48,  111,  202,  239,  212,  265,
 /*   610 */   202,   80,  200,  265,  200,  200,  265,  265,  200,  200,
 /*   620 */   200,  200,  200,  200,  200,  200,   24,   29,   27,   39,
 /*   630 */    28,   35,   30,   37,   48,   57,   48,   66,   48,   60,
 /*   640 */    48,   56,   48,  112,  200,   48,   61,  265,  200,  265,
 /*   650 */   203,  265,  203,  203,   48,   52,  203,  203,  203,  203,
 /*   660 */   203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
 /*   670 */   203,  203,  265,  265,   48,   67,   48,  122,   48,  118,
 /*   680 */   265,  265,  203,  265,  265,  265,  203,  265,  201,  265,
 /*   690 */   201,  201,  265,  265,  201,  201,  201,  201,  201,  201,
 /*   700 */   201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
 /*   710 */   265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
 /*   720 */   201,  265,  265,  265,  201,  265,  191,  265,  191,  191,
 /*   730 */   265,  265,  191,  191,  191,  191,  191,  191,  191,  191,
 /*   740 */   191,  191,  191,  191,  191,   35,   30,   37,  265,  265,
 /*   750 */   265,  265,  265,  265,  265,  265,  265,  265,  191,  265,
 /*   760 */   265,  265,  191,  265,  199,  265,  199,  199,  265,  265,
 /*   770 */   199,  199,  199,  199,  199,  199,  199,   34,   24,   29,
 /*   780 */    27,   39,   28,   35,   30,   37,  265,  265,  265,  265,
 /*   790 */   265,  265,  265,  265,  265,  265,  199,  265,  265,  265,
 /*   800 */   199,  265,  198,  265,  198,  198,  265,  265,  198,  198,
 /*   810 */   198,  198,  198,  198,  198,  198,  198,   29,   27,   39,
 /*   820 */    28,   35,   30,   37,  265,  265,  265,  265,  265,  265,
 /*   830 */   265,  265,  265,  265,  198,  265,  265,  265,  198,  265,
 /*   840 */   197,  265,  197,  197,  265,  265,  197,  197,  197,  197,
 /*   850 */   197,  197,  197,  197,  197,  197,  197,   39,   28,   35,
 /*   860 */    30,   37,  265,  265,  265,  265,  265,  265,  265,  265,
 /*   870 */   265,  265,  197,  265,  265,  265,  197,  265,  196,  265,
 /*   880 */   196,  196,  265,  265,  196,  196,  196,  196,  196,  196,
 /*   890 */   196,  196,  196,  196,  196,   39,   28,   35,   30,   37,
 /*   900 */   265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
 /*   910 */   196,  265,  265,  265,  196,  265,  195,  265,  195,  195,
 /*   920 */   265,  265,  195,  195,  195,  195,  195,  195,  195,  195,
 /*   930 */   195,  195,  195,  195,  195,  195,  195,  195,  241,  265,
 /*   940 */   265,  265,  265,  265,  265,  265,  265,  265,  195,  265,
 /*   950 */   265,  265,  195,  260,  265,  265,  241,  241,  265,  265,
 /*   960 */   265,  265,  241,  241,  241,  262,  265,  241,  242,  265,
 /*   970 */   241,  265,  265,  265,  241,  241,  241,  241,  241,  241,
 /*   980 */   241,  265,  241,  241,  241,  241,  242,  242,  265,  260,
 /*   990 */   265,  265,  242,  242,  242,  258,  265,  242,  235,  260,
 /*  1000 */   242,  262,  265,  265,  242,  242,  242,  242,  242,  242,
 /*  1010 */   242,  262,  242,  242,  242,  242,  235,  235,  265,  265,
 /*  1020 */   265,  265,  235,  235,  235,  265,  265,  235,  243,  265,
 /*  1030 */   235,  258,  265,  265,  235,  235,  235,  235,  235,  235,
 /*  1040 */   235,  258,  235,  235,  235,  235,  243,  243,  265,  265,
 /*  1050 */   265,  265,  243,  243,  243,  265,  265,  243,  234,  265,
 /*  1060 */   243,  265,  265,  265,  243,  243,  243,  243,  243,  243,
 /*  1070 */   243,  265,  243,  243,  243,  243,  234,  234,  265,  265,
 /*  1080 */   265,  265,  234,  234,  234,  265,  265,  234,  244,  265,
 /*  1090 */   234,  265,  265,  265,  234,  234,  234,  234,  234,  234,
 /*  1100 */   234,  265,  234,  234,  234,  234,  244,  244,  265,  265,
 /*  1110 */   265,  265,  244,  244,  244,  265,  265,  244,  250,  265,
 /*  1120 */   244,  265,  265,  265,  244,  244,  244,  244,  244,  244,
 /*  1130 */   244,  265,  244,  244,  244,  244,  250,  250,  265,  265,
 /*  1140 */   265,  265,  250,  250,  250,  265,  265,  250,  233,  265,
 /*  1150 */   250,  265,  265,  265,  250,  250,  250,  250,  250,  250,
 /*  1160 */   250,  265,  250,  250,  250,  250,  233,  233,  265,  265,
 /*  1170 */   265,  265,  233,  233,  233,  265,  265,  233,  245,  265,
 /*  1180 */   233,  265,  265,  265,  233,  233,  233,  233,  233,  233,
 /*  1190 */   233,  265,  233,  233,  233,  233,  245,  245,  265,  265,
 /*  1200 */   265,  265,  245,  245,  245,  265,  265,  245,  214,  265,
 /*  1210 */   245,  265,  265,  265,  245,  245,  245,  245,  245,  245,
 /*  1220 */   245,  265,  245,  245,  245,  245,  214,  214,  265,  265,
 /*  1230 */   265,  265,  214,  214,  214,  265,  265,  214,  246,  265,
 /*  1240 */   214,  265,  265,  265,  214,  214,  214,  214,  214,  214,
 /*  1250 */   214,  265,  214,  214,  214,  214,  246,  246,  265,  265,
 /*  1260 */   265,  265,  246,  246,  246,  265,  265,  246,  231,  265,
 /*  1270 */   246,  265,  265,  265,  246,  246,  246,  246,  246,  246,
 /*  1280 */   246,  265,  246,  246,  246,  246,  231,  231,  265,  265,
 /*  1290 */   265,  265,  231,  231,  231,  265,  265,  231,  218,  265,
 /*  1300 */   231,  265,  265,  265,  231,  231,  231,  231,  231,  231,
 /*  1310 */   231,  265,  231,  231,  231,  231,  218,  218,  265,  265,
 /*  1320 */   265,  265,  218,  218,  218,  265,  265,  218,  247,  265,
 /*  1330 */   218,  265,  265,  265,  218,  218,  218,  218,  218,  218,
 /*  1340 */   218,  265,  218,  218,  218,  218,  247,  247,  265,  265,
 /*  1350 */   265,  265,  247,  247,  247,  265,  265,  247,  248,  265,
 /*  1360 */   247,  265,  265,  265,  247,  247,  247,  247,  247,  247,
 /*  1370 */   247,  265,  247,  247,  247,  247,  248,  248,  265,  265,
 /*  1380 */   265,  265,  248,  248,  248,  265,  265,  248,  249,  265,
 /*  1390 */   248,  265,  265,  265,  248,  248,  248,  248,  248,  248,
 /*  1400 */   248,  265,  248,  248,  248,  248,  249,  249,  265,  265,
 /*  1410 */   265,  265,  249,  249,  249,  265,  265,  249,  228,  265,
 /*  1420 */   249,  265,  265,  265,  249,  249,  249,  249,  249,  249,
 /*  1430 */   249,  265,  249,  249,  249,  249,  228,  228,  265,  265,
 /*  1440 */   265,  265,  228,  228,  228,  265,  265,  228,  226,  265,
 /*  1450 */   228,  265,  265,  265,  228,  228,  228,  228,  228,  228,
 /*  1460 */   228,  265,  228,  228,  228,  228,  226,  226,  265,  265,
 /*  1470 */   265,  265,  226,  226,  226,  265,  265,  106,  216,  265,
 /*  1480 */   226,  265,  265,  265,  226,  226,  226,  226,  226,  226,
 /*  1490 */   226,  265,  226,  226,  226,  226,  216,  216,  265,  265,
 /*  1500 */   265,  265,  216,  216,  216,  265,  265,  216,  251,  265,
 /*  1510 */   216,  265,  265,  265,  216,  216,  216,  216,  216,  216,
 /*  1520 */   216,  265,  216,  216,  216,  216,  251,  251,  265,  265,
 /*  1530 */   265,  265,  251,  251,  251,  265,  265,  251,  252,  265,
 /*  1540 */   251,  265,  265,  265,  251,  251,  251,  251,  251,  251,
 /*  1550 */   251,  265,  251,  251,  251,  251,  252,  252,  265,  265,
 /*  1560 */   265,  265,  252,  252,  252,  265,  265,  252,  253,  265,
 /*  1570 */   252,  265,  265,  265,  252,  252,  252,  252,  252,  252,
 /*  1580 */   252,  265,  252,  252,  252,  252,  253,  253,  265,  265,
 /*  1590 */   265,  265,  253,  253,  253,  265,  265,  253,  254,  265,
 /*  1600 */   253,  265,  265,  265,  253,  253,  253,  253,  253,  253,
 /*  1610 */   253,  265,  253,  253,  253,  253,  254,  254,  265,  265,
 /*  1620 */   265,  265,  254,  254,  254,  265,  265,  254,  255,  265,
 /*  1630 */   254,  265,  265,  265,  254,  254,  254,  254,  254,  254,
 /*  1640 */   254,  265,  254,  254,  254,  254,  255,  255,  265,  265,
 /*  1650 */   265,  265,  255,  255,  255,  265,  265,  255,  256,  265,
 /*  1660 */   255,  265,  265,  265,  255,  255,  255,  255,  255,  255,
 /*  1670 */   255,  265,  255,  255,  255,  255,  256,  256,  265,  265,
 /*  1680 */   265,  265,  256,  256,  256,  265,  265,  256,  257,  265,
 /*  1690 */   256,  265,  265,  265,  256,  256,  256,  256,  256,  256,
 /*  1700 */   256,  265,  256,  256,  256,  256,  257,  257,  265,  265,
 /*  1710 */   265,  265,  257,  257,  257,  265,  265,  257,  222,  265,
 /*  1720 */   257,  265,  265,  265,  257,  257,  257,  257,  257,  257,
 /*  1730 */   257,  265,  257,  257,  257,  257,  222,  222,  265,  265,
 /*  1740 */   265,  265,  222,  222,  222,  265,  265,  222,  223,  265,
 /*  1750 */   222,  265,  265,  265,  222,  222,  222,  222,  222,  222,
 /*  1760 */   222,  265,  222,  222,  222,  222,  223,  223,  265,  265,
 /*  1770 */   265,  265,  223,  223,  223,  265,  265,  223,  217,  265,
 /*  1780 */   223,  265,  265,  265,  223,  223,  223,  223,  223,  223,
 /*  1790 */   223,  265,  223,  223,  223,  223,  217,  217,  265,  265,
 /*  1800 */   265,  265,  217,  217,  217,  265,  265,  217,  215,  265,
 /*  1810 */   217,  265,  265,  265,  217,  217,  217,  217,  217,  217,
 /*  1820 */   217,  265,  217,  217,  217,  217,  215,  215,  265,  265,
 /*  1830 */   265,  265,  215,  215,  215,  265,  265,  215,  219,  265,
 /*  1840 */   215,  265,  265,  265,  215,  215,  215,  215,  215,  215,
 /*  1850 */   215,  265,  215,  215,  215,  215,  219,  219,  265,  265,
 /*  1860 */   265,  265,  219,  219,  219,  265,  265,  219,  240,  265,
 /*  1870 */   219,  265,  265,  265,  219,  219,  219,  219,  219,  219,
 /*  1880 */   219,  265,  219,  219,  219,  219,  240,  240,  265,  265,
 /*  1890 */   265,  265,  240,  240,  240,  265,  265,  240,  265,  265,
 /*  1900 */   240,  265,  265,  265,  240,  240,  240,  240,  240,  240,
 /*  1910 */   240,  265,  240,  240,  240,  240,   33,   26,  265,  265,
 /*  1920 */   265,  265,   41,   54,  109,  265,  265,  265,  265,  265,
 /*  1930 */    25,  265,  265,  265,   46,   73,    1,   82,  168,  161,
 /*  1940 */   158,  265,  156,  155,  265,   11,   23,   32,   31,   20,
 /*  1950 */    21,   22,   42,   34,   24,   29,   27,   39,   28,   35,
 /*  1960 */    30,   37,  221,  221,  265,  265,  265,  265,  221,  221,
 /*  1970 */   221,  265,  265,  265,  265,  265,  221,  265,  265,  265,
 /*  1980 */   221,  221,  221,  221,  221,  221,  221,  265,  221,  221,
 /*  1990 */   265,  221,  265,  265,  265,  220,  220,  265,  265,  265,
 /*  2000 */   265,  220,  220,  220,  265,  265,  265,  265,  265,  220,
 /*  2010 */   265,  265,  265,  220,  220,  220,  220,  220,  220,  220,
 /*  2020 */   265,  220,  220,  265,  220,  265,  265,  265,  232,  232,
 /*  2030 */   265,  265,  265,  265,  232,  232,  232,  265,  265,  265,
 /*  2040 */   265,  265,  232,  265,  265,  265,  232,  232,  232,  265,
 /*  2050 */   232,  232,  232,  265,  232,  232,  265,  232,  265,  265,
 /*  2060 */   265,   33,   26,  265,  265,  265,  265,   41,   54,  109,
 /*  2070 */   265,  265,  265,  265,  265,   25,  265,  265,  265,   46,
 /*  2080 */    73,    1,  265,  168,  161,  158,  265,  156,  155,  265,
 /*  2090 */    11,  265,  265,  265,  230,  230,  265,  265,  265,  265,
 /*  2100 */   230,  230,  230,  265,  265,  265,  265,  265,  230,  265,
 /*  2110 */   265,  265,  230,  230,  230,  265,  230,  230,  230,  265,
 /*  2120 */   230,  230,  265,  230,  265,  265,  265,  227,  227,  265,
 /*  2130 */   265,  265,  265,  227,  227,  227,  265,  265,  265,  265,
 /*  2140 */   265,  227,  265,  265,  265,  227,  227,  227,  265,  227,
 /*  2150 */   227,  227,  265,  227,  227,  265,  227,  265,  265,  265,
 /*  2160 */   238,  238,  265,  265,  265,  265,  238,  238,  238,  265,
 /*  2170 */   265,  265,  265,  265,  238,  265,  265,  265,  238,  238,
 /*  2180 */   238,  265,  238,  238,  238,  265,  238,  238,  265,  238,
 /*  2190 */   265,  265,  265,  237,  237,  265,  265,  265,  265,  237,
 /*  2200 */   237,  237,  265,  265,  265,  265,  265,  237,  265,  265,
 /*  2210 */   265,  237,  237,  237,  265,  237,  237,  237,  265,  237,
 /*  2220 */   237,  265,  237,  265,  265,  265,  225,  225,  265,  265,
 /*  2230 */   265,  265,  225,  225,  225,  265,  265,  265,  265,  265,
 /*  2240 */   225,  265,  265,  265,  225,  225,  225,  183,  225,  225,
 /*  2250 */   225,  265,  225,  225,  265,  225,  265,  157,   38,   42,
 /*  2260 */    34,   24,   29,   27,   39,   28,   35,   30,   37,  186,
 /*  2270 */   186,  186,  186,  186,  186,  186,  186,  186,  186,  183,
 /*  2280 */   265,  265,  265,  183,  265,  265,  265,  265,    9,  265,
 /*  2290 */   189,  265,  126,  186,  127,  265,  265,  265,  265,  265,
 /*  2300 */   265,  265,  189,  189,  189,  189,  189,  189,  189,  189,
 /*  2310 */   189,  189,  164,    3,  132,  265,  131,  265,  265,  166,
 /*  2320 */   265,  265,  189,  206,  206,  265,  189,  265,  265,  265,
 /*  2330 */   265,  265,  265,   42,   34,   24,   29,   27,   39,   28,
 /*  2340 */    35,   30,   37,  265,  209,  209,  265,  265,  265,  265,
 /*  2350 */   265,  265,  265,  206,   42,   34,   24,   29,   27,   39,
 /*  2360 */    28,   35,   30,   37,  184,  265,  265,  265,  265,  265,
 /*  2370 */   265,  265,  265,  265,  209,  265,   42,   34,   24,   29,
 /*  2380 */    27,   39,   28,   35,   30,   37,  265,  265,  265,  265,
 /*  2390 */   265,  265,  265,  265,  265,  265,  184,  265,  265,  265,
 /*  2400 */   184,  265,  265,  265,  204,  204,  265,  265,  265,  265,
 /*  2410 */   265,  265,  265,  265,   42,   34,   24,   29,   27,   39,
 /*  2420 */    28,   35,   30,   37,  265,  207,  207,  265,  265,  265,
 /*  2430 */   265,  265,  265,  265,  204,   42,   34,   24,   29,   27,
 /*  2440 */    39,   28,   35,   30,   37,  265,  205,  205,  265,  265,
 /*  2450 */   265,  265,  265,  265,  265,  207,   42,   34,   24,   29,
 /*  2460 */    27,   39,   28,   35,   30,   37,  265,  208,  208,  265,
 /*  2470 */   265,  265,  265,  265,  265,  265,  205,   42,   34,   24,
 /*  2480 */    29,   27,   39,   28,   35,   30,   37,  265,  265,  265,
 /*  2490 */   265,  265,  265,  265,  265,  265,  265,  208,   42,   34,
 /*  2500 */    24,   29,   27,   39,   28,   35,   30,   37,  265,  265,
 /*  2510 */   265,   42,   34,   24,   29,   27,   39,   28,   35,   30,
 /*  2520 */    37,  265,   68,   10,  265,   42,   34,   24,   29,   27,
 /*  2530 */    39,   28,   35,   30,   37,   96,   33,   26,   16,   33,
 /*  2540 */    26,  265,   41,   54,   49,   41,   54,   49,  265,   79,
 /*  2550 */    25,   33,   26,   25,   50,  265,  265,   41,   54,   49,
 /*  2560 */   265,  265,  265,  265,  265,   25,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    48,   54,   55,   56,    1,   53,    1,   55,   56,    1,
 /*    10 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*    20 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*    30 */    48,    3,    4,   81,   31,   53,   31,   55,   56,   31,
 /*    40 */    58,   59,   60,   61,   62,   63,   31,   65,   66,   67,
 /*    50 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*    60 */    48,   33,    1,   81,    1,   53,    1,   55,   56,   26,
 /*    70 */    58,   59,   60,   61,   62,   63,   33,   65,   66,   67,
 /*    80 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*    90 */    48,    3,    4,   81,   33,   53,   31,   55,   56,   26,
 /*   100 */    58,   59,   60,   61,   62,   63,   43,   65,   66,   67,
 /*   110 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*   120 */    48,   33,    1,   81,   37,   53,   39,   55,   56,   53,
 /*   130 */    58,   59,   60,   61,   62,   63,   32,   65,   66,   67,
 /*   140 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*   150 */    48,    3,    4,   81,   33,   53,   31,   55,   56,   32,
 /*   160 */    58,   59,   60,   61,   62,   63,   26,   65,   66,   67,
 /*   170 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*   180 */    48,   33,    1,   81,   26,   53,   52,   55,   56,   32,
 /*   190 */    58,   59,   60,   61,   62,   63,   25,   65,   66,   67,
 /*   200 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*   210 */    54,   55,   56,   81,   33,    1,   53,    3,    4,   55,
 /*   220 */    56,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   230 */    16,   17,   18,   19,   20,   21,   22,    1,    2,   55,
 /*   240 */    56,   57,   50,   51,   30,    1,    1,   33,    3,    4,
 /*   250 */    32,   37,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   260 */    15,   16,   17,   18,   19,   20,   21,   22,   55,   56,
 /*   270 */    57,   55,   56,   57,   25,   30,    1,    1,   33,    3,
 /*   280 */     4,   37,   37,    7,    8,    9,   10,   11,   12,   13,
 /*   290 */    14,   15,   16,   17,   18,   19,   20,   21,   22,    1,
 /*   300 */     2,    1,    2,   55,   56,   57,   30,   26,    1,   33,
 /*   310 */     3,    4,   53,   37,    7,    8,    9,   10,   11,   12,
 /*   320 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*   330 */    31,   33,   30,   33,   30,   37,   53,   37,   32,   32,
 /*   340 */    33,   43,   37,   43,   37,   37,    1,   25,    3,    4,
 /*   350 */    55,   56,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   360 */    15,   16,   17,   18,   19,   20,   21,   22,   13,   14,
 /*   370 */    15,   16,   17,   18,   19,   20,   21,   22,   33,   55,
 /*   380 */    56,   57,   37,   37,    1,   25,    3,    4,   33,   32,
 /*   390 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   400 */    17,   18,   19,   20,   21,   22,   26,   18,   19,   55,
 /*   410 */    56,   57,   26,   24,   25,   26,   33,   54,   55,   56,
 /*   420 */    37,   32,    1,   32,    3,    4,   37,   83,    7,    8,
 /*   430 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   440 */    19,   20,   21,   22,   83,   18,   19,    0,    0,   55,
 /*   450 */    56,   24,   25,   26,   33,   54,   55,   56,   37,   32,
 /*   460 */     1,   83,    3,    4,   55,   56,    7,    8,    9,   10,
 /*   470 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*   480 */    21,   22,   83,   36,   36,   54,   55,   56,   55,   56,
 /*   490 */     3,    4,   33,   46,   46,    0,   37,    1,    1,    1,
 /*   500 */     3,    4,    3,    4,    7,    8,    9,   10,   11,   12,
 /*   510 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*   520 */    33,   83,    1,    2,    1,    2,   55,   56,    1,   33,
 /*   530 */    33,   36,   33,   37,   37,   37,    1,    1,    3,    4,
 /*   540 */    83,   46,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   550 */    15,   16,   17,   18,   19,   20,   21,   22,   37,   83,
 /*   560 */    37,    0,   55,   56,   37,   55,   56,   83,   33,   55,
 /*   570 */    56,   83,   37,   37,    1,    1,    3,    4,    3,    4,
 /*   580 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   590 */    17,   18,   19,   20,   21,   22,   83,   36,   55,   56,
 /*   600 */    55,   56,   55,   56,   55,   56,   33,   46,   33,   83,
 /*   610 */    37,   37,    1,   83,    3,    4,   83,   83,    7,    8,
 /*   620 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   630 */    19,   20,   21,   22,   55,   56,   55,   56,   55,   56,
 /*   640 */    55,   56,   55,   56,   33,   55,   56,   83,   37,   83,
 /*   650 */     1,   83,    3,    4,   55,   56,    7,    8,    9,   10,
 /*   660 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*   670 */    21,   22,   83,   83,   55,   56,   55,   56,   55,   56,
 /*   680 */    83,   83,   33,   83,   83,   83,   37,   83,    1,   83,
 /*   690 */     3,    4,   83,   83,    7,    8,    9,   10,   11,   12,
 /*   700 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*   710 */    83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
 /*   720 */    33,   83,   83,   83,   37,   83,    1,   83,    3,    4,
 /*   730 */    83,   83,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   740 */    15,   16,   17,   18,   19,   20,   21,   22,   83,   83,
 /*   750 */    83,   83,   83,   83,   83,   83,   83,   83,   33,   83,
 /*   760 */    83,   83,   37,   83,    1,   83,    3,    4,   83,   83,
 /*   770 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   780 */    17,   18,   19,   20,   21,   22,   83,   83,   83,   83,
 /*   790 */    83,   83,   83,   83,   83,   83,   33,   83,   83,   83,
 /*   800 */    37,   83,    1,   83,    3,    4,   83,   83,    7,    8,
 /*   810 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   820 */    19,   20,   21,   22,   83,   83,   83,   83,   83,   83,
 /*   830 */    83,   83,   83,   83,   33,   83,   83,   83,   37,   83,
 /*   840 */     1,   83,    3,    4,   83,   83,    7,    8,    9,   10,
 /*   850 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*   860 */    21,   22,   83,   83,   83,   83,   83,   83,   83,   83,
 /*   870 */    83,   83,   33,   83,   83,   83,   37,   83,    1,   83,
 /*   880 */     3,    4,   83,   83,    7,    8,    9,   10,   11,   12,
 /*   890 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
 /*   900 */    83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
 /*   910 */    33,   83,   83,   83,   37,   83,    1,   83,    3,    4,
 /*   920 */    83,   83,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   930 */    15,   16,   17,   18,   19,   20,   21,   22,    0,   83,
 /*   940 */    83,   83,   83,   83,   83,   83,   83,   83,   33,   83,
 /*   950 */    83,   83,   37,    0,   83,   83,   18,   19,   83,   83,
 /*   960 */    83,   83,   24,   25,   26,    0,   83,   29,    0,   83,
 /*   970 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*   980 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   36,
 /*   990 */    83,   83,   24,   25,   26,    0,   83,   29,    0,   46,
 /*  1000 */    32,   36,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1010 */    42,   46,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1020 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1030 */    32,   36,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1040 */    42,   46,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1050 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1060 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1070 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1080 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1090 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1100 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1110 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1120 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1130 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1140 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1150 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1160 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1170 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1180 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1190 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1200 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1210 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1220 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1230 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1240 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1250 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1260 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1270 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1280 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1290 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1300 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1310 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1320 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1330 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1340 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1350 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1360 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1370 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1380 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1390 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1400 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1410 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1420 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1430 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1440 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1450 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1460 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1470 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1480 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1490 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1500 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1510 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1520 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1530 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1540 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1550 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1560 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1570 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1580 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1590 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1600 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1610 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1620 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1630 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1640 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1650 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1660 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1670 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1680 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1690 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1700 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1710 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1720 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1730 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1740 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1750 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1760 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1770 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1780 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1790 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1800 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1810 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1820 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1830 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1840 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1850 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1860 */    83,   83,   24,   25,   26,   83,   83,   29,    0,   83,
 /*  1870 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1880 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1890 */    83,   83,   24,   25,   26,   83,   83,   29,   83,   83,
 /*  1900 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1910 */    42,   83,   44,   45,   46,   47,   18,   19,   83,   83,
 /*  1920 */    83,   83,   24,   25,   26,   83,   83,   83,   83,   83,
 /*  1930 */    32,   83,   83,   83,   36,   37,   38,   39,   40,   41,
 /*  1940 */    42,   83,   44,   45,   83,   47,    7,    8,    9,   10,
 /*  1950 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  1960 */    21,   22,   18,   19,   83,   83,   83,   83,   24,   25,
 /*  1970 */    26,   83,   83,   83,   83,   83,   32,   83,   83,   83,
 /*  1980 */    36,   37,   38,   39,   40,   41,   42,   83,   44,   45,
 /*  1990 */    83,   47,   83,   83,   83,   18,   19,   83,   83,   83,
 /*  2000 */    83,   24,   25,   26,   83,   83,   83,   83,   83,   32,
 /*  2010 */    83,   83,   83,   36,   37,   38,   39,   40,   41,   42,
 /*  2020 */    83,   44,   45,   83,   47,   83,   83,   83,   18,   19,
 /*  2030 */    83,   83,   83,   83,   24,   25,   26,   83,   83,   83,
 /*  2040 */    83,   83,   32,   83,   83,   83,   36,   37,   38,   83,
 /*  2050 */    40,   41,   42,   83,   44,   45,   83,   47,   83,   83,
 /*  2060 */    83,   18,   19,   83,   83,   83,   83,   24,   25,   26,
 /*  2070 */    83,   83,   83,   83,   83,   32,   83,   83,   83,   36,
 /*  2080 */    37,   38,   83,   40,   41,   42,   83,   44,   45,   83,
 /*  2090 */    47,   83,   83,   83,   18,   19,   83,   83,   83,   83,
 /*  2100 */    24,   25,   26,   83,   83,   83,   83,   83,   32,   83,
 /*  2110 */    83,   83,   36,   37,   38,   83,   40,   41,   42,   83,
 /*  2120 */    44,   45,   83,   47,   83,   83,   83,   18,   19,   83,
 /*  2130 */    83,   83,   83,   24,   25,   26,   83,   83,   83,   83,
 /*  2140 */    83,   32,   83,   83,   83,   36,   37,   38,   83,   40,
 /*  2150 */    41,   42,   83,   44,   45,   83,   47,   83,   83,   83,
 /*  2160 */    18,   19,   83,   83,   83,   83,   24,   25,   26,   83,
 /*  2170 */    83,   83,   83,   83,   32,   83,   83,   83,   36,   37,
 /*  2180 */    38,   83,   40,   41,   42,   83,   44,   45,   83,   47,
 /*  2190 */    83,   83,   83,   18,   19,   83,   83,   83,   83,   24,
 /*  2200 */    25,   26,   83,   83,   83,   83,   83,   32,   83,   83,
 /*  2210 */    83,   36,   37,   38,   83,   40,   41,   42,   83,   44,
 /*  2220 */    45,   83,   47,   83,   83,   83,   18,   19,   83,   83,
 /*  2230 */    83,   83,   24,   25,   26,   83,   83,   83,   83,   83,
 /*  2240 */    32,   83,   83,   83,   36,   37,   38,    1,   40,   41,
 /*  2250 */    42,   83,   44,   45,   83,   47,   83,    1,    2,   13,
 /*  2260 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   13,
 /*  2270 */    14,   15,   16,   17,   18,   19,   20,   21,   22,   33,
 /*  2280 */    83,   83,   83,   37,   83,   83,   83,   83,   32,   83,
 /*  2290 */     1,   83,   58,   37,   60,   83,   83,   83,   83,   83,
 /*  2300 */    83,   83,   13,   14,   15,   16,   17,   18,   19,   20,
 /*  2310 */    21,   22,   78,   79,   80,   83,   82,   83,   83,   30,
 /*  2320 */    83,   83,   33,    3,    4,   83,   37,   83,   83,   83,
 /*  2330 */    83,   83,   83,   13,   14,   15,   16,   17,   18,   19,
 /*  2340 */    20,   21,   22,   83,    3,    4,   83,   83,   83,   83,
 /*  2350 */    83,   83,   83,   33,   13,   14,   15,   16,   17,   18,
 /*  2360 */    19,   20,   21,   22,    1,   83,   83,   83,   83,   83,
 /*  2370 */    83,   83,   83,   83,   33,   83,   13,   14,   15,   16,
 /*  2380 */    17,   18,   19,   20,   21,   22,   83,   83,   83,   83,
 /*  2390 */    83,   83,   83,   83,   83,   83,   33,   83,   83,   83,
 /*  2400 */    37,   83,   83,   83,    3,    4,   83,   83,   83,   83,
 /*  2410 */    83,   83,   83,   83,   13,   14,   15,   16,   17,   18,
 /*  2420 */    19,   20,   21,   22,   83,    3,    4,   83,   83,   83,
 /*  2430 */    83,   83,   83,   83,   33,   13,   14,   15,   16,   17,
 /*  2440 */    18,   19,   20,   21,   22,   83,    3,    4,   83,   83,
 /*  2450 */    83,   83,   83,   83,   83,   33,   13,   14,   15,   16,
 /*  2460 */    17,   18,   19,   20,   21,   22,   83,    3,    4,   83,
 /*  2470 */    83,   83,   83,   83,   83,   83,   33,   13,   14,   15,
 /*  2480 */    16,   17,   18,   19,   20,   21,   22,   83,   83,   83,
 /*  2490 */    83,   83,   83,   83,   83,   83,   83,   33,   13,   14,
 /*  2500 */    15,   16,   17,   18,   19,   20,   21,   22,   83,   83,
 /*  2510 */    83,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*  2520 */    22,   83,   37,    5,   83,   13,   14,   15,   16,   17,
 /*  2530 */    18,   19,   20,   21,   22,   37,   18,   19,    5,   18,
 /*  2540 */    19,   83,   24,   25,   26,   24,   25,   26,   83,   37,
 /*  2550 */    32,   18,   19,   32,   33,   83,   83,   24,   25,   26,
 /*  2560 */    83,   83,   83,   83,   83,   32,
};
#define YY_SHIFT_USE_DFLT (-1)
#define YY_SHIFT_MAX 175
static const short yy_shift_ofst[] = {
 /*     0 */   447, 2043, 1898, 2043, 2043, 2043, 2043, 2043,  448, 2521,
 /*    10 */  2533,  389, 2518, 2518, 2518, 2518, 2533,  427,  427,  427,
 /*    20 */   427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
 /*    30 */   427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
 /*    40 */   427,  427,  427,   43,  386,  281,  140,  171,  214,  307,
 /*    50 */   245,  276,  573,  497,  535,  459,  421,  383,  345,  915,
 /*    60 */   877,  839,  801,  763,  611,  687,  649,  725, 1118, 1178,
 /*    70 */  1148, 1088, 1058, 1028,  998,  968,  938, 1868, 1838, 1808,
 /*    80 */  1778, 1748, 1718, 1688, 1658, 1628, 1598, 1568, 1538, 1508,
 /*    90 */  1478, 1448, 1418, 1388, 1358, 1328, 1298, 1268, 1238, 1208,
 /*   100 */  1977, 1939, 1944, 2010, 2076, 2142, 2109, 2208, 2175, 2256,
 /*   110 */  2289, 2422, 2363, 2246, 2320, 2464, 2341, 2401, 2443, 2512,
 /*   120 */  2498, 2485,  355,  298,  300,   28,  495,  953,   88,  148,
 /*   130 */   487,  965,  995,  521,  523,  561,  499,  496,  575,  536,
 /*   140 */   181,  236,    3,  498,   65,  574,    5,    8,   61,  527,
 /*   150 */    63,  121,  244,   87,  305,  308,  346,  380,  391,   73,
 /*   160 */   104,  127,  158,  157,  218,  275,  302,  306,  357,  299,
 /*   170 */   360,  125,  249,   15,  304,  322,
};
#define YY_REDUCE_USE_DFLT (-54)
#define YY_REDUCE_MAX 47
static const short yy_reduce_ofst[] = {
 /*     0 */   192,  -48,  132,   12,  102,  -18,   72,   42, 2234,  -53,
 /*    10 */   184,  156,  213,  216,  248,  324,  354,  363,  401,  431,
 /*    20 */   164,  433,  623,  394,  471,  621,  599,  590,  585,  583,
 /*    30 */   579,  549,  545,  543,  514,  510,  507,  409,  295,  619,
 /*    40 */   587,  581,  547,  259,  163,  283,   76,  134,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*    10 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*    20 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*    30 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*    40 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*    50 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*    60 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*    70 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*    80 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*    90 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*   100 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*   110 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*   120 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*   130 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*   140 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*   150 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*   160 */   263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
 /*   170 */   263,  263,  263,  263,  263,  263,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "COMMA",         "ASSIGN",        "LOR",         
  "LAND",          "LNOT",          "DOUBLE_LNOT",   "EQ",          
  "LE",            "LT",            "GE",            "GT",          
  "NE",            "BITOR",         "BITXOR",        "BITAND",      
  "LSHIFT",        "RSHIFT",        "PLUS",          "MINUS",       
  "DIVIDE",        "MULTIPLY",      "MOD",           "UNARY",       
  "BITNOT",        "NUMBER",        "NAME",          "IFX",         
  "IFNOT",         "ELSE",          "LSQBRACKET",    "RSQBRACKET",  
  "LPAREN",        "RPAREN",        "FUNCCALL",      "PARENEXPR",   
  "VAR",           "SEMICOLON",     "LBRACKET",      "RBRACKET",    
  "IF",            "WHILE",         "FOR",           "COLON",       
  "CONTINUE",      "BREAK",         "FUNCTION",      "RETURN",      
  "error",         "nt",            "program",       "chunks",      
  "numList",       "nameList",      "exprList",      "funcexpr",    
  "expr",          "lexpr",         "vdef_stmt",     "vdefAssign_stmt",
  "vdefMulti_stmt",  "vdefMultiAssign_stmt",  "assign_stmt",   "assignMulti_stmt",
  "stmtList",      "stmt",          "block",         "if_start",    
  "if_header",     "if_stmt",       "else_header",   "while_start", 
  "while_header",  "while_stmt",    "foreach_header",  "foreach_stmt",
  "continue_stmt",  "break_stmt",    "function_start",  "function_header",
  "fdef_chunk",    "return_stmt",   "chunk",       
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= chunks",
 /*   1 */ "numList ::= NUMBER COMMA NUMBER",
 /*   2 */ "numList ::= numList COMMA NUMBER",
 /*   3 */ "nameList ::= NAME COMMA NAME",
 /*   4 */ "nameList ::= nameList COMMA NAME",
 /*   5 */ "exprList ::= funcexpr LSQBRACKET LSQBRACKET numList RSQBRACKET RSQBRACKET",
 /*   6 */ "expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET",
 /*   7 */ "exprList ::= expr",
 /*   8 */ "exprList ::= exprList COMMA expr",
 /*   9 */ "expr ::= NUMBER",
 /*  10 */ "expr ::= NAME",
 /*  11 */ "funcexpr ::= NAME LPAREN exprList RPAREN",
 /*  12 */ "funcexpr ::= NAME LPAREN RPAREN",
 /*  13 */ "expr ::= funcexpr",
 /*  14 */ "expr ::= LPAREN expr RPAREN",
 /*  15 */ "expr ::= expr PLUS expr",
 /*  16 */ "expr ::= expr MINUS expr",
 /*  17 */ "expr ::= expr MULTIPLY expr",
 /*  18 */ "expr ::= expr DIVIDE expr",
 /*  19 */ "expr ::= expr MOD expr",
 /*  20 */ "expr ::= expr LSHIFT expr",
 /*  21 */ "expr ::= expr RSHIFT expr",
 /*  22 */ "expr ::= expr BITAND expr",
 /*  23 */ "expr ::= expr BITOR expr",
 /*  24 */ "expr ::= expr BITXOR expr",
 /*  25 */ "expr ::= PLUS expr",
 /*  26 */ "expr ::= MINUS expr",
 /*  27 */ "expr ::= BITNOT expr",
 /*  28 */ "lexpr ::= expr EQ expr",
 /*  29 */ "lexpr ::= expr NE expr",
 /*  30 */ "lexpr ::= expr LE expr",
 /*  31 */ "lexpr ::= expr LT expr",
 /*  32 */ "lexpr ::= expr GE expr",
 /*  33 */ "lexpr ::= expr GT expr",
 /*  34 */ "lexpr ::= lexpr LAND lexpr",
 /*  35 */ "lexpr ::= lexpr LOR lexpr",
 /*  36 */ "lexpr ::= LNOT lexpr",
 /*  37 */ "lexpr ::= LNOT LNOT lexpr",
 /*  38 */ "vdef_stmt ::= VAR NAME SEMICOLON",
 /*  39 */ "vdefAssign_stmt ::= VAR NAME ASSIGN expr SEMICOLON",
 /*  40 */ "vdefMulti_stmt ::= VAR nameList SEMICOLON",
 /*  41 */ "vdefMultiAssign_stmt ::= VAR nameList ASSIGN exprList SEMICOLON",
 /*  42 */ "assign_stmt ::= NAME ASSIGN expr SEMICOLON",
 /*  43 */ "assignMulti_stmt ::= nameList ASSIGN exprList SEMICOLON",
 /*  44 */ "stmtList ::= stmt",
 /*  45 */ "stmtList ::= stmtList stmt",
 /*  46 */ "block ::= LBRACKET stmtList RBRACKET",
 /*  47 */ "block ::= LBRACKET error RBRACKET",
 /*  48 */ "if_start ::= IF",
 /*  49 */ "if_header ::= if_start LPAREN lexpr RPAREN",
 /*  50 */ "if_stmt ::= if_header stmt",
 /*  51 */ "else_header ::= if_header stmt ELSE",
 /*  52 */ "if_stmt ::= else_header stmt",
 /*  53 */ "while_start ::= WHILE",
 /*  54 */ "while_header ::= while_start LPAREN lexpr RPAREN",
 /*  55 */ "while_stmt ::= while_header stmt",
 /*  56 */ "foreach_header ::= FOR LPAREN nameList COLON exprList RPAREN",
 /*  57 */ "foreach_stmt ::= foreach_header stmt",
 /*  58 */ "continue_stmt ::= CONTINUE SEMICOLON",
 /*  59 */ "break_stmt ::= BREAK SEMICOLON",
 /*  60 */ "function_start ::= FUNCTION NAME",
 /*  61 */ "function_header ::= function_start LPAREN nameList RPAREN",
 /*  62 */ "function_header ::= function_start LPAREN RPAREN",
 /*  63 */ "fdef_chunk ::= function_header stmt",
 /*  64 */ "return_stmt ::= RETURN SEMICOLON",
 /*  65 */ "return_stmt ::= RETURN exprList SEMICOLON",
 /*  66 */ "stmt ::= error SEMICOLON",
 /*  67 */ "stmt ::= SEMICOLON",
 /*  68 */ "stmt ::= vdef_stmt",
 /*  69 */ "stmt ::= vdefAssign_stmt",
 /*  70 */ "stmt ::= vdefMultiAssign_stmt",
 /*  71 */ "stmt ::= vdefMulti_stmt",
 /*  72 */ "stmt ::= assign_stmt",
 /*  73 */ "stmt ::= assignMulti_stmt",
 /*  74 */ "stmt ::= expr SEMICOLON",
 /*  75 */ "stmt ::= if_stmt",
 /*  76 */ "stmt ::= while_stmt",
 /*  77 */ "stmt ::= foreach_stmt",
 /*  78 */ "stmt ::= continue_stmt",
 /*  79 */ "stmt ::= break_stmt",
 /*  80 */ "stmt ::= return_stmt",
 /*  81 */ "stmt ::= block",
 /*  82 */ "chunk ::= fdef_chunk",
 /*  83 */ "chunk ::= vdef_stmt",
 /*  84 */ "chunk ::= vdefMulti_stmt",
 /*  85 */ "chunks ::=",
 /*  86 */ "chunks ::= chunks chunk",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    case 49: /* nt */
{
#line 21 "parser/epparser.lemon"
 delete (yypminor->yy0); 
#line 1015 "parser/epparser.c"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 50, 1 },
  { 52, 3 },
  { 52, 3 },
  { 53, 3 },
  { 53, 3 },
  { 54, 6 },
  { 56, 6 },
  { 54, 1 },
  { 54, 3 },
  { 56, 1 },
  { 56, 1 },
  { 55, 4 },
  { 55, 3 },
  { 56, 1 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 3 },
  { 56, 2 },
  { 56, 2 },
  { 56, 2 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 3 },
  { 57, 2 },
  { 57, 3 },
  { 58, 3 },
  { 59, 5 },
  { 60, 3 },
  { 61, 5 },
  { 62, 4 },
  { 63, 4 },
  { 64, 1 },
  { 64, 2 },
  { 66, 3 },
  { 66, 3 },
  { 67, 1 },
  { 68, 4 },
  { 69, 2 },
  { 70, 3 },
  { 69, 2 },
  { 71, 1 },
  { 72, 4 },
  { 73, 2 },
  { 74, 6 },
  { 75, 2 },
  { 76, 2 },
  { 77, 2 },
  { 78, 2 },
  { 79, 4 },
  { 79, 3 },
  { 80, 2 },
  { 81, 2 },
  { 81, 3 },
  { 65, 2 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 2 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 65, 1 },
  { 82, 1 },
  { 82, 1 },
  { 82, 1 },
  { 51, 0 },
  { 51, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 1: /* numList ::= NUMBER COMMA NUMBER */
      case 2: /* numList ::= numList COMMA NUMBER */ yytestcase(yyruleno==2);
#line 52 "parser/epparser.lemon"
{
    yygotominor.yy0 = new Token(yymsp[-2].minor.yy0->data + ", " + yymsp[0].minor.yy0->data, yymsp[0].minor.yy0);
    delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0;
}
#line 1392 "parser/epparser.c"
        break;
      case 3: /* nameList ::= NAME COMMA NAME */
      case 4: /* nameList ::= nameList COMMA NAME */ yytestcase(yyruleno==4);
      case 8: /* exprList ::= exprList COMMA expr */ yytestcase(yyruleno==8);
#line 60 "parser/epparser.lemon"
{ yygotominor.yy0 = new Token((yymsp[-2].minor.yy0->data) + ", " + (yymsp[0].minor.yy0->data), yymsp[0].minor.yy0); delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1399 "parser/epparser.c"
        break;
      case 5: /* exprList ::= funcexpr LSQBRACKET LSQBRACKET numList RSQBRACKET RSQBRACKET */
      case 6: /* expr ::= funcexpr LSQBRACKET LSQBRACKET NUMBER RSQBRACKET RSQBRACKET */ yytestcase(yyruleno==6);
#line 62 "parser/epparser.lemon"
{
    yygotominor.yy0 = genTemp(yymsp[-2].minor.yy0);
    (*pGen) << yygotominor.yy0->data << " = SelectReturns(" << yymsp[-5].minor.yy0->data << ", [" << yymsp[-2].minor.yy0->data << "])" << std::endl;
    delete yymsp[-5].minor.yy0; delete yymsp[-2].minor.yy0;
}
#line 1409 "parser/epparser.c"
        break;
      case 7: /* exprList ::= expr */
      case 9: /* expr ::= NUMBER */ yytestcase(yyruleno==9);
      case 13: /* expr ::= funcexpr */ yytestcase(yyruleno==13);
      case 37: /* lexpr ::= LNOT LNOT lexpr */ yytestcase(yyruleno==37);
#line 73 "parser/epparser.lemon"
{ yygotominor.yy0 = yymsp[0].minor.yy0; }
#line 1417 "parser/epparser.c"
        break;
      case 10: /* expr ::= NAME */
#line 78 "parser/epparser.lemon"
{
    if(pGen->undefined(yymsp[0].minor.yy0->data)) {
        throw_error(yymsp[0].minor.yy0->line, 103, ("Undeclared variable \'" + (yymsp[0].minor.yy0->data) + "\'"));
        pGen->namedef(yymsp[0].minor.yy0->data);
    }
    yygotominor.yy0 = yymsp[0].minor.yy0;
}
#line 1428 "parser/epparser.c"
        break;
      case 11: /* funcexpr ::= NAME LPAREN exprList RPAREN */
#line 87 "parser/epparser.lemon"
{
    // Preprocess yymsp[-3].minor.yy0
    if(yymsp[-3].minor.yy0->data[0] == '_' || ('A' <= yymsp[-3].minor.yy0->data[0] && yymsp[-3].minor.yy0->data[0] <= 'Z'));  // Name starts with uppercase -> Don't modify
    else {
        yymsp[-3].minor.yy0->data = "f_" + yymsp[-3].minor.yy0->data;
    }
    /*
    if (pGen->undefined(yymsp[-3].minor.yy0->data)) {
        throw_error(yymsp[-3].minor.yy0->line, 4449, ("Undefined function " + yymsp[-3].minor.yy0->data));
        pGen->namedef(yymsp[-3].minor.yy0->data);
    }
    */

    yygotominor.yy0 = genTemp(yymsp[-3].minor.yy0);
    (*pGen) << yygotominor.yy0->data << " = " << yymsp[-3].minor.yy0->data << "(" << yymsp[-1].minor.yy0->data << ")" << std::endl;
    delete yymsp[-3].minor.yy0; delete yymsp[-1].minor.yy0;
}
#line 1449 "parser/epparser.c"
        break;
      case 12: /* funcexpr ::= NAME LPAREN RPAREN */
#line 106 "parser/epparser.lemon"
{
    // Preprocess yymsp[-2].minor.yy0
    if(yymsp[-2].minor.yy0->data[0] == '_' || ('A' <= yymsp[-2].minor.yy0->data[0] && yymsp[-2].minor.yy0->data[0] <= 'Z'));  // Name starts with uppercase -> Don't modify
    else {
        yymsp[-2].minor.yy0->data = "f_" + yymsp[-2].minor.yy0->data;
    }
    /*
    if (pGen->undefined(yymsp[-2].minor.yy0->data)) {
        throw_error(yymsp[-2].minor.yy0->line, 4449, ("Undefined function " + yymsp[-2].minor.yy0->data));
        pGen->namedef(yymsp[-2].minor.yy0->data);
    }
    */

    yygotominor.yy0 = genTemp(yymsp[-2].minor.yy0);
    (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << "()" << std::endl;
    delete yymsp[-2].minor.yy0;
}
#line 1470 "parser/epparser.c"
        break;
      case 14: /* expr ::= LPAREN expr RPAREN */
#line 127 "parser/epparser.lemon"
{ yygotominor.yy0 = yymsp[-1].minor.yy0; }
#line 1475 "parser/epparser.c"
        break;
      case 15: /* expr ::= expr PLUS expr */
#line 128 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << " + "  << yymsp[0].minor.yy0->data << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1480 "parser/epparser.c"
        break;
      case 16: /* expr ::= expr MINUS expr */
#line 129 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << " - "  << yymsp[0].minor.yy0->data << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1485 "parser/epparser.c"
        break;
      case 17: /* expr ::= expr MULTIPLY expr */
#line 130 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << " * "  << yymsp[0].minor.yy0->data << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1490 "parser/epparser.c"
        break;
      case 18: /* expr ::= expr DIVIDE expr */
#line 131 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << " // " << yymsp[0].minor.yy0->data << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1495 "parser/epparser.c"
        break;
      case 19: /* expr ::= expr MOD expr */
#line 132 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << " % "  << yymsp[0].minor.yy0->data << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1500 "parser/epparser.c"
        break;
      case 20: /* expr ::= expr LSHIFT expr */
#line 133 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << " << " << yymsp[0].minor.yy0->data << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1505 "parser/epparser.c"
        break;
      case 21: /* expr ::= expr RSHIFT expr */
#line 134 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << " >> " << yymsp[0].minor.yy0->data << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1510 "parser/epparser.c"
        break;
      case 22: /* expr ::= expr BITAND expr */
#line 135 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << " & "  << yymsp[0].minor.yy0->data << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1515 "parser/epparser.c"
        break;
      case 23: /* expr ::= expr BITOR expr */
#line 136 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << " | "  << yymsp[0].minor.yy0->data << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1520 "parser/epparser.c"
        break;
      case 24: /* expr ::= expr BITXOR expr */
#line 137 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = " << yymsp[-2].minor.yy0->data << " ^ "  << yymsp[0].minor.yy0->data << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1525 "parser/epparser.c"
        break;
      case 25: /* expr ::= PLUS expr */
#line 140 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = +" << yymsp[0].minor.yy0->data << std::endl; delete yymsp[0].minor.yy0; }
#line 1530 "parser/epparser.c"
        break;
      case 26: /* expr ::= MINUS expr */
#line 141 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = -" << yymsp[0].minor.yy0->data << std::endl; delete yymsp[0].minor.yy0; }
#line 1535 "parser/epparser.c"
        break;
      case 27: /* expr ::= BITNOT expr */
#line 142 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = ~" << yymsp[0].minor.yy0->data << std::endl; delete yymsp[0].minor.yy0; }
#line 1540 "parser/epparser.c"
        break;
      case 28: /* lexpr ::= expr EQ expr */
#line 145 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = (" << yymsp[-2].minor.yy0->data << " == " << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1545 "parser/epparser.c"
        break;
      case 29: /* lexpr ::= expr NE expr */
#line 146 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = (" << yymsp[-2].minor.yy0->data << " != " << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1550 "parser/epparser.c"
        break;
      case 30: /* lexpr ::= expr LE expr */
#line 147 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = (" << yymsp[-2].minor.yy0->data << " <= " << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1555 "parser/epparser.c"
        break;
      case 31: /* lexpr ::= expr LT expr */
#line 148 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = (" << yymsp[-2].minor.yy0->data << " < "  << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1560 "parser/epparser.c"
        break;
      case 32: /* lexpr ::= expr GE expr */
#line 149 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = (" << yymsp[-2].minor.yy0->data << " >= " << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1565 "parser/epparser.c"
        break;
      case 33: /* lexpr ::= expr GT expr */
#line 150 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = (" << yymsp[-2].minor.yy0->data << " > "  << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1570 "parser/epparser.c"
        break;
      case 34: /* lexpr ::= lexpr LAND lexpr */
#line 152 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = [" << yymsp[-2].minor.yy0->data << ", " << yymsp[0].minor.yy0->data << "]" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1575 "parser/epparser.c"
        break;
      case 35: /* lexpr ::= lexpr LOR lexpr */
#line 153 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = EUDOr([" << yymsp[-2].minor.yy0->data << ", " << yymsp[0].minor.yy0->data << "])" << std::endl; delete yymsp[-2].minor.yy0; delete yymsp[0].minor.yy0; }
#line 1580 "parser/epparser.c"
        break;
      case 36: /* lexpr ::= LNOT lexpr */
#line 154 "parser/epparser.lemon"
{ yygotominor.yy0 = genTemp(yymsp[0].minor.yy0); (*pGen) << yygotominor.yy0->data << " = EUDNot(" << yymsp[0].minor.yy0->data << ")" << std::endl; delete yymsp[0].minor.yy0; }
#line 1585 "parser/epparser.c"
        break;
      case 38: /* vdef_stmt ::= VAR NAME SEMICOLON */
#line 159 "parser/epparser.lemon"
{
    (*pGen) << yymsp[-1].minor.yy0->data << " = EUDVariable()" << std::endl;
    pGen->namedef(yymsp[-1].minor.yy0->data);
    delete yymsp[-1].minor.yy0;
}
#line 1594 "parser/epparser.c"
        break;
      case 39: /* vdefAssign_stmt ::= VAR NAME ASSIGN expr SEMICOLON */
#line 165 "parser/epparser.lemon"
{
    (*pGen) << yymsp[-3].minor.yy0->data << " = EUDVariable()" << std::endl;
    (*pGen) << yymsp[-3].minor.yy0->data << " << " << yymsp[-1].minor.yy0->data << std::endl;
    if(!pGen->namedef(yymsp[-3].minor.yy0->data)) {
        throw_error(yymsp[-3].minor.yy0->line, 196, ("Redeclaration of variable \'" + (yymsp[-3].minor.yy0->data) + "\'"));
    }
    delete yymsp[-3].minor.yy0;
}
#line 1606 "parser/epparser.c"
        break;
      case 40: /* vdefMulti_stmt ::= VAR nameList SEMICOLON */
#line 174 "parser/epparser.lemon"
{
    std::string& s = yymsp[-1].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;
    (*pGen) << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;

    // Register variables.
    commaListIter(s, [&](const std::string& varname) {
        if(!pGen->namedef(varname)) {
            throw_error(yymsp[-1].minor.yy0->line, 196, ("Redeclaration of variable \'" + varname + "\'"));
        }
    });
    delete yymsp[-1].minor.yy0;
}
#line 1623 "parser/epparser.c"
        break;
      case 41: /* vdefMultiAssign_stmt ::= VAR nameList ASSIGN exprList SEMICOLON */
#line 188 "parser/epparser.lemon"
{
    std::string& s = yymsp[-3].minor.yy0->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;
    (*pGen) << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    (*pGen) << "SetVariables([" << yymsp[-3].minor.yy0->data << "], [" << yymsp[-1].minor.yy0->data << "])" << std::endl;

    // Register variables.
    commaListIter(s, [&](const std::string& varname) {
        if(!pGen->namedef(varname)) {
            throw_error(yymsp[-3].minor.yy0->line, 196, ("Redeclaration of variable \'" + varname + "\'"));
        }
    });

    delete yymsp[-3].minor.yy0; delete yymsp[-1].minor.yy0;
}
#line 1642 "parser/epparser.c"
        break;
      case 42: /* assign_stmt ::= NAME ASSIGN expr SEMICOLON */
#line 204 "parser/epparser.lemon"
{
    (*pGen) << yymsp[-3].minor.yy0->data << " << " << yymsp[-1].minor.yy0->data << std::endl;
    if(pGen->undefined(yymsp[-3].minor.yy0->data)) {
        throw_error(yymsp[-3].minor.yy0->line, 103, ("Undeclared variable \'" + (yymsp[-3].minor.yy0->data) + "\'"));
        pGen->namedef(yymsp[-3].minor.yy0->data);
    }
    delete yymsp[-3].minor.yy0; delete yymsp[-1].minor.yy0;
}
#line 1654 "parser/epparser.c"
        break;
      case 43: /* assignMulti_stmt ::= nameList ASSIGN exprList SEMICOLON */
#line 213 "parser/epparser.lemon"
{
    (*pGen) << "SetVariables([" << yymsp[-3].minor.yy0->data << "], [" << yymsp[-1].minor.yy0->data << "])" << std::endl;

    commaListIter(yymsp[-3].minor.yy0->data, [&](const std::string& varname) {
        if(pGen->undefined(varname)) {
            throw_error(yymsp[-3].minor.yy0->line, 103, ("Undeclared variable \'" + varname + "\'"));
            pGen->namedef(varname);
        }
    });

    delete yymsp[-3].minor.yy0; delete yymsp[-1].minor.yy0;
}
#line 1670 "parser/epparser.c"
        break;
      case 47: /* block ::= LBRACKET error RBRACKET */
#line 230 "parser/epparser.lemon"
{
    throw_error(yymsp[0].minor.yy0->line, 6974, "General syntax error");
}
#line 1677 "parser/epparser.c"
        break;
      case 48: /* if_start ::= IF */
#line 236 "parser/epparser.lemon"
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    (*pGen) << yygotominor.yy0->data << " = EUDIf()" << std::endl;
}
#line 1685 "parser/epparser.c"
        break;
      case 49: /* if_header ::= if_start LPAREN lexpr RPAREN */
      case 54: /* while_header ::= while_start LPAREN lexpr RPAREN */ yytestcase(yyruleno==54);
#line 240 "parser/epparser.lemon"
{
    (*pGen) << "if " << yymsp[-3].minor.yy0->data << "(" << yymsp[-1].minor.yy0->data << "):" << std::endl;
    pGen->indent();
    delete yymsp[-3].minor.yy0; delete yymsp[-1].minor.yy0;
}
#line 1695 "parser/epparser.c"
        break;
      case 50: /* if_stmt ::= if_header stmt */
      case 52: /* if_stmt ::= else_header stmt */ yytestcase(yyruleno==52);
      case 55: /* while_stmt ::= while_header stmt */ yytestcase(yyruleno==55);
#line 246 "parser/epparser.lemon"
{
    pGen->unindent();
    (*pGen) << "EUDEndIf()" << std::endl;
}
#line 1705 "parser/epparser.c"
        break;
      case 51: /* else_header ::= if_header stmt ELSE */
#line 251 "parser/epparser.lemon"
{
    pGen->unindent();
    (*pGen) << "if EUDElse():" << std::endl;
    pGen->indent();
}
#line 1714 "parser/epparser.c"
        break;
      case 53: /* while_start ::= WHILE */
#line 264 "parser/epparser.lemon"
{
    yygotominor.yy0 = genTemp(yymsp[0].minor.yy0);
    (*pGen) << yygotominor.yy0->data << " = EUDWhile()" << std::endl;
    delete yymsp[0].minor.yy0;
}
#line 1723 "parser/epparser.c"
        break;
      case 56: /* foreach_header ::= FOR LPAREN nameList COLON exprList RPAREN */
#line 282 "parser/epparser.lemon"
{
    (*pGen) << "for " << yymsp[-3].minor.yy0->data << " in " << yymsp[-1].minor.yy0->data << ":" << std::endl;
    pGen->indent();
}
#line 1731 "parser/epparser.c"
        break;
      case 57: /* foreach_stmt ::= foreach_header stmt */
      case 63: /* fdef_chunk ::= function_header stmt */ yytestcase(yyruleno==63);
#line 287 "parser/epparser.lemon"
{
    pGen->unindent();
}
#line 1739 "parser/epparser.c"
        break;
      case 58: /* continue_stmt ::= CONTINUE SEMICOLON */
#line 293 "parser/epparser.lemon"
{
    (*pGen) << "EUDContinue()" << std::endl;
}
#line 1746 "parser/epparser.c"
        break;
      case 59: /* break_stmt ::= BREAK SEMICOLON */
#line 297 "parser/epparser.lemon"
{
    (*pGen) << "EUDBreak()" << std::endl;
}
#line 1753 "parser/epparser.c"
        break;
      case 60: /* function_start ::= FUNCTION NAME */
#line 302 "parser/epparser.lemon"
{
    // Preprocess yymsp[0].minor.yy0
    if(yymsp[0].minor.yy0->data[0] == '_' || ('A' <= yymsp[0].minor.yy0->data[0] && yymsp[0].minor.yy0->data[0] <= 'Z'));  // Name starts with uppercase -> Don't modify
    else {
        yymsp[0].minor.yy0->data = "f_" + yymsp[0].minor.yy0->data;
    }

    yygotominor.yy0 = yymsp[0].minor.yy0;
    if(!pGen->namedef(yymsp[0].minor.yy0->data)) {
        throw_error(yymsp[0].minor.yy0->line, 4495, "Duplicate function yymsp[0].minor.yy0 " + yymsp[0].minor.yy0->data);
    }
}
#line 1769 "parser/epparser.c"
        break;
      case 61: /* function_header ::= function_start LPAREN nameList RPAREN */
#line 315 "parser/epparser.lemon"
{
    (*pGen) << "@EUDFunc" << std::endl;
    (*pGen) << "def " << yymsp[-3].minor.yy0->data << "(" << yymsp[-1].minor.yy0->data << "):" << std::endl;
    pGen->indent();

    // Register variables.
    const std::string& s = yymsp[-1].minor.yy0->data;
    commaListIter(yymsp[-1].minor.yy0->data, [&](const std::string& varname) {
        if(!pGen->namedef(varname)) {
            throw_error(yymsp[-1].minor.yy0->line, 196, ("Redeclaration of variable \'" + varname + "\'"));
        }
    });

    tmpIndex = 1;
    delete yymsp[-3].minor.yy0; delete yymsp[-1].minor.yy0;
}
#line 1789 "parser/epparser.c"
        break;
      case 62: /* function_header ::= function_start LPAREN RPAREN */
#line 332 "parser/epparser.lemon"
{
    (*pGen) << "@EUDFunc" << std::endl;
    (*pGen) << "def " << yymsp[-2].minor.yy0->data << "():" << std::endl;
    pGen->indent();
    tmpIndex = 1;
    delete yymsp[-2].minor.yy0;
}
#line 1800 "parser/epparser.c"
        break;
      case 64: /* return_stmt ::= RETURN SEMICOLON */
#line 346 "parser/epparser.lemon"
{
    (*pGen) << "EUDReturn()" << std::endl;
}
#line 1807 "parser/epparser.c"
        break;
      case 65: /* return_stmt ::= RETURN exprList SEMICOLON */
#line 349 "parser/epparser.lemon"
{
    (*pGen) << "EUDReturn(" << yymsp[-1].minor.yy0->data << ")" << std::endl;
    delete yymsp[-1].minor.yy0;
}
#line 1815 "parser/epparser.c"
        break;
      case 66: /* stmt ::= error SEMICOLON */
#line 356 "parser/epparser.lemon"
{ throw_error(yymsp[0].minor.yy0->line, 6974, "General syntax error"); }
#line 1820 "parser/epparser.c"
        break;
      default:
      /* (0) program ::= chunks */ yytestcase(yyruleno==0);
      /* (44) stmtList ::= stmt */ yytestcase(yyruleno==44);
      /* (45) stmtList ::= stmtList stmt */ yytestcase(yyruleno==45);
      /* (46) block ::= LBRACKET stmtList RBRACKET */ yytestcase(yyruleno==46);
      /* (67) stmt ::= SEMICOLON */ yytestcase(yyruleno==67);
      /* (68) stmt ::= vdef_stmt */ yytestcase(yyruleno==68);
      /* (69) stmt ::= vdefAssign_stmt */ yytestcase(yyruleno==69);
      /* (70) stmt ::= vdefMultiAssign_stmt */ yytestcase(yyruleno==70);
      /* (71) stmt ::= vdefMulti_stmt */ yytestcase(yyruleno==71);
      /* (72) stmt ::= assign_stmt */ yytestcase(yyruleno==72);
      /* (73) stmt ::= assignMulti_stmt */ yytestcase(yyruleno==73);
      /* (74) stmt ::= expr SEMICOLON */ yytestcase(yyruleno==74);
      /* (75) stmt ::= if_stmt */ yytestcase(yyruleno==75);
      /* (76) stmt ::= while_stmt */ yytestcase(yyruleno==76);
      /* (77) stmt ::= foreach_stmt */ yytestcase(yyruleno==77);
      /* (78) stmt ::= continue_stmt */ yytestcase(yyruleno==78);
      /* (79) stmt ::= break_stmt */ yytestcase(yyruleno==79);
      /* (80) stmt ::= return_stmt */ yytestcase(yyruleno==80);
      /* (81) stmt ::= block */ yytestcase(yyruleno==81);
      /* (82) chunk ::= fdef_chunk */ yytestcase(yyruleno==82);
      /* (83) chunk ::= vdef_stmt */ yytestcase(yyruleno==83);
      /* (84) chunk ::= vdefMulti_stmt */ yytestcase(yyruleno==84);
      /* (85) chunks ::= */ yytestcase(yyruleno==85);
      /* (86) chunks ::= chunks chunk */ yytestcase(yyruleno==86);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 13 "parser/epparser.lemon"

    errorOccured = true;
#line 1909 "parser/epparser.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
#line 382 "parser/epparser.lemon"


// #define PARSER_DEBUG

std::string ParseString(const std::string& code)
{
    std::istringstream is(code);
    Tokenizer tok(is);
    void* pParser = ParseAlloc (malloc);
    PyGenerator pGen;
    Token* token;
    int line = 0;

#ifdef PARSER_DEBUG
    std::cout << "Parsing string [[[\n" << code << "\n]]]\n";
#endif

    tmpIndex = 1;
    errorOccured = false;
    while ((token = tok.getToken()) != nullptr) {
        if (line != tok.getCurrentLine()) {
            line = tok.getCurrentLine();
            pGen << "# (Line " << line << ") " << trim(tok.getCurrentLineString()) << std::endl;
        }
        if (tokenTypeConv(token)) {
            Parse (pParser, token->type, token, &pGen);
#ifdef PARSER_DEBUG
            ParseTrace(stdout, "-- ");
#endif
        }
        else {
            throw_error(token->line, 8104, "Invalid token");
        }
    }
    Parse (pParser, 0, nullptr, &pGen);
    ParseFree(pParser, free );

    if(!errorOccured) return pGen.str();
    // else throw std::runtime_error("Invalid syntax");
    return pGen.str();
}
#line 2142 "parser/epparser.c"
