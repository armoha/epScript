%include {
#include <stdio.h>
#include <assert.h>
#include <string>
#include <iostream>
#include <sstream>
#include <algorithm>
#include "epparser.h"
#include "generator/pygen.h"
#include "generator/closure.h"
#include "parser.h"
#include "tokenAdapter.h"
#include "parserUtilities.h"

struct ParserStruct {
    PyGenerator gen;
    ClosureManager closure;
};

int currentTokenizingLine;
}

%parse_failure {
    throw_error(-1, "Unrecoverable error");
}

////////

%extra_argument { ParserStruct* ps }
%token_type {Token*}
%destructor nt { delete $$; }

// Precedence table

%left ASSIGN.
%left COMMA.

%left LOR.
%left LAND.
%right LNOT.
%right DOUBLE_LNOT.  // Faster optimization for double lnot

%nonassoc EQ LE LT GE GT NE.

%left BITOR.
%left BITXOR.
%left BITAND.
%left LSHIFT RSHIFT.
%left PLUS MINUS.
%left DIVIDE MULTIPLY MOD.
%right UNARY BITNOT.
%nonassoc NUMBER NAME.

program ::= chunks.

// Definition for chunks
chunks ::= .
chunks ::= chunks chunk.

chunk ::= import_chunk SEMICOLON.
chunk ::= fdef_chunk.
chunk ::= vdef_stmt SEMICOLON.
chunk ::= cdef_stmt SEMICOLON.

// Import_chunk
import_chunk ::= FROM NAME(name) IMPORT nameList_nonEmpty(B). {
    commaListIter(B->data, [&](std::string varname) {
        funcNamePreprocess(varname);
        if(!ps->closure.defFunction(varname)) {
            throw_error(8118, ("Importing already-declared function " + varname));
        }
        else ps->gen << "from " << name->data << " import " << varname << std::endl;
    });
    delete name; delete B;
}

// Function declaration
function_start(start) ::= FUNCTION NAME(name).  {
    // Preprocess name
    funcNamePreprocess(name->data);
    if(!ps->closure.defFunction(name->data)) {
        throw_error(4495, "Duplicate function name " + name->data);
    }
    ps->closure.pushScope();
    start = name;
}

function_header ::= function_start(fname) LPAREN nameList_nonEmpty(args) RPAREN. {
    ps->gen << "@EUDFunc" << std::endl;
    ps->gen << "def " << fname->data << "(" << args->data << "):" << std::endl;
    ps->gen.indent();

    // Register variables.
    commaListIter(args->data, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"));
        }
    });

    tmpIndex = 1;
    delete fname; delete args;
}

function_header ::= function_start(fname) LPAREN RPAREN. {
    ps->gen << "@EUDFunc" << std::endl;
    ps->gen << "def " << fname->data << "():" << std::endl;
    ps->gen.indent();
    tmpIndex = 1;
    delete fname;
}

fdef_chunk ::= function_header stmt . {
    ps->gen.unindent(true);
    ps->closure.popScope();
}


/// Single-line statements
stmt ::= error SEMICOLON. { throw_error(6974, "Error while parsing statement"); }
stmt ::= bodyStmt.
stmt ::= return_stmt SEMICOLON.

/// Block level statements
// (1) Specialization for empty bodyStmtList
lbracket ::= LBRACKET. { ps->closure.pushScope(); }
rbracket ::= RBRACKET. { ps->closure.popScope(); }

blockStmt ::= lbracket RBRACKET. {
    ps->gen << "pass" << std::endl;
    ps->closure.popScope();
}
blockStmt ::= lbracket return_stmt SEMICOLON rbracket.
blockStmt ::= lbracket bodyStmtList rbracket.
blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket.
blockStmt ::= lbracket error RBRACKET. {
    throw_error(6298, "Block not terminated properly.");
    ps->closure.popScope();
}

bodyStmt ::= blockStmt.
bodyStmt ::= SEMICOLON.
bodyStmt ::= vdef_stmt SEMICOLON.
bodyStmt ::= vdefAssign_stmt SEMICOLON.
bodyStmt ::= cdef_stmt SEMICOLON.
bodyStmt ::= assign_stmt SEMICOLON.
bodyStmt ::= funcexpr(A) SEMICOLON. { ps->gen << A->data << std::endl; }
bodyStmt ::= actionStmt.  // Should not have semicolons
bodyStmt ::= if_stmt.
bodyStmt ::= while_stmt.
bodyStmt ::= for_stmt.
bodyStmt ::= foreach_stmt.
bodyStmt ::= continue_stmt SEMICOLON.
bodyStmt ::= break_stmt SEMICOLON.

// bodyStmtList should not contain empty list. See (1)
bodyStmtList ::= bodyStmt.
bodyStmtList ::= bodyStmtList bodyStmt.
bodyStmtList ::= bodyStmtList error. {
    throw_error(8510, "Incomplete statement");
}


// Common expressions
numList_nonEmpty(A) ::= NUMBER(B). { A = B; }
numList_nonEmpty(A) ::= numList_nonEmpty(B) COMMA NUMBER(C). { A = commaConcat(B, C); }
nameList_nonEmpty(A) ::= NAME(B). { A = B; }
nameList_nonEmpty(A) ::= nameList_nonEmpty(B) COMMA NAME(C). { A = commaConcat(B, C); }

exprList_nonEmpty(A) ::= funcexpr(B) LSQBRACKET LSQBRACKET numList_nonEmpty(C) RSQBRACKET RSQBRACKET. {
    C->data = "_SRET(" + B->data + ", [" + C->data + "])";
    delete B;
    A = mkTokenTemp(C);
}


expr(A) ::= funcexpr(B) LSQBRACKET LSQBRACKET NUMBER(C) RSQBRACKET RSQBRACKET. {
    C->data = B->data + "[" + C->data + "]";
    delete B;
    A = mkTokenTemp(C);
}


exprList_nonEmpty(A) ::= expr(B). [COMMA] { A = B; }
exprList_nonEmpty(A) ::= exprList_nonEmpty(B) COMMA exprList_nonEmpty(C). { A = new Token((B->data) + ", " + (C->data), C); delete B; delete C; }

exprList(A) ::= . { A = genEmpty(); }
exprList(A) ::= exprList_nonEmpty(B). { A = B; }

// Related to expressions
expr(A) ::= NUMBER(B). { A = B; }
expr(A) ::= NAME(B). {
    checkIsRValue(B->data);
    A = B;
}

expr(A)::= NAME(B) PERIOD NAME(C). {
    checkIsConstant(B->data);
    B->data = B->data + "." + C->data;
    delete C;
    A = mkTokenTemp(B);
}

expr(A)::= NAME(B) LSQBRACKET expr(C) RSQBRACKET. {
    checkIsConstant(B->data);
    B->data = B->data + "[" + C->data + "]";
    delete C;
    A = mkTokenTemp(B);
}

// Function calls
fArgs_nonEmpty(A) ::= expr(B). { A = B; }
fArgs_nonEmpty(A) ::= STRING(B). { A = B; }
fArgs_nonEmpty(A) ::= fArgs_nonEmpty(B) COMMA fArgs_nonEmpty(C). {
    B->data = B->data + ", " + C->data;
    B->type = TOKEN_TEMP;
    A = B;
    delete C;
}

fArgs(A) ::= . { A = genEmpty(); }
fArgs(A) ::= fArgs_nonEmpty(B). { A = B; }

funcName(A) ::= NAME(name). {
    funcNamePreprocess(name->data);
    checkIsFunction(name->data);
    A = name;
}

funcName(A) ::= NAME(objName) PERIOD NAME(mtdName). {
    // Preprocess name
    checkIsConstant(objName->data);
    mtdName->data = objName->data + "." + mtdName->data;
    delete objName;
    A = mkTokenTemp(mtdName);
}

funcexpr(out) ::= funcName(name) LPAREN fArgs(exprs) RPAREN.  [FUNCCALL] {
    // Preprocess name
    name->data += "(" + exprs->data + ")";
    out = mkTokenTemp(name);
}

// Expressions
expr(A) ::= funcexpr(B).  { A = B; }

expr(A) ::= LPAREN expr(B) RPAREN. {
    B->data = "(" + B->data + ")";
    A = mkTokenTemp(B);
}

expr(A) ::= L2V LPAREN lexpr(B) RPAREN. {
    B->data = "_L2V(" + B->data + ")";
    A = genTemp(B);
}

expr(A) ::= MAPSTRING LPAREN STRING(B) RPAREN. {
    B->data = "GetStringIndex(" + B->data + ")";
    A = mkTokenTemp(B);
}

expr(A) ::= UNIT LPAREN STRING(B) RPAREN. {
    B->data = "GetUnitIndex(" + B->data + ")";
    A = mkTokenTemp(B);
}

expr(A) ::= SWITCH LPAREN STRING(B) RPAREN. {
    B->data = "GetSwitchIndex(" + B->data + ")";
    A = mkTokenTemp(B);
}

expr(A) ::= LOCATION LPAREN STRING(B) RPAREN. {
    B->data = "GetLocationIndex(" + B->data + ")";
    A = mkTokenTemp(B);
}

// Binary operators
expr(A) ::= expr(B) PLUS        expr(C). { A = binaryMerge(B, "+",  C); }
expr(A) ::= expr(B) MINUS       expr(C). { A = binaryMerge(B, "-",  C); }
expr(A) ::= expr(B) MULTIPLY    expr(C). { A = binaryMerge(B, "*",  C); }
expr(A) ::= expr(B) DIVIDE      expr(C). { A = binaryMerge(B, "//", C); }
expr(A) ::= expr(B) MOD         expr(C). { A = binaryMerge(B, "%",  C); }
expr(A) ::= expr(B) LSHIFT      expr(C). { A = binaryMerge(B, "<<", C); }
expr(A) ::= expr(B) RSHIFT      expr(C). { A = binaryMerge(B, ">>", C); }
expr(A) ::= expr(B) BITAND      expr(C). { A = binaryMerge(B, "&",  C); }
expr(A) ::= expr(B) BITOR       expr(C). { A = binaryMerge(B, "|",  C); }
expr(A) ::= expr(B) BITXOR      expr(C). { A = binaryMerge(B, "^",  C); }

// Unary operators
expr(A) ::= PLUS    expr(B). [UNARY] { A = genTemp(B); ps->gen << A->data << " = +" << B->data << std::endl; delete B; }
expr(A) ::= MINUS   expr(B). [UNARY] { A = genTemp(B); ps->gen << A->data << " = -" << B->data << std::endl; delete B; }
expr(A) ::= BITNOT  expr(B). [UNARY] { A = genTemp(B); ps->gen << A->data << " = ~" << B->data << std::endl; delete B; }


// Logical expressions
lexpr(A) ::= expr(B) EQ expr(C).   { A = binaryMerge(B, "==", C); }
lexpr(A) ::= expr(B) NE expr(C).   { A = binaryMerge(B, "!=", C); }
lexpr(A) ::= expr(B) LE expr(C).   { A = binaryMerge(B, "<=", C); }
lexpr(A) ::= expr(B) LT expr(C).   { A = binaryMerge(B, "<",  C); }
lexpr(A) ::= expr(B) GE expr(C).   { A = binaryMerge(B, ">=", C); }
lexpr(A) ::= expr(B) GT expr(C).   { A = binaryMerge(B, ">" , C); }

lexpr(A) ::= lexpr(B) LAND lexpr(C).  {
    B->data = "[" + B->data + ", " + C->data + "]";
    delete C;
    A = mkTokenTemp(B);
}

lexpr(A) ::= lexpr(B) LOR lexpr(C).  {
    B->data = "EUDOr([" + B->data + ", " + C->data + "])";
    delete C;
    A = mkTokenTemp(B);
}

lexpr(A) ::= LNOT lexpr(B).  {
    B->data = "EUDNot([" + B->data + "])";
    A = mkTokenTemp(B);
}

lexpr(A) ::= LNOT LNOT lexpr(B).  [DOUBLE_LNOT] { A = B; }



// Statements
vdef_stmt ::= VAR nameList_nonEmpty(A). {
    std::string& s = A->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"));
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
    }
    else {
        ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    }

    delete A;
}

vdefAssign_stmt ::= VAR nameList_nonEmpty(A) ASSIGN exprList_nonEmpty(B). {
    std::string& s = A->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"));
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
        ps->gen << s << " << (" << B->data << ")" << std::endl;
    }
    else {
        ps->gen << s << " = _MVAR([" << B->data << "])" << std::endl;
    }

    delete A; delete B;
}

cdef_stmt ::= CONST nameList_nonEmpty(A) ASSIGN exprList_nonEmpty(B). {
    std::string& s = A->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"));
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = " << B->data << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable([" << B->data << "])" << std::endl;
    }
    delete A; delete B;
}

//

lvalue(A) ::= NAME(B). {
    checkIsVariable(B->data);
    A = B;
}

lvalue(A) ::= NAME(B) LSQBRACKET NAME(C) RSQBRACKET. {
    checkIsConstant(B->data);
    C->data = "_ARRW(" + B->data + ", " + C->data + ")";
    A = mkTokenTemp(C);
    delete B;
}

lvalue(A) ::= NAME(B) PERIOD NAME(C). {
    checkIsConstant(B->data);
    C->data = "_ATTW(" + B->data + ", '" + C->data + "')";
    A = mkTokenTemp(C);
    delete B;
}

lvalueList_nonEmpty(A) ::= lvalue(B). { A = B; }
lvalueList_nonEmpty(A) ::= lvalueList_nonEmpty(B) COMMA lvalue(C). { A = commaConcat(B, C); }
assign_stmt ::= lvalue(A) ASSIGN expr(B). {
    ps->gen << A->data << " << (" << B->data << ")" << std::endl;
    delete A; delete B;
}

assign_stmt ::= lvalueList_nonEmpty(A) ASSIGN exprList_nonEmpty(B). {
    ps->gen << "_SV([" << A->data << "], [" << B->data << "])" << std::endl;
    delete A; delete B;
}

// If~Else block
if_start(A) ::= IF(B). {
    A = genTemp(B);
    ps->gen << A->data << " = EUDIf()" << std::endl;
}
if_header ::= if_start(A) LPAREN lexpr(B) RPAREN. {
    ps->gen << "if " << A->data << "(" << B->data << "):" << std::endl;
    ps->gen.indent();
    delete A; delete B;
}

if_block ::= if_header stmt.

elif_start(A) ::= ELSE IF(B). {
    A = genTemp(B);
    ps->gen.unindent(false);
    ps->gen << A->data << " = EUDElseIf()" << std::endl;
}

elif_header ::= elif_start(A) LPAREN lexpr(B) RPAREN. {
    ps->gen << "if " << A->data << "(" << B->data <<"):" << std::endl;
    ps->gen.indent();
}

if_block ::= if_block elif_header stmt.

else_header ::= ELSE. {
    ps->gen.unindent(false);
    ps->gen << "if EUDElse()():" << std::endl;
    ps->gen.indent();
}

if_stmt ::= if_block. {
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
}

if_stmt ::= if_block else_header stmt. {
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
}


// While block
while_start(A) ::= WHILE(B). {
    A = genTemp(B);
    ps->gen << A->data << " = EUDWhile()" << std::endl;
    delete B;
}

while_header ::= while_start(A) LPAREN lexpr(B) RPAREN. {
    ps->gen << "if " << A->data << "(" << B->data << "):" << std::endl;
    ps->gen.indent();
    delete A; delete B;
}

while_stmt ::= while_header stmt. {
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
}

/// FOR/FOREACH
for_opener ::= FOR LPAREN. {
    ps->closure.pushScope();
}

// C-style for block
for_init_stmt_nonEmpty ::= vdef_stmt.
for_init_stmt_nonEmpty ::= vdefAssign_stmt.
for_init_stmt_nonEmpty ::= cdef_stmt.
for_init_stmt_nonEmpty ::= assign_stmt.
for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty.
for_init_stmt ::= for_init_stmt_nonEmpty.
for_init_stmt ::= .

for_action_stmt_nonEmpty ::= assign_stmt.
for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty.

for_header1(A) ::= for_opener for_init_stmt SEMICOLON(B). {
    // opening for lexpr
    A = genTemp(B);
    ps->gen << A->data << " = EUDWhile()" << std::endl;
    delete B;
}

for_header2(X)::= for_header1(A) lexpr(B) SEMICOLON. {
    ps->gen << "if " << A->data << "(" << B->data << "):" << std::endl;
    ps->gen.indent();
    delete A; delete B;

    // Opening for assign_statement
    X = genTemp(B);
    ps->gen << "def " << X->data <<"():" << std::endl;
    ps->gen.indent();
}

for_header(X) ::= for_header2(A) for_action_stmt_nonEmpty RPAREN. {
    X = A;
    ps->gen.unindent(false);
}

for_header(X) ::= for_header2(A) RPAREN. {
    X = A;
    ps->gen << "pass" << std::endl;
    ps->gen.unindent(false);
}

for_stmt ::= for_header(X) stmt. {
    ps->gen << X->data << "()" << std::endl;
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
    ps->closure.popScope();
}



// Foreach block
foreach_opener ::= FOREACH LPAREN. {
    ps->closure.pushScope();
}

foreach_header ::= foreach_opener nameList_nonEmpty(names) COLON exprList_nonEmpty(exprs) RPAREN. {
    commaListIter(names->data, [&](std::string& s) {
        ps->closure.defVariable(s);
    });
    ps->gen << "for " << names->data << " in " << exprs->data << ":" << std::endl;
    ps->gen.indent();
}

foreach_stmt ::= foreach_header stmt. {
    ps->gen.unindent(true);
    ps->closure.popScope();
}



// Loop exits
continue_stmt ::= CONTINUE. {
    ps->gen << "EUDContinue()" << std::endl;
}

break_stmt ::= BREAK. {
    ps->gen << "EUDBreak()" << std::endl;
}



// returns
return_stmt ::= RETURN exprList(exprs). {
    ps->gen << "EUDReturn(" << exprs->data << ")" << std::endl;
    delete exprs;
}


// Trigger statements

lexpr(A) ::= CONDITIONNAME(B) LPAREN fArgs(C) RPAREN. {
    B->data = B->data + "(" + C->data + ")";
    delete C;
    A = mkTokenTemp(B);
}

lexpr(A) ::= CONDITIONNAME(B) LPAREN RPAREN. {
    B->data = B->data + "()";
    A = mkTokenTemp(B);
}

action(X) ::= ACTIONNAME(A) LPAREN fArgs(B) RPAREN SEMICOLON. {
    X = genTemp(A);
    X->data =  A->data + "(" + B->data + ")";
    delete A; delete B;
}

actions(A) ::= action(B) action(C). {
    A = B;
    B->data += ",\n" + C->data;
    delete C;
}

actions(A) ::= actions(B) action(C). {
    A = B;
    B->data += ",\n" + C->data;
    delete C;
}

actionStmt ::= action(X). {
    ps->gen << "DoActions(" << X->data << ")" << std::endl;
    delete X;
}

actionStmt ::= actions(X). {
    ps->gen << "DoActions([" << std::endl;
    ps->gen.indent();
    ps->gen << X->data << std::endl;
    ps->gen.unindent(false);
    ps->gen << "])" << std::endl;
    delete X;
}


// Program building block



%code {

int PARSER_DEBUG = 0;
PyGenerator* pGen;
ClosureManager* closure;

std::string ParseString(const std::string& code, bool addComment)
{
    Tokenizer tok(code);
    void* pParser = ParseAlloc (malloc);
    ParserStruct ps;
    Token* token;
    currentTokenizingLine = 0;
    pGen = &ps.gen;
    closure = &ps.closure;

    if(PARSER_DEBUG) std::cout << "Parsing string [[[\n" << code.c_str() << "\n]]]\n";

    tmpIndex = 1;
    resetParserErrorNum();
    while ((token = tok.getToken()) != nullptr) {
        if (currentTokenizingLine != tok.getCurrentLine()) {
            if(addComment) {
                currentTokenizingLine = tok.getCurrentLine();
                ps.gen << "# (Line " << currentTokenizingLine << ") " << trim(tok.getCurrentLineString()) << std::endl;
            }
            if(PARSER_DEBUG) printf("# reading line %s\n", tok.getCurrentLineString().c_str());
        }
        if (tokenTypeConv(token)) {
            Parse (pParser, token->type, token, &ps);
#ifndef NDEBUG
            if(PARSER_DEBUG) ParseTrace(stdout, "--");
#endif
        }
        else {
            throw_error(8104, "Invalid token");
        }
    }
    Parse (pParser, 0, nullptr, &ps);
    ParseFree(pParser, free );

    std::string ret = iwCollapse(ps.gen.str());
    if(getParseErrorNum() > 0) {
        ret += "\nraise RuntimeError('Compile error')\n";
    }
    return ret;
}
}
