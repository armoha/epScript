%include {
#include <stdio.h>
#include <assert.h>
#include <string>
#include <stdlib.h>
#include <iostream>
#include "epparser.h"
#include "pygen.h"
#include "../test/doctest.hpp"

std::string* genTemp() {
    static int i = 0;
    static char output[20] = "_t";
    i++;
    sprintf(output, "_t%d", i);
    return new std::string(output);
}

}

%syntax_error {
    printf("Syntax error!\n");
}

////////

%extra_argument { PyGenerator* pGen }
%token_type {std::string*}
%destructor nt { delete $$; }

%left PLUS MINUS.
%left DIVIDE MULTIPLY.

program ::= expr(A).   {
    delete A;
}

expr(A) ::= expr(B) MINUS  expr(C). {
    A = genTemp();
    (*pGen) << *A << " = " << *B << " - " << *C << std::endl;
    delete B; delete C;
}

expr(A) ::= expr(B) PLUS  expr(C). {
    A = genTemp();
    (*pGen) << *A << " = " << *B << " + " << *C << std::endl;
    delete B; delete C;
}

expr(A) ::= expr(B) MULTIPLY  expr(C). {
    A = genTemp();
    (*pGen) << *A << " = " << *B << " * " << *C << std::endl;
    delete B; delete C;
}

expr(A) ::= expr(B) DIVIDE expr(C). {
    A = genTemp();
    (*pGen) << *A << " = " << *B << " / " << *C << std::endl;
    delete B; delete C;
}

expr(A) ::= NUMBER(B). {
    A = B;
}


%code {
TEST_CASE("Simple parser")
{
    void* pParser = ParseAlloc (malloc);
    PyGenerator* pgen = new PyGenerator;

    // 15 / 5
    Parse (pParser, NUMBER, new std::string("15"), pgen);
    Parse (pParser, DIVIDE, new std::string(), pgen);
    Parse (pParser, NUMBER, new std::string("5"), pgen);
    Parse (pParser, 0, new std::string(), pgen);
    REQUIRE(pgen->str() == "_t1 = 15 / 5\n");

    ParseFree(pParser, free );
    delete pgen;

}
}
