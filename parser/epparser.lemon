%include {
#include <stdio.h>
#include <assert.h>
#include <string>
#include <sstream>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <regex>

#include "epparser.h"
#include "generator/pygen.h"
#include "generator/closure.h"
#include "parser.h"
#include "tokenAdapter.h"
#include "parserUtilities.h"

struct ParserStruct {
   PyGenerator gen;
    ClosureManager closure;
};

int currentTokenizingLine;
std::string currentFunction;
std::string currentModule;
bool functionCalledInMultipleActions;
bool PARSER_DEBUG = false;
bool MAP_DEBUG = false;

}

%parse_failure {
    throw_error(-1, "Unrecoverable error");
}

////////

%extra_argument { ParserStruct* ps }
%token_type {Token*}
%destructor nt { delete $$; }

// Precedence table

%nonassoc IFX.
%nonassoc ELSE.

%left ASSIGN.
%right QMARK.
%left COMMA.
%left LOR.
%left LAND.
%right LNOT.
%nonassoc EQ LE LT GE GT NE.
%left BITOR.
%left BITXOR.
%left BITAND.
%left LSHIFT RSHIFT.
%left PLUS MINUS.
%left DIVIDE MULTIPLY MOD.
%right UNARY BITNOT.
%left LPAREN LSQBRACKET PERIOD.


program ::= chunks.

// Definition for chunks
chunks ::= .
chunks ::= chunks chunk.

chunk ::= import_chunk SEMICOLON.
chunk ::= fdef_chunk.
chunk ::= fdecl_chunk.
chunk ::= object_chunk.
chunk ::= vdef_stmt SEMICOLON.
chunk ::= vdefAssign_global_stmt SEMICOLON.
chunk ::= cdef_global_stmt SEMICOLON.
chunk ::= blockStmt. {
    throw_error(48993, "Misplaced block statement");
}

// Import_chunk

dottedName(A) ::= NAME(B). { A = B; }
dottedName(A) ::= dottedName(B) PERIOD NAME(C). {
    C->data = B->data + "." + C->data;
    delete B;
    A = C;
}

import_chunk ::= IMPORT dottedName(A) AS NAME(B). {
    std::string impPath, impModname;
    impPathProcess(A->data, impPath, impModname);

    if(!ps->closure.defModule(B->data)) {
        throw_error(6754, "Importing already-declared module " + B->data, B->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << " as " << B->data << std::endl;
    delete A; delete B;
}

import_chunk ::= IMPORT dottedName(A). {
    std::string impPath, impModname;
    impPathProcess(A->data, impPath, impModname);

    if(!ps->closure.defModule(impModname)) {
        throw_error(6754, "Importing already-declared module " + impModname, A->line);
    }

    if(!impPath.empty()) ps->gen << "from " << impPath << " ";
    ps->gen << "import " << impModname << std::endl;
    delete A;
}

fdef_rettypes(A) ::= . { A = nullptr; }
fdef_rettypes(A) ::= COLON exprList_nonEmpty(B). { A = B; }

// Function declaration
fdef_header ::= FUNCTION NAME(name) LPAREN typedNameList(args) RPAREN fdef_rettypes(rets). {
    // Preprocess name
    funcNamePreprocess(name->data);
    if(!ps->closure.defFunction(name->data)) {
        throw_error(4495, "Duplicate function " + name->data, name->line);
    }

    ps->closure.pushScope();
    currentFunction = name->data;

    // Register variables.
    // args->data is a comma-seperated list of (name, type). To pair names and types,
    // we store varname in odd loops and define variables on even loops.
    std::string argname;
    std::vector<std::string> argnames, types;
    bool isTypedFunction = !!rets;
    auto cursor = args;

    while(cursor != nullptr) {
        auto typedNameToken = cursor->subToken[0];
        auto argnameToken = typedNameToken->subToken[0];
        auto typeToken = typedNameToken->subToken[1];
        std::string argname = argnameToken->data;

        if(typeToken == nullptr) {
            if(!ps->closure.defVariable(argname)) {
                throw_error(196, ("Redeclaration of variable \'" + argname + "\'"), args->line);
            }
            argnames.push_back(argname);
            types.push_back("None");
        }
        else {
            isTypedFunction = true;
            if(!ps->closure.defConstant(argname)) {
                throw_error(7714, ("Redeclaration of typed constant \'" + argname + "\'"), args->line);
            }
            argnames.push_back(argname);
            types.push_back(typeToken->data);
        }
        cursor = cursor->subToken[1];
    }

    if (!isTypedFunction) ps->gen << "@EUDFunc" << std::endl;
    else {
        ps->gen << "@EUDTypedFunc([";
        writeStringList(ps->gen, types);
        if(!rets) ps->gen << "])" << std::endl;
        else ps->gen << "], [" << rets->data << "])" << std::endl;
    }
    // Write argument names
    ps->gen << "def " << name->data << "(";
    writeStringList(ps->gen, argnames);
    ps->gen << "):" << std::endl;

    ps->gen.indent();
    if(MAP_DEBUG) {
         ps->gen << "MDBG_PUSHF(\'" << currentFunction << "\', \'" << currentModule << "\')" << std::endl;
    }

    tmpIndex = 1;
    delete name;
    delete args;
    delete rets;
}

fdef_chunk ::= fdef_header stmt . {
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
}

fdecl_chunk  ::= FUNCTION NAME(name) LPAREN typedNameList RPAREN SEMICOLON. {
    // Preprocess name
    funcNamePreprocess(name->data);
    if(!ps->closure.declareFunction(name->data)) {
        throw_error(72461, "Declaring function with non-function name " + name->data, name->line);
    }
}


/// Object declaration

object_header(A) ::= OBJECT(X) NAME(name) LBRACKET. {
    ps->gen << "class " << name->data << "(EUDStruct):\n";
    ps->gen.indent();

    funcNamePreprocess(name->data);
    if(!ps->closure.declareFunction(name->data)) {
        throw_error(8228, "Declaring object with non-function name " + name->data, name->line);
    }
    ps->closure.pushScope();

    A = X;
    A->data = name->data;  // Add object name
    delete name;
}

object_body(A) ::= object_header(B). {
    A = B;
}

object_body(A) ::= object_body(B) VAR nameList_nonEmpty(varList) SEMICOLON. {
    A = B;
    A->line = varList->line;
    A->data += ", " + varList->data;
    delete varList;
}

method_header(H) ::= FUNCTION NAME(name) LPAREN nameList(args) RPAREN. {
    // Method can't be called directly, so we shouldn't have to register it to closure.
    // duplicate method names should be checked at python-compile time.

    ps->gen << "@EUDMethod" << std::endl;

    ps->closure.pushScope();
    // Register variables.
    std::string _this = "this";  // This may be modified...?
    if(!ps->closure.defConstant(_this)) {
        throw_error(656, ("Redeclaration of variable \'this\'"), args->line);
    }
    commaListIter(args->data, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(2656, ("Redeclaration of variable \'" + varname + "\'"), args->line);
        }
    });

    // Add default argument 'self'
    if (args->data.size() != 0) {
        ps->gen << "def " << name->data << "(" << _this << ", " << args->data << "):" << std::endl;
    } else {
        ps->gen << "def " << name->data << "(" << _this << "):" << std::endl;
    }
    ps->gen.indent();

    currentFunction = name->data;

    if(MAP_DEBUG) {
         ps->gen << "MDBG_PUSHF(\'" << currentFunction << "\', \'" << currentModule << "\')" << std::endl;
    }

    tmpIndex = 1;
    delete args;
    H = mkTokenTemp(name);
}

method_chunk(C) ::= method_header(H) stmt . {
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen.unindent(true);
    ps->closure.popScope();
    currentFunction = "";
    C = H;
}

object_body(A) ::= object_body(B) method_chunk(C) . {
    A = B;
    A->line = C->line;
    delete C;
}

object_chunk  ::= object_body(A) RBRACKET SEMICOLON. {
    ps->gen << "_fields_ = [";
    bool isFirst = true;
    commaListIter(A->data, [&](std::string& varname) {
        if (isFirst) {
            isFirst = false;
            return;
        }
        ps->gen << "'" << varname << "', ";
    });
    ps->gen << "]\n";
    ps->gen.unindent(true);
    ps->closure.popScope();
    delete A;
}

/// Single-line statements
stmt ::= error SEMICOLON(X). { throw_error(6974, "Error while parsing statement", X->line); delete X; }
stmt ::= bodyStmt.
stmt ::= return_stmt SEMICOLON.

/// Block level statements
// (1) Specialization for empty bodyStmtList
lbracket ::= LBRACKET. { ps->closure.pushScope(); }
rbracket ::= RBRACKET. { ps->closure.popScope(); }

blockStmt ::= lbracket RBRACKET. {
    ps->closure.popScope();
}
blockStmt ::= lbracket return_stmt SEMICOLON rbracket.
blockStmt ::= lbracket bodyStmtList rbracket.
blockStmt ::= lbracket bodyStmtList return_stmt SEMICOLON rbracket.
blockStmt ::= lbracket error RBRACKET(X). {
    throw_error(6298, "Block not terminated properly.", X->line);
    ps->closure.popScope();
    delete X;
}

bodyStmt ::= blockStmt.
bodyStmt ::= SEMICOLON.
bodyStmt ::= vdef_stmt SEMICOLON.
bodyStmt ::= vdefAssign_stmt SEMICOLON.
bodyStmt ::= cdef_stmt SEMICOLON.
bodyStmt ::= assign_stmt SEMICOLON.
bodyStmt ::= funcexpr(A) SEMICOLON. { ps->gen << A->data << std::endl; }
bodyStmt ::= actionStmt.  // Should not have semicolons
bodyStmt ::= if_stmt.
bodyStmt ::= while_stmt.
bodyStmt ::= for_stmt.
bodyStmt ::= foreach_stmt.
bodyStmt ::= continue_stmt SEMICOLON.
bodyStmt ::= break_stmt SEMICOLON.

// bodyStmtList should not contain empty list. See (1)
bodyStmtList ::= error. {
    throw_error(8510, "Incomplete statement");
}

bodyStmtList ::= bodyStmt.
bodyStmtList ::= bodyStmtList bodyStmt.
bodyStmtList ::= bodyStmtList error. {
    throw_error(8510, "Incomplete statement");
}


// Common expressions
numList_nonEmpty(A) ::= NUMBER(B). { A = B; }
numList_nonEmpty(A) ::= numList_nonEmpty(B) COMMA NUMBER(C). { A = commaConcat(B, C); }

// Name without type
typedName(A) ::= NAME(name). {
    A = genEmpty();
    A->subToken[0] = name;
    A->subToken[1] = nullptr;  // Type is null.
}

// name with type
typedName(A) ::= NAME(name) COLON expr(type). {
    A = genEmpty();
    A->subToken[0] = name;
    A->subToken[1] = type;
}

typedNameList_nonEmpty(A) ::= typedName(B). {
    A = genEmpty();
    A->subToken[0] = B;
    A->subToken[1] = nullptr;
}

typedNameList_nonEmpty(A) ::= typedName(B) COMMA typedNameList_nonEmpty(C). {
    A = genEmpty();
    A->subToken[0] = B;
    A->subToken[1] = C;
}

typedNameList(A) ::= . { A = nullptr; }
typedNameList(A) ::= typedNameList_nonEmpty(B). { A = B; }

nameList_nonEmpty(A) ::= NAME(B). { A = B; }
nameList_nonEmpty(A) ::= nameList_nonEmpty(B) COMMA NAME(C). { A = commaConcat(B, C); }
nameList(A)::= . { A = genEmpty(); }
nameList(A) ::= nameList_nonEmpty(B). { A = B; }

exprList_nonEmpty(A) ::= funcexpr(B) LSQBRACKET LSQBRACKET numList_nonEmpty(C) RSQBRACKET RSQBRACKET. [SUBSCRIPT] {
    C->data = "_SRET(" + B->data + ", [" + C->data + "])";
    delete B;
    A = mkTokenTemp(C);
}


expr(A) ::= funcexpr(B) LSQBRACKET LSQBRACKET NUMBER(C) RSQBRACKET RSQBRACKET. [SUBSCRIPT] {
    C->data = B->data + "[" + C->data + "]";
    delete B;
    A = mkTokenTemp(C);
}


exprList_nonEmpty(A) ::= expr(B). [COMMA] { A = B; }
exprList_nonEmpty(A) ::= exprList_nonEmpty(B) COMMA expr(C). { A = new Token((B->data) + ", " + (C->data), C); delete B; delete C; }

exprList(A) ::= . { A = genEmpty(); }
exprList(A) ::= exprList_nonEmpty(B). { A = B; }

// Related to expressions
expr(A) ::= NUMBER(B). { A = B; }
expr(A) ::= KILLS(B). {
    B->data = "4";
    A = B;
}

expr(A) ::= NAME(B). {
    checkIsRValue(B->data, B->line);
    A = B;
}

expr(A)::= expr(B) PERIOD NAME(C). [MEMBER] {
    B->data = B->data + "." + C->data;
    delete C;
    A = mkTokenTemp(B);
}

expr(A)::= expr(B) LSQBRACKET expr(C) RSQBRACKET. [SUBSCRIPT] {
    B->data = B->data + "[" + C->data + "]";
    delete C;
    A = mkTokenTemp(B);
}

// Function calls
fArgs_nonEmpty(A) ::= expr(B). { A = B; }
fArgs_nonEmpty(A) ::= STRING(B). { A = B; }
fArgs_nonEmpty(A) ::= NAME(B) ASSIGN expr(C). {  // Keyword argument
    C->data = B->data + "=" + C->data;
    C->type = TOKEN_TEMP;
    A = C;
    delete B;
}

fArgs_nonEmpty(A) ::= fArgs_nonEmpty(B) COMMA fArgs_nonEmpty(C). {
    C->data = B->data + ", " + C->data;
    C->type = TOKEN_TEMP;
    A = C;
    delete B;
}

fArgs(A) ::= . { A = genEmpty(); }
fArgs(A) ::= fArgs_nonEmpty(B). { A = B; }

funcexpr(out) ::= NAME(name) LPAREN fArgs(exprs) RPAREN.  [FUNCCALL] {
    functionCalledInMultipleActions = true;

    // Preprocess name
    funcNamePreprocess(name->data);
    checkIsFunction(name->data, name->line);
    name->data += "(" + exprs->data + ")";
    out = mkTokenTemp(name);
}

funcexpr(out) ::= expr(name) LPAREN fArgs(exprs) RPAREN.  [FUNCCALL] {
    functionCalledInMultipleActions = true;

    // If calling function imported from another module, add f_ prefix to function name.
    static std::regex prefixedFuncNameRegex("^[a-z][_a-zA-Z0-9]*");
    std::string& nameStr = name->data;
    if(std::count(nameStr.begin(), nameStr.end(), '.') == 1) {
        size_t p = nameStr.find('.');
        std::string moduleName = nameStr.substr(0, p);
        std::string funcName = nameStr.substr(p + 1);
        if (closure->isModule(moduleName) && std::regex_match(funcName, prefixedFuncNameRegex)) {
            funcNamePreprocess(funcName);
            name->data = moduleName + '.' + funcName;
        }
    }

    // Preprocess name
    name->data += "(" + exprs->data + ")";
    out = mkTokenTemp(name);
}


// Objects


// Expressions
expr(A) ::= funcexpr(B).  { A = B; }

expr(A) ::= LPAREN expr(B) RPAREN. {
    B->data = "(" + B->data + ")";
    A = mkTokenTemp(B);
}

commaSkippable ::= COMMA.
commaSkippable ::= .

expr(A) ::= LSQBRACKET exprList_nonEmpty(B) commaSkippable RSQBRACKET. {
    B->data = "_ARR(FlattenList([" + B->data + "]))";
    A = mkTokenTemp(B);
}

expr(A) ::= L2V LPAREN expr(B) RPAREN. {
    B->data = "_L2V(" + B->data + ")";
    A = mkTokenTemp(B);
}

expr(A) ::= MAPSTRING LPAREN STRING(B) RPAREN. {
    B->data = "GetStringIndex(" + B->data + ")";
    A = mkTokenTemp(B);
}

expr(A) ::= UNIT LPAREN STRING(B) RPAREN. {
    B->data = "EncodeUnit(" + B->data + ")";
    A = mkTokenTemp(B);
}

expr(A) ::= SWITCH LPAREN STRING(B) RPAREN. {
    B->data = "EncodeSwitch(" + B->data + ")";
    A = mkTokenTemp(B);
}

expr(A) ::= LOCATION LPAREN STRING(B) RPAREN. {
    B->data = "GetLocationIndex(" + B->data + ")";
    A = mkTokenTemp(B);
}

// Ternary operators
expr(A) ::= expr(L) QMARK expr(B) COLON expr(C). [QMARK] {
    std::stringstream ss;
    ss << "EUDTernary";
    applyNegativeOptimization(ss, L);
    ss << "(" << B->data << ")(" << C->data << ")";
    C->data = ss.str();
    delete L;
    delete B;
    A = mkTokenTemp(C);
}

// Binary operators
expr(A) ::= expr(B) PLUS        expr(C). { A = binopConcat(B, "+",  C); }
expr(A) ::= expr(B) MINUS       expr(C). { A = binopConcat(B, "-",  C); }
expr(A) ::= expr(B) MULTIPLY    expr(C). { A = binopConcat(B, "*",  C); }
expr(A) ::= expr(B) DIVIDE      expr(C). { A = binopConcat(B, "//", C); }
expr(A) ::= expr(B) MOD         expr(C). { A = binopConcat(B, "%",  C); }
expr(A) ::= expr(B) LSHIFT      expr(C). {
    C->data = "_LSH(" + B->data + "," + C->data + ")";
    delete B;
    A = mkTokenTemp(C);
}
expr(A) ::= expr(B) RSHIFT      expr(C). { A = binopConcat(B, ">>", C); }
expr(A) ::= expr(B) BITAND      expr(C). { A = binopConcat(B, "&",  C); }
expr(A) ::= expr(B) BITOR       expr(C). { A = binopConcat(B, "|",  C); }
expr(A) ::= expr(B) BITXOR      expr(C). { A = binopConcat(B, "^",  C); }

// Unary operators
expr(A) ::= PLUS    expr(B). [UNARY] { B->data = "+" + B->data; A = mkTokenTemp(B); }
expr(A) ::= MINUS   expr(B). [UNARY] { B->data = "-" + B->data; A = mkTokenTemp(B); }
expr(A) ::= BITNOT  expr(B). [UNARY] { B->data = "~" + B->data; A = mkTokenTemp(B); }


// Logical expressions
expr(A) ::= expr(B) EQ expr(C).   { A = binopConcat(B, "==", C); }
expr(A) ::= expr(B) NE expr(C).   {
    A = genEmpty();
    A->line = C->line;

    A->type = TOKEN_NE;
    A->subToken[0] = B;
    A->subToken[1] = C;
    A->data = B->data + " != " + C->data;
}

expr(A) ::= expr(B) LE expr(C).   { A = binopConcat(B, "<=", C); }
expr(A) ::= expr(B) LT expr(C).   { A = binopConcat(B, "<",  C); }
expr(A) ::= expr(B) GE expr(C).   { A = binopConcat(B, ">=", C); }
expr(A) ::= expr(B) GT expr(C).   { A = binopConcat(B, ">" , C); }


expr(A) ::= expr(B) LAND expr(C).  {
    A = genEmpty();
    A->line = C->line;

    // Generate data!
    A->type = TOKEN_LAND;
    A->subToken[0] = B;
    A->subToken[1] = C;

    std::stringstream ss;
    ss << "EUDSCAnd()";
    shortCircuitCondListGetter(ss, A, TOKEN_LAND);
    ss << "()";
    A->data = ss.str();
}

// OR operation is very costly, so we make some deliberate choice!
expr(A) ::= expr(B) LOR expr(C).  {
    A = genEmpty();
    A->line = C->line;

    // Generate data!
    A->type = TOKEN_LOR;
    A->subToken[0] = B;
    A->subToken[1] = C;

    std::stringstream ss;
    ss << "EUDSCOr()";
    shortCircuitCondListGetter(ss, A, TOKEN_LOR);
    ss << "()";
    A->data = ss.str();
}

expr(A) ::= LNOT expr(B).  {
    if(B->type == TOKEN_LNOT) {
        A = B->subToken[0];
        B->subToken[0] = nullptr;
        delete B;
    }
    else {
        A = genEmpty();
        A->line = B->line;
        A->type = TOKEN_LNOT;
        A->data = "EUDNot(" + B->data + ")";
        A->subToken[0] = B;
    }
}


// Statements
vdef_stmt ::= VAR nameList_nonEmpty(A). {
    std::string& s = A->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(196, ("Redeclaration of variable \'" + varname + "\'"), A->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
    }
    else {
        ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    }

    delete A;
}

vdefAssign_stmt ::= VAR nameList_nonEmpty(A) ASSIGN exprList_nonEmpty(B). {
    std::string& s = A->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), A->line);
        }
    });

    if(varCount == 1) {
        ps->gen << s << " = EUDVariable()" << std::endl;
        ps->gen << s << " << (" << B->data << ")" << std::endl;
    }
    else {
        ps->gen << s << " = _MVAR([" << B->data << "])" << std::endl;
    }

    delete A; delete B;
}

vdefAssign_global_stmt ::= VAR nameList_nonEmpty(A) ASSIGN exprList_nonEmpty(B). {
    std::string& s = A->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register variables.
    commaListIter(s, [&](std::string& varname) {
        if(!ps->closure.defVariable(varname)) {
            throw_error(7998, ("Redeclaration of variable \'" + varname + "\'"), A->line);
        }
    });

    ps->gen << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;
    ps->gen << "_IGVA([" << s << "], lambda: [" << B->data << "])" << std::endl;

    delete A; delete B;
}

cdef_stmt ::= CONST nameList_nonEmpty(A) ASSIGN exprList_nonEmpty(B). {
    std::string& s = A->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), A->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = " << B->data << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable([" << B->data << "])" << std::endl;
    }
    delete A; delete B;
}

cdef_global_stmt ::= CONST nameList_nonEmpty(A) ASSIGN exprList_nonEmpty(B). {
    std::string& s = A->data;
    int nameCount = std::count(s.begin(), s.end(), ',') + 1;

    // Register constants.
    commaListIter(s, [&](std::string& constname) {
        if(!ps->closure.defConstant(constname)) {
            throw_error(7719, ("Redeclaration of constant \'" + constname + "\'"), A->line);
        }
    });
    if(nameCount == 1) {
        ps->gen << s << " = _CGFW(lambda: [" << B->data << "], 1)[0]" << std::endl;
    }
    else {
        ps->gen << s << " = List2Assignable(_CGFW(lambda: [" << B->data << "], " << nameCount << "))" << std::endl;
    }
    delete A; delete B;
}

// Assign operators
lvalue(A) ::= NAME(B). {
    checkIsVariable(B->data, B->line);
    A = B;
}

lvalue(A) ::= expr(B) LSQBRACKET expr(C) RSQBRACKET. [SUBSCRIPT] {
    checkIsConstant(B->data, B->line);
    C->data = "_ARRW(" + B->data + ", " + C->data + ")";
    A = mkTokenTemp(C);
    delete B;
}

lvalue(A) ::= expr(B) PERIOD NAME(C). [MEMBER] {
    checkIsConstant(B->data, B->line);
    C->data = "_ATTW(" + B->data + ", '" + C->data + "')";
    A = mkTokenTemp(C);
    delete B;
}

lvalueList_nonEmpty(A) ::= lvalue(B). { A = B; }
lvalueList_nonEmpty(A) ::= lvalueList_nonEmpty(B) COMMA lvalue(C). { A = commaConcat(B, C); }

assign_stmt ::= lvalue(A) ASSIGN expr(B). {
    ps->gen << A->data << " << (" << B->data << ")" << std::endl;
    delete A; delete B;
}

assign_stmt ::= lvalueList_nonEmpty(A) ASSIGN exprList_nonEmpty(B). {
    ps->gen << "_SV([" << A->data << "], [" << B->data << "])" << std::endl;
    delete A; delete B;
}

// Never use something like "+=" here! They may corrupt python namespaces!
// Assignment like += alters python namespaces (Makes thing local), so they should not be used
// when accessing global variables. Here we just call plain inplace operator functions.
assign_stmt ::= INC expr(A). [ASSIGN] { ps->gen << A->data << ".__iadd__(1)" << std::endl; delete A; }
assign_stmt ::= expr(A) INC. [ASSIGN] { ps->gen << A->data << ".__iadd__(1)" << std::endl; delete A; }
assign_stmt ::= DEC expr(A). [ASSIGN] { ps->gen << A->data << ".__isub__(1)" << std::endl; delete A; }
assign_stmt ::= expr(A) DEC. [ASSIGN] { ps->gen << A->data << ".__isub__(1)" << std::endl; delete A; }
assign_stmt ::= lvalue(A) IADD expr(B). [ASSIGN] { ps->gen << A->data << ".__iadd__("       << B->data << ")" << std::endl; delete A; delete B; }
assign_stmt ::= lvalue(A) ISUB expr(B). [ASSIGN] { ps->gen << A->data << ".__isub__("       << B->data << ")" << std::endl; delete A; delete B; }
assign_stmt ::= lvalue(A) IMUL expr(B). [ASSIGN] { ps->gen << A->data << ".__imul__("       << B->data << ")" << std::endl; delete A; delete B; }
assign_stmt ::= lvalue(A) IDIV expr(B). [ASSIGN] { ps->gen << A->data << ".__ifloordiv__("  << B->data << ")" << std::endl; delete A; delete B; }
assign_stmt ::= lvalue(A) IMOD expr(B). [ASSIGN] { ps->gen << A->data << ".__imod__("       << B->data << ")" << std::endl; delete A; delete B; }
assign_stmt ::= lvalue(A) ILSH expr(B). [ASSIGN] { ps->gen << A->data << ".__ilshift__("    << B->data << ")" << std::endl; delete A; delete B; }
assign_stmt ::= lvalue(A) IRSH expr(B). [ASSIGN] { ps->gen << A->data << ".__irshift__("    << B->data << ")" << std::endl; delete A; delete B; }
assign_stmt ::= lvalue(A) IBND expr(B). [ASSIGN] { ps->gen << A->data << ".__iand__("       << B->data << ")" << std::endl; delete A; delete B; }
assign_stmt ::= lvalue(A) IBOR expr(B). [ASSIGN] { ps->gen << A->data << ".__ior__("        << B->data << ")" << std::endl; delete A; delete B; }
assign_stmt ::= lvalue(A) IBXR expr(B). [ASSIGN] { ps->gen << A->data << ".__ixor__("       << B->data << ")" << std::endl; delete A; delete B; }

// If~Else block
if_start(A) ::= IF(B). {
    A = genTemp(B);
    ps->gen << A->data << " = EUDIf()" << std::endl;
}

if_header ::= if_start(A) LPAREN expr(B) RPAREN. {
    writeCsOpener(*pGen, A, B);
    ps->gen.indent();
    delete A; delete B;
}

if_block ::= if_header stmt.

elif_start(A) ::= ELSE IF(B). {
    A = genTemp(B);
    ps->gen.unindent(false);
    ps->gen << A->data << " = EUDElseIf()" << std::endl;
}

elif_header ::= elif_start(A) LPAREN expr(B) RPAREN. {
    writeCsOpener(*pGen, A, B);
    ps->gen.indent();
    delete A; delete B;
}

if_block ::= if_block elif_header stmt.

else_header ::= ELSE. {
    ps->gen.unindent(false);
    ps->gen << "if EUDElse()():" << std::endl;
    ps->gen.indent();
}

if_stmt ::= if_block. [IFX] {
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
}

if_stmt ::= if_block else_header stmt. [ELSE] {
    ps->gen.unindent(false);
    ps->gen << "EUDEndIf()" << std::endl;
}


// While block
while_start(A) ::= WHILE(B). {
    A = genTemp(B);
    ps->gen << A->data << " = EUDWhile()" << std::endl;
    delete B;
}

while_header ::= while_start(A) LPAREN expr(B) RPAREN. {
    writeCsOpener(*pGen, A, B);
    ps->gen.indent();
    delete A; delete B;
}

while_stmt ::= while_header stmt. {
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
}

/// FOR/FOREACH
for_opener ::= FOR LPAREN. {
    ps->closure.pushScope();
}

// C-style for block
for_init_stmt_nonEmpty ::= vdef_stmt.
for_init_stmt_nonEmpty ::= vdefAssign_stmt.
for_init_stmt_nonEmpty ::= cdef_stmt.
for_init_stmt_nonEmpty ::= assign_stmt.
for_init_stmt_nonEmpty ::= for_init_stmt_nonEmpty COMMA for_init_stmt_nonEmpty.
for_init_stmt ::= for_init_stmt_nonEmpty.
for_init_stmt ::= .

for_action_stmt_nonEmpty ::= assign_stmt.
for_action_stmt_nonEmpty ::= for_action_stmt_nonEmpty COMMA for_action_stmt_nonEmpty.
for_action_stmt ::= .
for_action_stmt ::= for_action_stmt_nonEmpty.

for_header1(A) ::= for_opener for_init_stmt SEMICOLON(B). {
    // opening for expr
    A = genTemp(B);
    ps->gen << A->data << " = EUDWhile()" << std::endl;
    delete B;
}

for_header2(X)::= for_header1(A) expr(B) SEMICOLON. {
    writeCsOpener(*pGen, A, B);
    ps->gen.indent();
    delete A; delete B;

    // Opening for assign_statement
    X = genTemp(B);
    ps->gen << "def " << X->data <<"():" << std::endl;
    ps->gen.indent();
}

for_header(X) ::= for_header2(A) for_action_stmt RPAREN. {
    X = A;
    ps->gen.unindent(false);
}

for_stmt ::= for_header(X) stmt. {
    ps->gen << "EUDSetContinuePoint()" << std::endl;
    ps->gen << X->data << "()" << std::endl;
    ps->gen.unindent(false);
    ps->gen << "EUDEndWhile()" << std::endl;
    ps->closure.popScope();
}



// Foreach block
foreach_opener ::= FOREACH LPAREN. {
    ps->closure.pushScope();
}

foreach_header ::= foreach_opener nameList_nonEmpty(names) COLON exprList_nonEmpty(exprs) RPAREN. {
    commaListIter(names->data, [&](std::string& s) {
        ps->closure.defVariable(s);
    });
    ps->gen << "for " << names->data << " in " << exprs->data << ":" << std::endl;
    ps->gen.indent();
}

foreach_stmt ::= foreach_header stmt. {
    ps->gen.unindent(true);
    ps->closure.popScope();
}



// Loop exits
continue_stmt ::= CONTINUE. {
    ps->gen << "EUDContinue()" << std::endl;
}

break_stmt ::= BREAK. {
    ps->gen << "EUDBreak()" << std::endl;
}



// returns
return_stmt ::= RETURN exprList(exprs). {
    if(MAP_DEBUG){
        ps->gen << "MDBG_POPF()" << std::endl;
    }
    ps->gen << "EUDReturn(" << exprs->data << ")" << std::endl;
    delete exprs;
}


// Trigger statements

expr(A) ::= CONDITIONNAME(B) LPAREN fArgs(C) RPAREN. {
    B->data = B->data + "(" + C->data + ")";
    delete C;
    A = mkTokenTemp(B);
}

expr(A) ::= KILLS(B) LPAREN fArgs(C) RPAREN. {
    B->data = B->data + "(" + C->data + ")";
    delete C;
    A = mkTokenTemp(B);
}

actionStmt ::= ACTIONNAME(A) LPAREN fArgs(B) RPAREN SEMICOLON. {
    ps->gen << "DoActions(" << A->data << "(" << B->data << "))" << std::endl;
    delete A; delete B;
}


// Program building block

%code {

PyGenerator* pGen;
ClosureManager* closure;

std::string ParseString(const std::string& fname, const std::string& code, bool addComment)
{
    // Module name from fname
    // last \/ ~ first .
    auto lpos = fname.find_last_of("\\/");
    if(lpos == std::string::npos) lpos = 0;
    else lpos++;
    auto rpos = fname.find_first_of(".", lpos);
    if(rpos == std::string::npos) rpos = fname.size();
    currentModule = fname.substr(lpos, rpos - lpos);

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(stdout, "--");
#endif

    // Main code
    Tokenizer tok(code);
    void* pParser = ParseAlloc (malloc);
    ParserStruct ps;
    Token* token;
    currentTokenizingLine = 0;
    pGen = &ps.gen;
    closure = &ps.closure;
    functionCalledInMultipleActions = false;

    if(PARSER_DEBUG) std::cout << "Parsing string [[[\n" << code.c_str() << "\n]]]\n";
    if(MAP_DEBUG) {
        ps.gen <<
            "try:\n"
            "   MDBG_LOG = GetEUDNamespace()['MDBG_LOG']\n"
            "   MDBG_PUSHF = GetEUDNamespace()['MDBG_PUSHF']\n"
            "   MDBG_POPF = GetEUDNamespace()['MDBG_POPF']\n"
            "except KeyError:\n"
            "    mdbg_dbepd = EPD(Db(b'0123456789ABCDEFFEDCBA9876543210' + bytes(32 * 2048)))\n"
            "    mdbg_dbc = EUDVariable()\n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_LOG(line):\n"
            "        lIdf = b2i4(u2b('%4d' % line))\n"
            "        DoActions(SetMemoryEPD(mdbg_dbepd + 3 + mdbg_dbc, SetTo, lIdf))\n"
            "    \n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_PUSHF(f_name, m_name):\n"
            "        global mdbg_dbc\n"
            "        data = ((u2b(m_name) + bytes(12))[:12] + b'   0' + (u2b(f_name) + bytes(16))[:16])\n"
            "        mdbg_dbc += 8\n"
            "        DoActions([SetMemoryEPD(mdbg_dbepd + i + mdbg_dbc, SetTo, b2i4(data, i * 4)) for i in range(8)])\n"
            "    \n"
            "    @EUDRegistered\n"
            "    def MDBG_POPF():\n"
            "        global mdbg_dbc\n"
            "        DoActions([SetMemoryEPD(mdbg_dbepd + i + mdbg_dbc, SetTo, 0) for i in range(8)])\n"
            "        mdbg_dbc -= 8\n"
            "\n";
    }

    tmpIndex = 1;
    resetParserErrorNum();
    while ((token = tok.getToken()) != nullptr) {
        if (currentTokenizingLine != tok.getCurrentLine()) {
            if(addComment) {
                currentTokenizingLine = tok.getCurrentLine();
                ps.gen << "# (Line " << currentTokenizingLine << ") " << trim(tok.getCurrentLineString()) << std::endl;
                if(MAP_DEBUG && !currentFunction.empty()) {
                    ps.gen << "MDBG_LOG(" << currentTokenizingLine << ")" << std::endl;
                }
            }
            if(PARSER_DEBUG) printf("# reading line %s\n", tok.getCurrentLineString().c_str());
        }
        if (tokenTypeConv(token)) {
            Parse (pParser, token->type, token, &ps);
        }
        else {
            throw_error(8104, "Invalid token");
        }
    }
    Parse (pParser, 0, nullptr, &ps);
    ParseFree(pParser, free );

    std::string ret = iwCollapse(ps.gen.str());
    if(getParseErrorNum() > 0) {
        ret += "\nraise RuntimeError('Compile error')\n";
    }

#ifndef NDEBUG
    if(PARSER_DEBUG) ParseTrace(NULL, "--");
#endif

    return ret;
}
}
