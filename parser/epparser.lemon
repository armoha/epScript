%include {
#include <stdio.h>
#include <assert.h>
#include <string>
#include <iostream>
#include <sstream>
#include "epparser.h"
#include "pygen.h"
#include "tokenAdapter.h"
#include "parserUtilities.h"

int currentTokenizingLine;
}

%syntax_error {
    errorOccured = true;
    throw_error(currentTokenizingLine, 629, "General syntax error");
}

%parse_failure {
    throw_error(-1, 629, "Unrecoverable error");
}

////////

%extra_argument { PyGenerator* pGen }
%token_type {Token*}
%destructor nt { delete $$; }

// Precedence table

%left COMMA.
%left ASSIGN.

%left LOR.
%left LAND.
%right LNOT.
%right DOUBLE_LNOT.  // Faster optimization for double lnot

%nonassoc EQ LE LT GE GT NE.

%left BITOR.
%left BITXOR.
%left BITAND.
%left LSHIFT RSHIFT.
%left PLUS MINUS.
%left DIVIDE MULTIPLY MOD.
%right UNARY BITNOT.
%nonassoc NUMBER NAME.

program ::= chunks.

// Common expressions
numList(A) ::= NUMBER(B) COMMA NUMBER(C). {
    A = new Token(B->data + ", " + C->data, C);
    delete B; delete C;
}
numList(A) ::= numList(B) COMMA NUMBER(C). {
    A = new Token(B->data + ", " + C->data, C);
    delete B; delete C;
}
nameList(A) ::= NAME(B) COMMA NAME(C). { A = new Token((B->data) + ", " + (C->data), C); delete B; delete C; }
nameList(A) ::= nameList(B) COMMA NAME(C). { A = new Token((B->data) + ", " + (C->data), C); delete B; delete C; }
exprList(A) ::= funcexpr(B) LSQBRACKET LSQBRACKET numList(C) RSQBRACKET RSQBRACKET. {
    A = genTemp(C);
    (*pGen) << A->data << " = _SRET(" << B->data << ", [" << C->data << "])" << std::endl;
    delete B; delete C;
}
expr(A) ::= funcexpr(B) LSQBRACKET LSQBRACKET NUMBER(C) RSQBRACKET RSQBRACKET. {
    A = genTemp(C);
    (*pGen) << A->data << " = _SRET(" << B->data << ", [" << C->data << "])" << std::endl;
    delete B; delete C;
}

exprList(A) ::= expr(B). [COMMA] { A = B; }
exprList(A) ::= exprList(B) COMMA expr(C). { A = new Token((B->data) + ", " + (C->data), C); delete B; delete C; }

// Related to expressions
expr(A) ::= NUMBER(B). { A = B; }
expr(A) ::= NAME(B). {
    if(pGen->undefined(B->data)) {
        throw_error(B->line, 103, ("Undeclared variable \'" + (B->data) + "\'"));
        pGen->namedef(B->data);
    }
    A = B;
}

// Function calls
funcexpr(out) ::= NAME(name) LPAREN exprList(exprs) RPAREN.  [FUNCCALL] {
    // Preprocess name
    if(name->data[0] == '_' || ('A' <= name->data[0] && name->data[0] <= 'Z'));  // Name starts with uppercase -> Don't modify
    else {
        name->data = "f_" + name->data;
    }
    /*
    if (pGen->undefined(name->data)) {
        throw_error(name->line, 4449, ("Undefined function " + name->data));
        pGen->namedef(name->data);
    }
    */

    name->data += "(" + exprs->data + ")";
    out = mkTokenTemp(name, *pGen);
}


funcexpr(out) ::= NAME(name) LPAREN RPAREN.  [FUNCCALL] {
    // Preprocess name
    if(name->data[0] == '_' || ('A' <= name->data[0] && name->data[0] <= 'Z'));  // Name starts with uppercase -> Don't modify
    else {
        name->data = "f_" + name->data;
    }

    /*
    if (pGen->undefined(name->data)) {
        throw_error(name->line, 4449, ("Undefined function " + name->data));
        pGen->namedef(name->data);
    }
    */

    name->data += "()";
    out = mkTokenTemp(name, *pGen);
}


// Binary operators
expr(A) ::= funcexpr(B).  { A = B; }
expr(A) ::= LPAREN expr(B) RPAREN. {
    B->data = "(" + B->data + ")";
    A = mkTokenTemp(B, *pGen);
}

expr(A) ::= MAPSTRING LPAREN STRING(B) RPAREN. {
    B->data = "EncodeString(" + B->data + ")";
    A = mkTokenTemp(B, *pGen);
}

expr(A) ::= UNIT LPAREN STRING(B) RPAREN. {
    B->data = "EncodeUnit(" + B->data + ")";
    A = mkTokenTemp(B, *pGen);
}

expr(A) ::= SWITCH LPAREN STRING(B) RPAREN. {
    B->data = "EncodeSwitch(" + B->data + ")";
    A = mkTokenTemp(B, *pGen);
}

expr(A) ::= LOCATION LPAREN STRING(B) RPAREN. {
    B->data = "EncodeLocation(" + B->data + ")";
    A = mkTokenTemp(B, *pGen);
}

expr(A) ::= expr(B) PLUS        expr(C). { A = binaryMerge(B, "+",  C, *pGen); }
expr(A) ::= expr(B) MINUS       expr(C). { A = binaryMerge(B, "-",  C, *pGen); }
expr(A) ::= expr(B) MULTIPLY    expr(C). { A = binaryMerge(B, "*",  C, *pGen); }
expr(A) ::= expr(B) DIVIDE      expr(C). { A = binaryMerge(B, "//", C, *pGen); }
expr(A) ::= expr(B) MOD         expr(C). { A = binaryMerge(B, "%",  C, *pGen); }
expr(A) ::= expr(B) LSHIFT      expr(C). { A = binaryMerge(B, "<<", C, *pGen); }
expr(A) ::= expr(B) RSHIFT      expr(C). { A = binaryMerge(B, ">>", C, *pGen); }
expr(A) ::= expr(B) BITAND      expr(C). { A = binaryMerge(B, "&",  C, *pGen); }
expr(A) ::= expr(B) BITOR       expr(C). { A = binaryMerge(B, "|",  C, *pGen); }
expr(A) ::= expr(B) BITXOR      expr(C). { A = binaryMerge(B, "^",  C, *pGen); }

// Unary operators
expr(A) ::= PLUS    expr(B). [UNARY] { A = genTemp(B); (*pGen) << A->data << " = +" << B->data << std::endl; delete B; }
expr(A) ::= MINUS   expr(B). [UNARY] { A = genTemp(B); (*pGen) << A->data << " = -" << B->data << std::endl; delete B; }
expr(A) ::= BITNOT  expr(B). [UNARY] { A = genTemp(B); (*pGen) << A->data << " = ~" << B->data << std::endl; delete B; }


lexpr(A) ::= expr(B) EQ expr(C).   { A = binaryMerge(B, "==", C, *pGen); }
lexpr(A) ::= expr(B) NE expr(C).   { A = binaryMerge(B, "!=", C, *pGen); }
lexpr(A) ::= expr(B) LE expr(C).   { A = binaryMerge(B, "<=", C, *pGen); }
lexpr(A) ::= expr(B) LT expr(C).   { A = binaryMerge(B, "<",  C, *pGen); }
lexpr(A) ::= expr(B) GE expr(C).   { A = binaryMerge(B, ">=", C, *pGen); }
lexpr(A) ::= expr(B) GT expr(C).   { A = binaryMerge(B, ">" , C, *pGen); }

lexpr(A) ::= lexpr(B) LAND lexpr(C).  {
    B->data = "[" + B->data + ", " + C->data + "]";
    delete C;
    A = mkTokenTemp(B, *pGen);
}

lexpr(A) ::= lexpr(B) LOR lexpr(C).  {
    B->data = "EUDOr([" + B->data + ", " + C->data + "])";
    delete C;
    A = mkTokenTemp(B, *pGen);
}

lexpr(A) ::= LNOT lexpr(B).  {
    B->data = "EUDNot([" + B->data + "])";
    A = mkTokenTemp(B, *pGen);
}

lexpr(A) ::= LNOT LNOT lexpr(B).  [DOUBLE_LNOT] { A = B; }



// Statements
vdef_stmt ::= VAR NAME(A) SEMICOLON. {
    (*pGen) << A->data << " = EUDVariable()" << std::endl;
    pGen->namedef(A->data);
    delete A;
}

vdefAssign_stmt ::= VAR NAME(A) ASSIGN expr(B) SEMICOLON. {
    (*pGen) << A->data << " = _MVAR([" << B->data << "])" << std::endl;
    if(!pGen->namedef(A->data)) {
        throw_error(A->line, 196, ("Redeclaration of variable \'" + (A->data) + "\'"));
    }
    delete A;
}

vdefMulti_stmt ::= VAR nameList(A) SEMICOLON. {
    std::string& s = A->data;
    int varCount = std::count(s.begin(), s.end(), ',') + 1;
    (*pGen) << s << " = EUDCreateVariables(" << varCount << ")" << std::endl;

    // Register variables.
    commaListIter(s, [&](const std::string& varname) {
        if(!pGen->namedef(varname)) {
            throw_error(A->line, 196, ("Redeclaration of variable \'" + varname + "\'"));
        }
    });
    delete A;
}

vdefMultiAssign_stmt ::= VAR nameList(A) ASSIGN exprList(B) SEMICOLON. {
    std::string& s = A->data;
    (*pGen) << s << " = _MVAR([" << B->data << "])" << std::endl;

    // Register variables.
    commaListIter(s, [&](const std::string& varname) {
        if(!pGen->namedef(varname)) {
            throw_error(A->line, 196, ("Redeclaration of variable \'" + varname + "\'"));
        }
    });

    delete A; delete B;
}

assign_stmt ::= NAME(A) ASSIGN expr(B) SEMICOLON. {
    (*pGen) << A->data << " << " << B->data << std::endl;
    if(pGen->undefined(A->data)) {
        throw_error(A->line, 103, ("Undeclared variable \'" + (A->data) + "\'"));
        pGen->namedef(A->data);
    }
    delete A; delete B;
}

assignMulti_stmt ::= nameList(A) ASSIGN exprList(B) SEMICOLON. {
    (*pGen) << "SetVariables([" << A->data << "], [" << B->data << "])" << std::endl;

    commaListIter(A->data, [&](const std::string& varname) {
        if(pGen->undefined(varname)) {
            throw_error(A->line, 103, ("Undeclared variable \'" + varname + "\'"));
            pGen->namedef(varname);
        }
    });

    delete A; delete B;
}

// Control blocks
stmtList ::= stmt.
stmtList ::= stmtList stmt.
block ::= LBRACKET stmtList RBRACKET.
block ::= LBRACKET error RBRACKET(A). {
    throw_error(A->line, 6298, "Block not terminated properly.");
}


// If~Else block
if_start(A) ::= IF(B). {
    A = genTemp(B);
    (*pGen) << A->data << " = EUDIf()" << std::endl;
}
if_header ::= if_start(A) LPAREN lexpr(B) RPAREN. {
    (*pGen) << "if " << A->data << "(" << B->data << "):" << std::endl;
    pGen->indent();
    delete A; delete B;
}

if_stmt ::= if_header stmt. [IFX] {
    pGen->unindent(false);
    (*pGen) << "EUDEndIf()" << std::endl;
}

else_header ::= if_header stmt ELSE. [ELSE] {
    pGen->unindent(false);
    (*pGen) << "if EUDElse()():" << std::endl;
    pGen->indent();
}

if_stmt ::= else_header stmt. {
    pGen->unindent(false);
    (*pGen) << "EUDEndIf()" << std::endl;
}


// While block
while_start(A) ::= WHILE(B). {
    A = genTemp(B);
    (*pGen) << A->data << " = EUDWhile()" << std::endl;
    delete B;
}

while_header ::= while_start(A) LPAREN lexpr(B) RPAREN. {
    (*pGen) << "if " << A->data << "(" << B->data << "):" << std::endl;
    pGen->indent();
    delete A; delete B;
}

while_stmt ::= while_header stmt. {
    pGen->unindent(false);
    (*pGen) << "EUDEndWhile()" << std::endl;
}

// Foreach block
foreach_header ::= FOR LPAREN nameList(names) COLON exprList(exprs) RPAREN. {
    (*pGen) << "for " << names->data << " in " << exprs->data << ":" << std::endl;
    pGen->indent();
}

foreach_stmt ::= foreach_header stmt. {
    pGen->unindent(true);
}


// Loop exits
continue_stmt ::= CONTINUE SEMICOLON. {
    (*pGen) << "EUDContinue()" << std::endl;
}

break_stmt ::= BREAK SEMICOLON. {
    (*pGen) << "EUDBreak()" << std::endl;
}

// Function declaration
function_start(start) ::= FUNCTION NAME(name).  {
    // Preprocess name
    if(name->data[0] == '_' || ('A' <= name->data[0] && name->data[0] <= 'Z'));  // Name starts with uppercase -> Don't modify
    else {
        name->data = "f_" + name->data;
    }

    start = name;
    if(!pGen->namedef(name->data)) {
        throw_error(name->line, 4495, "Duplicate function name " + name->data);
    }
}

function_header ::= function_start(fname) LPAREN nameList(args) RPAREN. {
    (*pGen) << "@EUDFunc" << std::endl;
    (*pGen) << "def " << fname->data << "(" << args->data << "):" << std::endl;
    pGen->indent();

    // Register variables.
    const std::string& s = args->data;
    commaListIter(args->data, [&](const std::string& varname) {
        if(!pGen->namedef(varname)) {
            throw_error(args->line, 196, ("Redeclaration of variable \'" + varname + "\'"));
        }
    });

    tmpIndex = 1;
    delete fname; delete args;
}

function_header ::= function_start(fname) LPAREN RPAREN. {
    (*pGen) << "@EUDFunc" << std::endl;
    (*pGen) << "def " << fname->data << "():" << std::endl;
    pGen->indent();
    tmpIndex = 1;
    delete fname;
}

fdef_chunk ::= function_header stmt. {
    pGen->unindent(true);
}


// returns
return_stmt ::= RETURN SEMICOLON. {
    (*pGen) << "EUDReturn()" << std::endl;
}
return_stmt ::= RETURN exprList(exprs) SEMICOLON. {
    (*pGen) << "EUDReturn(" << exprs->data << ")" << std::endl;
    delete exprs;
}



// Trigger statements
caExpr(A) ::= expr(B). { A = B; }
caExpr(A) ::= STRING(B). { A = B; }
caExpr(A) ::= caExpr(B) COMMA caExpr(C). {
    B->data = B->data + ", " + C->data;
    B->type = TOKEN_TEMP;
    A = B;
}


lexpr(A) ::= CONDITIONNAME(B) LPAREN caExpr(C) RPAREN. {
    B->data = B->data + "(" + C->data + ")";
    delete C;
    A = mkTokenTemp(B, *pGen);
}

lexpr(A) ::= CONDITIONNAME(B) LPAREN RPAREN. {
    B->data = B->data + "()";
    A = mkTokenTemp(B, *pGen);
}

action(X) ::= ACTIONNAME(A) LPAREN caExpr(B) RPAREN SEMICOLON. {
    X = genTemp(A);
    X->data =  A->data + "(" + B->data + ")";
    delete A; delete B;
}

actions(A) ::= action(B) action(C). {
    A = B;
    B->data += ",\n" + C->data;
    delete C;
}

actions(A) ::= actions(B) action(C). {
    A = B;
    B->data += ",\n" + C->data;
    delete C;
}

actionStmt ::= action(X). {
    (*pGen) << "DoEvents(" << X->data << ")" << std::endl;
    delete X;
}

actionStmt ::= actions(X). {
    (*pGen) << "DoEvents([" << std::endl;
    pGen->indent();
    (*pGen) << X->data << std::endl;
    pGen->unindent(false);
    (*pGen) << "])" << std::endl;
    delete X;
}


// General statements
stmt ::= error SEMICOLON(A). { throw_error(A->line, 6974, "Error while parsing statement"); }


stmt ::= SEMICOLON.
stmt ::= vdef_stmt.
stmt ::= vdefAssign_stmt.
stmt ::= vdefMultiAssign_stmt.
stmt ::= vdefMulti_stmt.
stmt ::= assign_stmt.
stmt ::= assignMulti_stmt.
stmt ::= funcexpr(A) SEMICOLON. { (*pGen) << A->data << std::endl; }
stmt ::= actionStmt.
stmt ::= if_stmt.
stmt ::= while_stmt.
stmt ::= foreach_stmt.
stmt ::= continue_stmt.
stmt ::= break_stmt.
stmt ::= return_stmt.
stmt ::= block.


// Program building block
chunk ::= fdef_chunk.
chunk ::= vdef_stmt.
chunk ::= vdefMulti_stmt.
chunks ::= .
chunks ::= chunks chunk.

%code {

// #define PARSER_DEBUG

std::string ParseString(const std::string& code)
{
    std::istringstream is(code);
    Tokenizer tok(is);
    void* pParser = ParseAlloc (malloc);
    PyGenerator pGen;
    Token* token;
    currentTokenizingLine = 0;

#ifdef PARSER_DEBUG
    std::cout << "Parsing string [[[\n" << code << "\n]]]\n";
#endif

    tmpIndex = 1;
    errorOccured = false;
    while ((token = tok.getToken()) != nullptr) {
        if (currentTokenizingLine != tok.getCurrentLine()) {
            currentTokenizingLine = tok.getCurrentLine();
            pGen << "# (Line " << currentTokenizingLine << ") " << trim(tok.getCurrentLineString()) << std::endl;
#ifdef PARSER_DEBUG
            printf("reading line %s\n", tok.getCurrentLineString().c_str());
#endif
        }
        if (tokenTypeConv(token)) {
            Parse (pParser, token->type, token, &pGen);
#ifdef PARSER_DEBUG
            ParseTrace(stdout, "-- ");
#endif
        }
        else {
            throw_error(token->line, 8104, "Invalid token");
        }
    }
    Parse (pParser, 0, nullptr, &pGen);
    ParseFree(pParser, free );

    if(!errorOccured) return iwCollapse(pGen.str());
    else throw std::runtime_error("Invalid syntax");
}
}