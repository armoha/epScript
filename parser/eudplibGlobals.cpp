#include <unordered_set>
#include "eudplibGlobals.h"
std::unordered_set<std::string> builtinFuncSet = {
        "Accumulate", "Action", "Always", "Assignable2List", "Bring",
        "CenterView", "Command", "CommandLeast", "CommandLeastAt", "CommandMost",
        "CommandMostAt", "Comment", "CompressPayload", "Condition", "ConstExpr",
        "CountdownTimer", "CreatePayload", "CreateUnit",
        "CreateUnitWithProperties", "CtrlStruOpener", "DBString", "Db", "Deaths",
        "Defeat", "Disabled", "DisplayExtText", "DisplayText", "DoActions",
        "Draw", "EPD", "EPError", "EUDAnd", "EUDArray", "EUDBinaryMax",
        "EUDBinaryMin", "EUDBranch", "EUDBreak", "EUDBreakIf", "EUDBreakIfNot",
        "EUDByteReader", "EUDByteWriter", "EUDClearNamespace", "EUDContinue",
        "EUDContinueIf", "EUDContinueIfNot", "EUDCreateBlock",
        "EUDCreateVariables", "EUDDoEvents", "EUDElse", "EUDElseIf",
        "EUDElseIfNot", "EUDEndExecuteOnce", "EUDEndIf", "EUDEndInfLoop",
        "EUDEndLoopN", "EUDEndPlayerLoop", "EUDEndSwitch", "EUDEndWhile",
        "EUDExecuteOnce", "EUDFunc", "EUDFuncPtr", "EUDGetBlockList",
        "EUDGetLastBlock", "EUDGetLastBlockOfName", "EUDGrp", "EUDIf", "EUDIfNot",
        "EUDInfLoop", "EUDIsContinuePointSet", "EUDJump", "EUDJumpIf",
        "EUDJumpIfNot", "EUDLightVariable", "EUDLoopBullet", "EUDLoopList",
        "EUDLoopN", "EUDLoopRange", "EUDLoopSprite", "EUDLoopTrigger",
        "EUDLoopUnit", "EUDMethod", "EUDNot", "EUDObject", "EUDOr",
        "EUDPeekBlock", "EUDPlayerLoop", "EUDPopBlock",
        "EUDRegisterObjectToNamespace", "EUDRegistered", "EUDReturn",
        "EUDSetContinuePoint", "EUDStack", "EUDStruct", "EUDSwitch",
        "EUDSwitchCase", "EUDSwitchDefault", "EUDTernary", "EUDTypedFunc",
        "EUDTypedFuncPtr", "EUDTypedMethod", "EUDVArray", "EUDVariable",
        "EUDWhile", "EUDWhileNot", "ElapsedTime", "EncodeAIScript",
        "EncodeAllyStatus", "EncodeComparison", "EncodeCount", "EncodeLocation",
        "EncodeModifier", "EncodeOrder", "EncodePlayer", "EncodePropState",
        "EncodeProperty", "EncodeResource", "EncodeScore", "EncodeString",
        "EncodeSwitch", "EncodeSwitchAction", "EncodeSwitchState", "EncodeUnit",
        "ExprProxy", "FlattenList", "Forward", "GetChkTokenized",
        "GetEUDNamespace", "GetFirstTrigTrigger", "GetLastTrigTrigger",
        "GetLocationIndex", "GetObjectAddr", "GetPlayerInfo", "GetPropertyIndex",
        "GetStringIndex", "GetSwitchIndex", "GetTriggerCounter", "GetUnitIndex",
        "GiveUnits", "HighestScore", "IsEUDVariable", "IsMapdataInitalized",
        "KillUnit", "KillUnitAt", "LeaderBoardComputerPlayers",
        "LeaderBoardControl", "LeaderBoardControlAt", "LeaderBoardGoalControl",
        "LeaderBoardGoalControlAt", "LeaderBoardGoalKills",
        "LeaderBoardGoalResources", "LeaderBoardGoalScore", "LeaderBoardGreed",
        "LeaderBoardKills", "LeaderBoardResources", "LeaderBoardScore",
        "LeastKills", "LeastResources", "List2Assignable", "LoadMap",
        "LowestScore", "MPQAddFile", "MPQAddWave", "Memory", "MemoryEPD",
        "MinimapPing", "ModifyUnitEnergy", "ModifyUnitHangarCount",
        "ModifyUnitHitPoints", "ModifyUnitResourceAmount", "ModifyUnitShields",
        "MostKills", "MostResources", "MoveLocation", "MoveUnit",
        "MuteUnitSpeech", "Never", "NextTrigger", "ObjPool", "Opponents", "Order",
        "PTrigger", "PauseGame", "PauseTimer", "PlayWAV", "PopTriggerScope",
        "PreserveTrigger", "PushTriggerScope", "QueueGameCommand",
        "QueueGameCommand_RightClick", "RawTrigger",
        "RegisterCreatePayloadCallback", "RemoveUnit", "RemoveUnitAt",
        "RunAIScript", "RunAIScriptAt", "RunTrigTrigger", "SCMD2Text", "SaveMap",
        "Score", "SeqCompute", "SetAllianceStatus", "SetCountdownTimer",
        "SetCurrentPlayer", "SetDeaths", "SetDoodadState", "SetInvincibility",
        "SetMemory", "SetMemoryEPD", "SetMissionObjectives", "SetNextPtr",
        "SetNextScenario", "SetResources", "SetScore", "SetSwitch",
        "SetVariables", "Switch", "TBL", "TalkingPortrait", "Transmission",
        "TrigTriggerBegin", "TrigTriggerEnd", "Trigger", "UnMuteUnitSpeech",
        "UnitProperty", "UnpauseGame", "UnpauseTimer", "VProc", "Victory", "Wait",
        "b2i1", "b2i2", "b2i4", "b2u", "cachedfunc", "ep_assert",
        "eudplibVersion", "f_atan2", "f_bitand", "f_bitlshift", "f_bitnand",
        "f_bitnor", "f_bitnot", "f_bitnxor", "f_bitor", "f_bitrshift",
        "f_bitsplit", "f_bitxor", "f_blockpatch_epd", "f_bread", "f_bwrite",
        "f_dbstr_adddw", "f_dbstr_addptr", "f_dbstr_addstr", "f_dbstr_print",
        "f_div", "f_dwadd_cp", "f_dwadd_epd", "f_dwbreak", "f_dwbreak2",
        "f_dwepdread_cp", "f_dwepdread_epd", "f_dwepdread_epd_safe",
        "f_dwpatch_epd", "f_dwrand", "f_dwread", "f_dwread_cp", "f_dwread_epd",
        "f_dwread_epd_safe", "f_dwsubtract_cp", "f_dwsubtract_epd", "f_dwwrite",
        "f_dwwrite_cp", "f_dwwrite_epd", "f_epdread_cp", "f_epdread_epd",
        "f_epdread_epd_safe", "f_flagread_epd", "f_getcurpl", "f_getseed",
        "f_getuserplayerid", "f_initextstr", "f_lengthdir", "f_memcpy", "f_mul",
        "f_playerexist", "f_rand", "f_randomize", "f_repmovsd_epd", "f_setcurpl",
        "f_simpleprint", "f_sqrt", "f_srand", "f_strcmp", "f_strcpy",
        "f_unpatchall", "f_wread", "f_wwrite", "hptr", "i2b1", "i2b2", "i2b4",
        "selftype", "u2b", "unProxy", "Kills"
};

std::unordered_set<std::string> builtinConstSet = {
        "Add", "All", "AllPlayers", "AlliedVictory", "Allies", "Ally", "AtLeast",
        "AtMost", "Attack", "Buildings", "Clear", "Cleared", "CurrentPlayer",
        "Custom", "Disable", "Enable", "Enemy", "Exactly", "Foes", "Force1",
        "Force2", "Force3", "Force4", "Gas", "KillsAndRazings", "Move",
        "NeutralPlayers", "NonAlliedVictoryPlayers", "Ore", "OreAndGas", "P1",
        "P10", "P11", "P12", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9",
        "Patrol", "Player1", "Player10", "Player11", "Player12", "Player2",
        "Player3", "Player4", "Player5", "Player6", "Player7", "Player8",
        "Player9", "Random", "Razings", "Set", "SetTo", "Subtract", "Toggle",
        "Total", "Units", "UnitsAndBuildings", "Kills"
};

bool isBuiltinFunc(const std::string& name) {
    return builtinFuncSet.find(name) != builtinFuncSet.end();
}

bool isBuiltinConst(const std::string& name) {
    return builtinConstSet.find(name) != builtinConstSet.end();
}
