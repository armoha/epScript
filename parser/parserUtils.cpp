#include <string>
#include <stdexcept>
#include <vector>
#include <regex>
#include <iostream>

#include "tokenizer/tokenizer.h"
#include "generator/pygen.h"
#include "generator/eudplibGlobals.h"
#include "parserUtilities.h"

std::string getFile(const std::string& fname) {
    FILE* fp = fopen(fname.c_str(), "r");
    if(fp == nullptr) {
        throw std::runtime_error("Input file not found : " + fname);
    }

    fseek(fp, 0, SEEK_END);
    size_t fsize = static_cast<size_t>(ftell(fp));
    rewind(fp);

    std::vector<char> fdata;
    fdata.reserve(fsize);
    while(1) {
        char ch = static_cast<char>(fgetc(fp));
        if(feof(fp)) break;
        fdata.push_back(ch);
    }
    return std::string(fdata.begin(), fdata.end());
}

////

extern int currentTokenizingLine;
Token* genEmpty() {
    return new Token(TOKEN_TEMP, currentTokenizingLine);
}

void commaListIter(std::string& s, std::function<void(std::string&)> func) {
    bool isFirst = true;
    std::string out;
    const char *p = s.c_str(), *p2 = p;
    while(1) {
        while(*p2 != '\0' && *p2 != ',') p2++;
        std::string value(p, p2 - p);
        func(value);
        if(isFirst) isFirst = false;
        else out += ", ";
        out += value;
        if(*p2 == '\0') break;
        p = p2 = p2 + 2;
    }
    s = out;
}

void funcNamePreprocess(std::string& s) {
    if(isBuiltinFunc(s)) return;  // Some builtin function don't have f_ prefixes. (b2i4) Pass them as-is
    if(s[0] == '_' || ('A' <= s[0] && s[0] <= 'Z')) return;  // Name starts with uppercase -> Don't modify
    else s = "f_" + s;
}

bool errorOccured = false;

void throw_error(int line, int code, const std::string& message) {
    std::cerr << "[Error " << code << "] Line " << line << " : " << message << std::endl;
    errorOccured = true;
}

static inline std::string &ltrim(std::string &s) {
    size_t startpos = s.find_first_not_of(" \t");
    if (std::string::npos != startpos)
    {
        s = s.substr(startpos);
    }
    return s;
}

// trim from end
static inline std::string &rtrim(std::string& s) {
    size_t endpos = s.find_last_not_of(" \t");
    if (std::string::npos != endpos)
    {
        s = s.substr(0, endpos + 1);
    }
    return s;
}

// trim from both ends
std::string trim(std::string s) {
    return ltrim(rtrim(s));
}


int tmpIndex = 0;
Token* genTemp(Token* lineSrc) {
    static char output[20] = "_t";
    sprintf(output, "_t%d", tmpIndex++);
    return new Token(output, lineSrc);
}

const int LENGTH_LIMIT = 60;

Token* mkTokenTemp(Token* a) {
    if(a->data.size() > LENGTH_LIMIT) {
        Token* t = genTemp(a);
        (*pGen) << t->data << " = " << a->data << std::endl;
        delete a;
        return t;
    }
    else {
        a->type = TOKEN_TEMP;
        return a;
    }
}

Token* binaryMerge(Token* a, const std::string& opstr, Token* b) {
    b->data = a->data + (" " + opstr + " ") + b->data;
    delete a;
    return mkTokenTemp(b);
}

////

static std::regex iwCollapseRegex("\n( *)(_t\\d+) = (EUDWhile|EUDIf|EUDElseIf)\\(\\)\n\\1if \\2\\((.+)\\):");
std::string iwCollapse(const std::string& in) {
    return std::regex_replace(in, iwCollapseRegex, "\n$1if $3()($4):");
}

const char* stubCode =
        "## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY\n"
                "from eudplib import *\n"
                "def _SRET(v, klist): return List2Assignable([v[k] for k in klist])\n"
                "def _L2V(l): ret = EUDVariable(); EUDIf()(l); ret << 1; EUDElse()(); ret << 0; EUDEndIf(); return ret;\n"
                "def _MVAR(vs): return List2Assignable([v if IsEUDVariable(v) else EUDVariable() << v for v in FlattenList(vs)])\n"
                "## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY\n\n";

std::string addStubCode(const std::string& s) {
    return stubCode + s;
}
